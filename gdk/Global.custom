// Global.custom - customizations to Gdk.Global
//
// Authors: Mike Kestner  <mkestner@ximian.com>
//          Boyd Timothy  <btimothy@novell.com>
//
// Copyright (c) 2004 Novell, Inc.
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General 
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern IntPtr gdk_devices_list ();

		public static Device[] DevicesList ()
		{
			IntPtr raw_ret = gdk_devices_list ();
			if (raw_ret == IntPtr.Zero)
				return new Device [0];
			GLib.List list = new GLib.List(raw_ret);
			return GLib.Marshaller.ListToArray<Device> (list);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern IntPtr gdk_list_visuals ();

		public static Visual[] ListVisuals ()
		{
			IntPtr raw_ret = gdk_list_visuals ();
			if (raw_ret == IntPtr.Zero)
				return new Visual [0];
			return GLib.Marshaller.ListPtrToArray<Visual> (raw_ret, typeof (GLib.List), true, false);
		}

		[DllImport("gdksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
		static extern IntPtr gtksharp_get_gdk_net_supported ();

		public static Gdk.Atom[] SupportedWindowManagerHints {
			get {
				IntPtr raw_ret = gtksharp_get_gdk_net_supported ();
				if (raw_ret == IntPtr.Zero)
					return new Gdk.Atom [0];
				return GLib.Marshaller.ListPtrToArray<Gdk.Atom> (raw_ret, typeof (GLib.List), true, false);
			}
		}

		[DllImport("gdksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
		static extern IntPtr gtksharp_get_gdk_net_client_list (out int count);

		public static Gdk.Window[] WindowManagerClientWindows {
			get {
				int count;
				IntPtr raw_ret = gtksharp_get_gdk_net_client_list (out count);
				if (raw_ret == IntPtr.Zero)
					return Array.Empty<Gdk.Window> ();
				Gdk.Window [] windows = new Gdk.Window [count];
				int offset = 0;
				for (int i = 0; i < count; i++) {
					int windowID = Marshal.ReadInt32 (raw_ret, offset);
					offset += IntPtr.Size;
					windows [i] = Gdk.Window.ForeignNew ((uint) windowID);
				}
				GLib.Marshaller.Free (raw_ret);
				return windows;
			}
		}

		[DllImport("gdksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
		static extern int gtksharp_get_gdk_net_number_of_desktops ();

		public static int NumberOfDesktops {
			get {
				return gtksharp_get_gdk_net_number_of_desktops ();
			}
		}

		[DllImport("gdksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
		static extern int gtksharp_get_gdk_net_current_desktop ();

		public static int CurrentDesktop {
			get {
				return gtksharp_get_gdk_net_current_desktop ();
			}
		}

		[DllImport("gdksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
		static extern uint gtksharp_get_gdk_net_active_window ();

		public static Gdk.Window ActiveWindow {
			get {
				uint windowID = gtksharp_get_gdk_net_active_window ();
				if (windowID == 0)
					return Gdk.Global.DefaultRootWindow;
				Gdk.Window window = Gdk.Window.ForeignNew (windowID);
				return window;
			}
		}

		[DllImport("gdksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
		static extern IntPtr gtksharp_get_gdk_net_workarea ();

		public static Gdk.Rectangle[] DesktopWorkareas {
			get {
				IntPtr raw_ret = gtksharp_get_gdk_net_workarea ();
				if (raw_ret == IntPtr.Zero)
					return new Gdk.Rectangle [0];
				return GLib.Marshaller.ListPtrToArray<Gdk.Rectangle> (raw_ret, typeof(GLib.List), true, false);
			}
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern bool gdk_init_check(ref int argc, ref IntPtr argv);

		public static bool InitCheck (ref string[] argv)
		{
			GLib.Argv a = new GLib.Argv (argv, true);
			IntPtr buf = a.Handle;
			int argc = argv.Length + 1;

			bool result = gdk_init_check (ref argc, ref buf);
			argv = a.GetArgs (argc);
			return result;
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern void gdk_parse_args(ref int argc, ref IntPtr argv);

		public static void ParseArgs (ref string[] argv)
		{
			GLib.Argv a = new GLib.Argv (argv, true);
			IntPtr buf = a.Handle;
			int argc = argv.Length + 1;

			gdk_parse_args (ref argc, ref buf);
			argv = a.GetArgs (argc);
		}

		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern void gdk_query_depths (out IntPtr depths, out int n_depths);

		public static int[] QueryDepths ()
		{
			IntPtr ptr;
			int count;
			gdk_query_depths (out ptr, out count);
			int[] result = new int [count];
			Marshal.Copy (ptr, result, 0, count);
			return result;
		}
		[DllImport("libgdk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern void gdk_query_visual_types (out IntPtr types, out int n_types);

		public static VisualType[] QueryVisualTypes ()
		{
			IntPtr ptr;
			int count;
			gdk_query_visual_types (out ptr, out count);
			int[] tmp = new int [count];
			Marshal.Copy (ptr, tmp, 0, count);
			VisualType[] result = new VisualType [count];
			for (int i = 0; i < count; i++)
				result [i] = (VisualType) tmp [i];
			return result;
		}

		public static void AddClientMessageFilter (Gdk.Atom message_type, Gdk.FilterFunc func)
		{
			Gdk.Display.Default.AddClientMessageFilter (message_type, func);
		}

