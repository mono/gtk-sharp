<Type Name="CanvasItem" FullName="Gnome.CanvasItem">
  <TypeSignature Language="C#" Maintainer="auto" Value="public class CanvasItem : Gtk.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CanvasItem extends Gtk.Object" />
  <AssemblyInfo>
    <AssemblyName>gnome-sharp</AssemblyName>
    <AssemblyPublicKey>
    </AssemblyPublicKey>
    <AssemblyVersion>2.20.0.0</AssemblyVersion>
    <AssemblyVersion>2.24.0.0</AssemblyVersion>
  </AssemblyInfo>
  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
  <Base>
    <BaseTypeName>Gtk.Object</BaseTypeName>
  </Base>
  <Interfaces>
  </Interfaces>
  <Docs>
    <summary>Base class for all canvas items</summary>
    <remarks>
      <para>
        This is the base class for all canvas items. Canvas items are
        the drawing elements of a GnomeCanvas. Example items include
        lines, ellipses, polygons, images, text, curves and even
        arbitrary GTK+ widgets.
      </para>
      <para>
        Canvas items use the GObject property system to query and set
        parameters. Properties are inherited so, for example, a
        <see cref="P:Gnome.CanvasPolygon" /> has a
        <see cref="P:Gnome.CanvasPolygon.FillColor" /> property that is
        inherited from its parent class object
        <see cref="P:Gnome.CanvasShape" />. So be
        sure to check the parent classes of
        <see cref="T:Gnome.CanvasItem" /> objects
        when looking for item properties.
      </para>
      <para>
        To create a new canvas item use the
        <see cref="C:Gnome.CanvasItem" /> constructor which
        takes a parent <see cref="T:Gnome.CanvasGroup" />,
        <see cref="T:GLib.Type" /> of the item to create,
        and a <see langword="null" /> terminated list of name/value GObject properties to
        set for the new item.
      </para>
      <para>
        There are several methods to change the drawing stacking
        order of an item. Call <see cref="M:Gnome.CanvasItem.Raise" /> to raise an
        item a specified number of positions or
        <see cref="M:Gnome.CanvasItem.Lower" /> to lower it. To raise an item to the
        top call <see cref="M:Gnome.CanvasItem.RaiseToTop" />. The
        <see cref="M:Gnome.CanvasItem.LowerToBottom" /> methods will put it at
        the bottom.
      </para>
      <para>
        To show an item call <see cref="M:Gnome.CanvasItem.Show" />. Note that
        canvas item's are shown by default and so do not need to be
        explicitly shown after creation (contrary to GTK+ widget
        behavior). Call <see cref="M:Gnome.CanvasItem.Hide" /> to hide an item.
      </para>
      <para>
        To move an item relative to its current position (item
        coordinates) call <see cref="M:Gnome.CanvasItem.Move" /> or
        <see cref="M:Gnome.CanvasItem.AffineRelative" /> for more complex
        transforms. <see cref="M:Gnome.CanvasItem.AffineAbsolute" /> can be used to
        set an item's transform to specific values (not offsets).
      </para>
      <para>
        To convert between world and item coordinate systems call
        <see cref="M:Gnome.CanvasItem.W2i" />, and to convert in the other direction
        call <see cref="M:Gnome.CanvasItem.I2w" />. To get the transform for
        converting from item to world coordinates use
        <see cref="M:Gnome.CanvasItem.I2wAffine" /> or for converting item to
        canvas coordinates, <see cref="M:Gnome.CanvasItem.I2cAffine" />.
      </para>
      <para>
        Handling user input for interactive items is accomplished
        through a few functions and the <see cref="E:Gnome.CanvasItem.CanvasEvent" /> signals. To grab the
        mouse cursor call <see cref="M:Gnome.CanvasItem.Grab" />, it can be
        ungrabbed with <see cref="M:Gnome.CanvasItem.Ungrab" /> (see
        <see cref="M:Gdk.Pointer.Grab" /> of the GTK+ library for details). To grab
        keyboard focus call <see cref="M:Gnome.CanvasItem.GrabFocus" />. Received
        events will be signaled via the "event" signal.
      </para>
      <para>
        Some other useful functions include a reparenting routine,
        <see cref="M:Gnome.CanvasItem.Reparent" />, and a function to query the
        bounding box of an item (a minumum rectangular area containing
        all parts of the item), <see cref="M:Gnome.CanvasItem.Getbounds" />.</para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CanvasItem ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.24.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue />
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CanvasItem (GLib.GType gtype);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(valuetype GLib.GType gtype) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.24.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue />
      <Parameters>
        <Parameter Name="gtype" Type="GLib.GType" />
      </Parameters>
      <Docs>
        <param name="gtype">a <see cref="T:GLib.GType" /></param>
        <summary>Protected Constructor.</summary>
        <remarks>Chain to this constructor if you have manually registered a native <see cref="T:GLib.GType" /> value for your subclass.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CanvasItem (IntPtr raw);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int raw) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.24.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue />
      <Parameters>
        <Parameter Name="raw" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="raw">Pointer to the C object.</param>
        <summary>Internal constructor</summary>
        <remarks>
          <para>This is an internal constructor, and should not be used by user code.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CanvasItem (Gnome.CanvasGroup group, GLib.GType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Gnome.CanvasGroup group, valuetype GLib.GType type) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.24.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue />
      <Parameters>
        <Parameter Name="group" Type="Gnome.CanvasGroup" />
        <Parameter Name="type" Type="GLib.GType" />
      </Parameters>
      <Docs>
        <param name="group">a <see cref="T:Gnome.CanvasGroup" /></param>
        <param name="type">a <see cref="T:GLib.GType" /></param>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="AffineAbsolute">
      <MemberSignature Language="C#" Value="public void AffineAbsolute (double[] affine);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AffineAbsolute(float64[] affine) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.24.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="affine" Type="System.Double[]" />
      </Parameters>
      <Docs>
        <param name="affine">The affine transformation set as the current transformation for the item.<see cref="T:System.Double" /></param>
        <summary>
          Makes the item's affine transformation matrix be equal to
          the specified matrix.
        </summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AffineRelative">
      <MemberSignature Language="C#" Value="public void AffineRelative (double[] affine);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AffineRelative(float64[] affine) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.24.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="affine" Type="System.Double[]" />
      </Parameters>
      <Docs>
        <param name="affine">The affine transform to combine with the items current transform</param>
        <summary>
          Combines the specified affine transformation matrix with the
          item's current transformation.
        </summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Canvas">
      <MemberSignature Language="C#" Value="public Gnome.Canvas Canvas { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Gnome.Canvas Canvas" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.24.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Gnome.Canvas</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added</summary>
        <value>To be added: an object of type 'Gnome.Canvas'</value>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanvasEvent">
      <MemberSignature Language="C#" Value="public event Gnome.CanvasEventHandler CanvasEvent;" />
      <MemberSignature Language="ILAsm" Value=".event class Gnome.CanvasEventHandler CanvasEvent" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.24.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Signal("event")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Gnome.CanvasEventHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          Signals mouse button clicks, motion, enter/leave, and key
          press events on canvas items. Use this to create user
          interactive items. The x and y coordinates in the
          <see cref="F:GtkSharp.CanvasEventArgs.Event" />
          field have been converted to canvas world coordinates.
        </summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Draw">
      <MemberSignature Language="C#" Value="protected virtual void Draw (Gdk.Drawable drawable, int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Draw(class Gdk.Drawable drawable, int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.24.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.DefaultSignalHandler(ConnectionMethod="OverrideDraw", Type=typeof(Gnome.CanvasItem))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="drawable" Type="Gdk.Drawable" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="drawable">a <see cref="T:Gdk.Drawable" /></param>
        <param name="x">a <see cref="T:System.Int32" /></param>
        <param name="y">a <see cref="T:System.Int32" /></param>
        <param name="width">a <see cref="T:System.Int32" /></param>
        <param name="height">a <see cref="T:System.Int32" /></param>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBounds">
      <MemberSignature Language="C#" Value="public void GetBounds (out double x1, out double y1, out double x2, out double y2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void GetBounds(float64 x1, float64 y1, float64 x2, float64 y2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.24.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x1" Type="System.Double&amp;" RefType="out" />
        <Parameter Name="y1" Type="System.Double&amp;" RefType="out" />
        <Parameter Name="x2" Type="System.Double&amp;" RefType="out" />
        <Parameter Name="y2" Type="System.Double&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="x1">Return value for the leftmost edge of the bounding box</param>
        <param name="y1">Return value for the upper edge of the bounding box</param>
        <param name="x2">Return value for the rightmost edge of the bounding box</param>
        <param name="y2">Return value for the lower edge of the bounding box</param>
        <summary>
          Queries the bounding box of a canvas item. The bounds are
          returned in the coordinate system of the item's
          parent.
        </summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Grab">
      <MemberSignature Language="C#" Value="public int Grab (uint event_mask, Gdk.Cursor cursor, uint etime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Grab(unsigned int32 event_mask, class Gdk.Cursor cursor, unsigned int32 etime) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.24.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="event_mask" Type="System.UInt32" />
        <Parameter Name="cursor" Type="Gdk.Cursor" />
        <Parameter Name="etime" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="event_mask">a <see cref="T:System.UInt32" /></param>
        <param name="cursor">a <see cref="T:Gdk.Cursor" /></param>
        <param name="etime">a <see cref="T:System.UInt32" /></param>
        <summary>To be added</summary>
        <returns>a <see cref="T:System.Int32" /></returns>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="GrabFocus">
      <MemberSignature Language="C#" Value="public void GrabFocus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void GrabFocus() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.24.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          Makes the specified item take the keyboard focus, so all
          keyboard events will be sent to it. If the canvas widget
          itself did not have the focus, it grabs it as well.
        </summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GType">
      <MemberSignature Language="C#" Value="public static GLib.GType GType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype GLib.GType GType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.24.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>GLib.GType</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>GType Property.</summary>
        <value>a <see cref="T:GLib.GType" /></value>
        <remarks>Returns the native <see cref="T:GLib.GType" /> value for <see cref="T:Gnome.CanvasItem" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Hide">
      <MemberSignature Language="C#" Value="public void Hide ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Hide() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.24.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Hides a canvas item. If the item was already hidden, then no action is taken.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="I2cAffine">
      <MemberSignature Language="C#" Value="public void I2cAffine (out double[] affine);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void I2cAffine(float64[] affine) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.24.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="affine" Type="System.Double[]&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="affine">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="I2w">
      <MemberSignature Language="C#" Value="public void I2w (ref double x, ref double y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void I2w(float64 x, float64 y) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.24.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Double&amp;" RefType="ref" />
        <Parameter Name="y" Type="System.Double&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="x">X coordinate to convert (input/output value).</param>
        <param name="y">Y coordinate to convert (input/output value).</param>
        <summary>Converts a coordinate pair from item-relative coordinates to world coordinates.</summary>
        <remarks>
          <para>
            The parameters <paramref name="x" /> and <paramref name="y" />
            are used as both in and out parameters.
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="I2wAffine">
      <MemberSignature Language="C#" Value="public void I2wAffine (out double[] affine);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void I2wAffine(float64[] affine) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.24.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="affine" Type="System.Double[]&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="affine">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lower">
      <MemberSignature Language="C#" Value="public void Lower (int positions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Lower(int32 positions) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.24.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="positions" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="positions">Number of steps to lower the item.</param>
        <summary>
          Lowers the item in its parent's stack by the specified
          number of positions. If the number of positions is greater
          than the distance to the bottom of the stack, then the item
          is put at the bottom.
        </summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LowerToBottom">
      <MemberSignature Language="C#" Value="public void LowerToBottom ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LowerToBottom() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.24.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Lowers an item to the bottom of its parent's stack.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Move">
      <MemberSignature Language="C#" Value="public void Move (double dx, double dy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Move(float64 dx, float64 dy) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.24.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dx" Type="System.Double" />
        <Parameter Name="dy" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="dx">Horizontal offset.</param>
        <param name="dy">Vertical offset.</param>
        <summary>
          Moves a canvas item by creating an affine transformation
          matrix for translation by using the specified values. This
          happens in item local coordinate system, so if you have
          nontrivial transform, it most probably does not do, what you
          want.
        </summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnCanvasEvent">
      <MemberSignature Language="C#" Value="protected virtual bool OnCanvasEvent (Gdk.Event evnt);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnCanvasEvent(class Gdk.Event evnt) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.24.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.DefaultSignalHandler(ConnectionMethod="OverrideCanvasEvent", Type=typeof(Gnome.CanvasItem))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="evnt" Type="Gdk.Event" />
      </Parameters>
      <Docs>
        <param name="evnt">a <see cref="T:Gdk.Event" /></param>
        <summary>Default handler for the <see cref="M:Gnome.CanvasItem.CanvasEvent" /> event.</summary>
        <returns>a <see cref="T:System.Boolean" /></returns>
        <remarks>Override this method in a subclass to provide a default handler for the <see cref="M:Gnome.CanvasItem.CanvasEvent" /> event.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public Gnome.CanvasItem Parent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Gnome.CanvasItem Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.24.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Property("parent")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Gnome.CanvasItem</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <summary>The parent item</summary>
        <value>the parent item</value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Point">
      <MemberSignature Language="C#" Value="protected virtual double Point (double x, double y, int cx, int cy, out Gnome.CanvasItem actual_item);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance float64 Point(float64 x, float64 y, int32 cx, int32 cy, class Gnome.CanvasItem actual_item) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.24.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.DefaultSignalHandler(ConnectionMethod="OverridePoint", Type=typeof(Gnome.CanvasItem))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Double" />
        <Parameter Name="y" Type="System.Double" />
        <Parameter Name="cx" Type="System.Int32" />
        <Parameter Name="cy" Type="System.Int32" />
        <Parameter Name="actual_item" Type="Gnome.CanvasItem&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="x">a <see cref="T:System.Double" /></param>
        <param name="y">a <see cref="T:System.Double" /></param>
        <param name="cx">a <see cref="T:System.Int32" /></param>
        <param name="cy">a <see cref="T:System.Int32" /></param>
        <param name="actual_item">a <see cref="T:Gnome.CanvasItem" /></param>
        <summary>To be added</summary>
        <returns>a <see cref="T:System.Double" /></returns>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="Raise">
      <MemberSignature Language="C#" Value="public void Raise (int positions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Raise(int32 positions) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.24.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="positions" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="positions">Number of steps to raise the item.</param>
        <summary>
          Raises the item in its parent's stack by the specified
          number of positions. If the number of positions is greater
          than the distance to the top of the stack, then the item is
          put at the top.
        </summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RaiseToTop">
      <MemberSignature Language="C#" Value="public void RaiseToTop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RaiseToTop() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.24.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Raises an item to the top of its parent's stack.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Realize">
      <MemberSignature Language="C#" Value="protected virtual void Realize ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Realize() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.24.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.DefaultSignalHandler(ConnectionMethod="OverrideRealize", Type=typeof(Gnome.CanvasItem))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="protected virtual void Render (ref Gnome.CanvasBuf buf);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Render(valuetype Gnome.CanvasBuf buf) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.24.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buf" Type="Gnome.CanvasBuf&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="buf">a <see cref="T:Gnome.CanvasBuf" /></param>
        <summary>Renders the CanvasItem when using an anti-aliased GnomeCanvas.</summary>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="Reparent">
      <MemberSignature Language="C#" Value="public void Reparent (Gnome.CanvasGroup new_group);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reparent(class Gnome.CanvasGroup new_group) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.24.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="new_group" Type="Gnome.CanvasGroup" />
      </Parameters>
      <Docs>
        <param name="new_group">A canvas group.</param>
        <summary>
          Changes the parent of the specified item to be the new
          group. The item keeps its group-relative coordinates as for
          its old parent, so the item may change its absolute position
          within the canvas.
        </summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RequestRedrawSvp">
      <MemberSignature Language="C#" Value="public void RequestRedrawSvp (Art.SVP svp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RequestRedrawSvp(valuetype Art.SVP svp) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.24.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="svp" Type="Art.SVP" />
      </Parameters>
      <Docs>
        <param name="svp">The svp that needs to be redrawn</param>
        <summary>Request redraw of <paramref name="svp" /> if in aa mode, or the entire item in in xlib mode.</summary>
        <remarks>
          <para>
            This item must contain <paramref name="svp" />.
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RequestUpdate">
      <MemberSignature Language="C#" Value="public void RequestUpdate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RequestUpdate() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.24.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be used only by item implementations. Requests that the canvas queue an update for the specified item.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetBounds">
      <MemberSignature Language="C#" Value="public void ResetBounds ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetBounds() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.24.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Resets the bounding box of a canvas item to an empty rectangle.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Show">
      <MemberSignature Language="C#" Value="public void Show ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Show() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.24.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Shows a canvas item. If the item was already shown, then no action is taken.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ungrab">
      <MemberSignature Language="C#" Value="public void Ungrab (uint etime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Ungrab(unsigned int32 etime) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.24.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="etime" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="etime">The timestamp for ungrabbing the mouse.</param>
        <summary>Ungrabs the item, which must have been grabbed in the canvas, and ungrabs the mouse.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="protected virtual void Update (double[] affine, ref Art.SVP clip_path, int flags);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Update(float64[] affine, valuetype Art.SVP clip_path, int32 flags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.24.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.DefaultSignalHandler(ConnectionMethod="OverrideUpdate", Type=typeof(Gnome.CanvasItem))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="affine" Type="System.Double[]" />
        <Parameter Name="clip_path" Type="Art.SVP&amp;" RefType="ref" />
        <Parameter Name="flags" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="affine">a <see cref="T:System.Double" /></param>
        <param name="clip_path">a <see cref="T:Art.SVP" /></param>
        <param name="flags">a <see cref="T:System.Int32" /></param>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateSvp">
      <MemberSignature Language="C#" Value="public void UpdateSvp (Art.SVP p_svp, Art.SVP new_svp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UpdateSvp(valuetype Art.SVP p_svp, valuetype Art.SVP new_svp) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.24.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="p_svp" Type="Art.SVP" />
        <Parameter Name="new_svp" Type="Art.SVP" />
      </Parameters>
      <Docs>
        <param name="p_svp">the existing SVP</param>
        <param name="new_svp">the new SVP</param>
        <summary>Sets the svp to the new value, requesting repaint on what's changed</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateSvpClip">
      <MemberSignature Language="C#" Value="public void UpdateSvpClip (Art.SVP p_svp, Art.SVP new_svp, Art.SVP clip_svp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UpdateSvpClip(valuetype Art.SVP p_svp, valuetype Art.SVP new_svp, valuetype Art.SVP clip_svp) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.24.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="p_svp" Type="Art.SVP" />
        <Parameter Name="new_svp" Type="Art.SVP" />
        <Parameter Name="clip_svp" Type="Art.SVP" />
      </Parameters>
      <Docs>
        <param name="p_svp">the old SVP</param>
        <param name="new_svp">the new SVP</param>
        <param name="clip_svp">a clip path</param>
        <summary>Sets the svp to the new value, clipping if necessary, and requesting repaint on what's changed.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="W2i">
      <MemberSignature Language="C#" Value="public void W2i (ref double x, ref double y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void W2i(float64 x, float64 y) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.24.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Double&amp;" RefType="ref" />
        <Parameter Name="y" Type="System.Double&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="x">X coordinate to convert (input/output value).</param>
        <param name="y">Y coordinate to convert (input/output value).</param>
        <summary>Converts a coordinate pair from world coordinates to item-relative coordinates.</summary>
        <remarks>
          <para>
            The parameters <paramref name="x" /> and <paramref name="y" />
            are used as both in and out parameters.
          </para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
