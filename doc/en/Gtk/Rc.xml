<Type Name="Rc" FullName="Gtk.Rc">
  <TypeSignature Language="C#" Value="public class Rc" Maintainer="auto" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Rc extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>gtk-sharp</AssemblyName>
    <AssemblyPublicKey>
    </AssemblyPublicKey>
    <AssemblyVersion>2.12.0.0</AssemblyVersion>
  </AssemblyInfo>
  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Object for rc-file handling--- for example, ~/.gtkrc--- and application style and default setting. Rc files can be used to set the colors of just about any widget, and they can also be used to tile pixmaps onto the background of some widgets.</summary>
    <remarks />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rc ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue />
      <Parameters />
      <Docs>
        <summary>Public constructor; generates a new RC parser.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="AddClassStyle">
      <MemberSignature Language="C#" Value="public static void AddClassStyle (Gtk.RcStyle rc_style, string pattern);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddClassStyle(class Gtk.RcStyle rc_style, string pattern) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rc_style" Type="Gtk.RcStyle" />
        <Parameter Name="pattern" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="rc_style">a <see cref="T:Gtk.RcStyle" /></param>
        <param name="pattern">a <see cref="T:System.String" /></param>
        <summary>Deprecated. Do not use.</summary>
        <remarks>
        </remarks>
        <since version="Gtk# 2.4" />
      </Docs>
    </Member>
    <Member MemberName="AddDefaultFile">
      <MemberSignature Language="C#" Value="public static void AddDefaultFile (string filename);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddDefaultFile(string filename) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filename">a <see cref="T:System.String" />, the filename to add to the parse list</param>
        <summary>Adds a file to the list of files to be parsed at the end of <see cref="M:Gtk.Init()" />.</summary>
        <remarks>If <paramref name="filename" /> is not absolute, it is searched in the current directory.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddWidgetClassStyle">
      <MemberSignature Language="C#" Value="public static void AddWidgetClassStyle (Gtk.RcStyle rc_style, string pattern);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddWidgetClassStyle(class Gtk.RcStyle rc_style, string pattern) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rc_style" Type="Gtk.RcStyle" />
        <Parameter Name="pattern" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="rc_style">a <see cref="T:Gtk.RcStyle" />, the style to use for widgets matching <paramref name="pattern" /></param>
        <param name="pattern">a <see cref="T:System.String" />, the pattern to match</param>
        <summary>
	  Adds a <see cref="T:Gtk.RcStyle" /> that will be looked up
	  by a match against the widget's class pathname.
	</summary>
        <remarks>
	  This is equivalent to a "widget_class PATTERN style STYLE" statement in a RC file.
	</remarks>
        <since version="Gtk# 2.4" />
      </Docs>
    </Member>
    <Member MemberName="AddWidgetNameStyle">
      <MemberSignature Language="C#" Value="public static void AddWidgetNameStyle (Gtk.RcStyle rc_style, string pattern);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddWidgetNameStyle(class Gtk.RcStyle rc_style, string pattern) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rc_style" Type="Gtk.RcStyle" />
        <Parameter Name="pattern" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="rc_style">a <see cref="T:Gtk.RcStyle" />, the style to use for widgets matching <paramref name="pattern" /></param>
        <param name="pattern">a <see cref="T:System.String" />, the pattern to match</param>
        <summary>
	  Adds a  <see cref="T:Gtk.RcStyle" /> that will be looked up by a match against the widget's pathname. 
	</summary>
        <remarks>
	This is equivalent to a "widget PATTERN style STYLE" statement in a RC file.
	</remarks>
        <since version="Gtk# 2.4" />
      </Docs>
    </Member>
    <Member MemberName="DefaultFiles">
      <MemberSignature Language="C#" Value="public static string[] DefaultFiles { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property string[] DefaultFiles" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <summary>The current list of RC files that will be parsed at the end of <see cref="M:Gtk.Init()" />.</summary>
        <value>a <see cref="T:System.String" />, a list of filenames.</value>
        <remarks>Unlike the underlying GTK+ function, this function's return string does not use memory owned by the application.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindModuleInPath">
      <MemberSignature Language="C#" Value="public static string FindModuleInPath (string module_file);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string FindModuleInPath(string module_file) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="module_file" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="module_file">a <see cref="T:System.String" /></param>
        <summary>Searches for a theme engine in the GTK+ search path. This function is not useful for applications and should not be used.</summary>
        <returns>a <see cref="T:System.String" /></returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="GetStyle">
      <MemberSignature Language="C#" Value="public static Gtk.Style GetStyle (Gtk.Widget widget);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Gtk.Style GetStyle(class Gtk.Widget widget) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Gtk.Style</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="widget" Type="Gtk.Widget" />
      </Parameters>
      <Docs>
        <param name="widget">a <see cref="T:Gtk.Widget" /></param>
        <summary>Finds all matching RC styles for a given widget, composites them together, and then creates a <see cref="T:Gtk.Style" /> representing the composite appearance.</summary>
        <returns>a <see cref="T:Gtk.Style" /></returns>
        <remarks>(GTK+ actually keeps a cache of previously created styles, so a new style may not be created.)</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetStyleByPaths">
      <MemberSignature Language="C#" Value="public static Gtk.Style GetStyleByPaths (Gtk.Settings settings, string widget_path, string class_path, GLib.GType type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Gtk.Style GetStyleByPaths(class Gtk.Settings settings, string widget_path, string class_path, valuetype GLib.GType type) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Gtk.Style</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="settings" Type="Gtk.Settings" />
        <Parameter Name="widget_path" Type="System.String" />
        <Parameter Name="class_path" Type="System.String" />
        <Parameter Name="type" Type="GLib.GType" />
      </Parameters>
      <Docs>
        <param name="settings">a <see cref="T:Gtk.Settings" /></param>
        <param name="widget_path">a <see cref="T:System.String" />,  the widget path to use when looking up the style, or <see langword="null" />  if no matching against the widget path should be done</param>
        <param name="class_path">a <see cref="T:System.String" />,  the class path to use when looking up the style, or <see langword="null" />  if no matching against the class path should be done.</param>
        <param name="type">a <see cref="T:GLib.GType" />,  a type that will be used along with parent types of this type when matching against class styles, or G_TYPE_NONE</param>
        <summary>Creates up a <see cref="T:Gtk.Style" /> from styles defined in a RC file by providing the raw components used in matching. This function may be useful when creating pseudo-widgets that should be themed like widgets but don't actually have corresponding GTK# widgets. An example of this would be items inside a GNOME canvas widget.</summary>
        <returns>a <see cref="T:Gtk.Style" />,a style created by matching with the supplied paths, or <see langword="null" /> if nothing matching was specified and the default style should be used. 
</returns>
        <remarks>The returned value is owned by GTK+ as part of an internal cache, so you must call g_object_ref() on the returned value if you want to keep a reference to it. (FIXME: what's the GTK# equivalent of g_object_ref()?)</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImModuleFile">
      <MemberSignature Language="C#" Value="public static string ImModuleFile { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string ImModuleFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The path to the IM module file specified by the RC file. This may be overridden by the GTK_IM_MODULE_FILE environment variable.</summary>
        <value>a <see cref="T:System.String" /></value>
        <remarks>(FIXME: does this apply for Gtk# too?) In standard Gtk+ applications, the GTK_IM_MODULE_FILE environment variable overrides the im_module_file specified in the RC files, which in turn overrides the default value sysconfdir/gtk-2.0/gtk.immodules  (sysconfdir is the sysconfdir specified when GTK+ was configured, usually /usr/local/etc.)</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImModulePath">
      <MemberSignature Language="C#" Value="public static string ImModulePath { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string ImModulePath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtains the path in which to look for IM modules. 
</summary>
        <value>a <see cref="T:System.String" /></value>
        <remarks>(FIXME: "See the documentation of the GTK_PATH environment variable for more details about looking up modules.") This function is useful solely for utilities supplied with GTK+ and should not be used by applications under normal circumstances.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ModuleDir">
      <MemberSignature Language="C#" Value="public static string ModuleDir { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string ModuleDir" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the name a directory in which GTK# looks for theme engines.</summary>
        <value>a <see cref="T:System.String" /></value>
        <remarks>Unlike the underlying GTK+ function, the return value of this method is a string, not a directory handle that must be freed later. (FIXME: the GTK+ docs point at the "GTK_PATH" section of "Running GTK applications", which is very detailed and may or may not need included here.)</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static void Parse (string filename);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Parse(string filename) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filename">a <see cref="T:System.String" />, the file to parse.</param>
        <summary>Parses an rc file into the internal data structure.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ParseString">
      <MemberSignature Language="C#" Value="public static void ParseString (string rc_string);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ParseString(string rc_string) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rc_string" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="rc_string">a <see cref="T:System.String" /> to parse.</param>
        <summary>Parses resource information directly from a string.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ReparseAll">
      <MemberSignature Language="C#" Value="public static bool ReparseAll ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ReparseAll() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>If the modification time on any previously read file for the default <see cref="T:Gtk.Settings" /> has changed, discard all style information and then reread all previously read RC files.</summary>
        <returns>a <see cref="T:System.Boolean" />, TRUE if files were re-read.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ReparseAllForSettings">
      <MemberSignature Language="C#" Value="public static bool ReparseAllForSettings (Gtk.Settings settings, bool force_load);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ReparseAllForSettings(class Gtk.Settings settings, bool force_load) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="settings" Type="Gtk.Settings" />
        <Parameter Name="force_load" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="settings">a <see cref="T:Gtk.Settings" /></param>
        <param name="force_load">a <see cref="T:System.Boolean" />, force reload whether or not anything changed if TRUE</param>
        <summary>If the modification time on any previously read file for the given <see cref="T:Gtk.Settings" /> has changed, discard all style information and then reread all previously read RC files.</summary>
        <returns>a <see cref="T:System.Boolean" />, TRUE if the files were re-read.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ResetStyles">
      <MemberSignature Language="C#" Value="public static void ResetStyles (Gtk.Settings settings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ResetStyles(class Gtk.Settings settings) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="settings" Type="Gtk.Settings" />
      </Parameters>
      <Docs>
        <param name="settings">a <see cref="T:Gtk.Settings" /></param>
        <summary>
	  Recomputes the styles for all widgets that use a particular <see cref="T:Gtk.Settings" /> object. 
	</summary>
        <remarks>
          <para>
	    There is one GtkSettings object per <see cref="T:Gdk.Screen" />;
	    see <see cref="M:Gtk.Settings.GetForScreen" /></para>
          <para>
	    This method is useful when some global parameter has
	    changed that affects the appearance of all widgets,
	    because when a widget gets a new style, it will both
	    redraw and recompute any cached information about its
	    appearance. As an example, it is used when the default
	    font size set by the operating system changes. Note that
	    this function doesn't affect widgets that have a style set
	    explicitly on them with <see cref="M:Gtk.Widget.SetStyle" />.
	  </para>
        </remarks>
        <since version="Gtk# 2.4" />
      </Docs>
    </Member>
    <Member MemberName="ThemeDir">
      <MemberSignature Language="C#" Value="public static string ThemeDir { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string ThemeDir" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the standard directory in which themes should be installed. (GTK+ does not actually use this directory itself.)</summary>
        <value>a <see cref="T:System.String" /></value>
        <remarks>Unlike the underlying GTK+ function, the return value of this method is a string, not a directory handle that must be freed later.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
