<Type Name="WidgetFlags" FullName="Gtk.WidgetFlags">
  <TypeSignature Language="C#" Value="public enum WidgetFlags" Maintainer="Hector Gomez M" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed WidgetFlags extends System.Enum" />
  <AssemblyInfo>
    <AssemblyName>gtk-sharp</AssemblyName>
    <AssemblyPublicKey>
    </AssemblyPublicKey>
    <AssemblyVersion>2.12.0.0</AssemblyVersion>
  </AssemblyInfo>
  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>GLib.GType(typeof(Gtk.WidgetFlagsGType))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Flags</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Tells about certain properties of the <paramref name="widget" />.</summary>
    <remarks />
  </Docs>
  <Members>
    <Member MemberName="AppPaintable">
      <MemberSignature Language="C#" Value="AppPaintable" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Gtk.WidgetFlags AppPaintable = int32(524288)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Gtk.WidgetFlags</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <summary>Set and unset by <see cref="P:Gtk.Widget.AppPaintable" />.</summary>
        <remarks>
          <para>
          Must be set on widgets whose window the application directly draws on, in order to keep GTK# from overwriting the drawn stuff.
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanDefault">
      <MemberSignature Language="C#" Value="CanDefault" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Gtk.WidgetFlags CanDefault = int32(8192)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Gtk.WidgetFlags</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <summary>The <paramref name="widget" /> is allowed to receive the default action via <see cref="M:Gtk.Widget.GrabDefault" />.</summary>
        <remarks>
          <para>
          The <paramref name="widget" /> is allowed to receive the default action via <see cref="M:Gtk.Widget.GrabDefault" />.
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanFocus">
      <MemberSignature Language="C#" Value="CanFocus" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Gtk.WidgetFlags CanFocus = int32(2048)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Gtk.WidgetFlags</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <summary>Determines whether a <paramref name="widget" /> is able to handle focus grabs.</summary>
        <remarks>
          <para>
          Determines whether a <paramref name="widget" /> is able to handle focus grabs.
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompositeChild">
      <MemberSignature Language="C#" Value="CompositeChild" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Gtk.WidgetFlags CompositeChild = int32(131072)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Gtk.WidgetFlags</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <summary>Indicates that the <paramref name="widget" /> is a composite child of its parent.</summary>
        <remarks>
          <para>
          See <see cref="M:Gtk.Widget.PushCompositeChild" />, <see cref="M:Gtk.Widget.PopCompositeChild" />.
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DoubleBuffered">
      <MemberSignature Language="C#" Value="DoubleBuffered" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Gtk.WidgetFlags DoubleBuffered = int32(2097152)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Gtk.WidgetFlags</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <summary>Set and unset by <see cref="P:Gtk.Widget.DoubleBuffered" />. Indicates that exposes done on the <paramref name="widget" /> should be double-buffered. </summary>
        <remarks>
          <para>
          Indicates that exposes done on the <paramref name="widget" /> should be double-buffered. 
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasDefault">
      <MemberSignature Language="C#" Value="HasDefault" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Gtk.WidgetFlags HasDefault = int32(16384)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Gtk.WidgetFlags</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <summary> The <paramref name="widget" /> currently is receiving the default action.</summary>
        <remarks>
          <para>
          The <paramref name="widget" /> currently is receiving the default action.
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasFocus">
      <MemberSignature Language="C#" Value="HasFocus" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Gtk.WidgetFlags HasFocus = int32(4096)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Gtk.WidgetFlags</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <summary> Set by <see cref="M:Gtk.Widget.GrabFocus" /> for widgets that also have <see cref="F:Gtk.WidgetFlags.CanFocus" /> set.</summary>
        <remarks>
          <para>
           The flag will be unset once another widget grabs the focus.
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasGrab">
      <MemberSignature Language="C#" Value="HasGrab" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Gtk.WidgetFlags HasGrab = int32(32768)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Gtk.WidgetFlags</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <summary> Set by <see cref="M:Gtk.Widget.GrabDefault" />gtk_grab_add(), unset by gtk_grab_remove().</summary>
        <remarks>
          <para>
          It means that the widget is in the grab_widgets stack, and will be the preferred one for receiving events other than ones of cosmetic value.
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mapped">
      <MemberSignature Language="C#" Value="Mapped" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Gtk.WidgetFlags Mapped = int32(128)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Gtk.WidgetFlags</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <summary>Set by <see cref="M:Gtk.Widget.Map" />, unset by <see cref="M:Gtk.Widget.Map" />.</summary>
        <remarks>
          <para>
          Only realized widgets can be mapped. It means that <see cref="M:Gdk.Window.Show" /> has been called on the widgets window(s).
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NoReparent">
      <MemberSignature Language="C#" Value="NoReparent" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Gtk.WidgetFlags NoReparent = int32(262144)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Gtk.WidgetFlags</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <summary>Unused since before GTK 1.2, will be removed in a future version.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="NoShowAll">
      <MemberSignature Language="C#" Value="NoShowAll" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Gtk.WidgetFlags NoShowAll = int32(4194304)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Gtk.WidgetFlags</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <summary>Whether calls to ShowAll and HideAll will effect the widget.</summary>
        <remarks>
        </remarks>
        <since version="Gtk# 2.4" />
      </Docs>
    </Member>
    <Member MemberName="NoWindow">
      <MemberSignature Language="C#" Value="NoWindow" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Gtk.WidgetFlags NoWindow = int32(32)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Gtk.WidgetFlags</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <summary>Indicative for a <paramref name="widget" /> that does not provide its own <see cref="T:Gdk.Window" />.</summary>
        <remarks>
          <para>
            Visible action (e.g. drawing) is performed on the parent's <see cref="T:Gdk.Window" />.
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ParentSensitive">
      <MemberSignature Language="C#" Value="ParentSensitive" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Gtk.WidgetFlags ParentSensitive = int32(1024)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Gtk.WidgetFlags</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <summary>Set and unset by <see cref="P:Gtk.Widget.Sensitive" /> operations on the parents of the <paramref name="widget" />.</summary>
        <remarks>
          <para>
           This is the second premise for the widgets sensitivity. Once it has <see cref="F:Gtk.WidgetFlags.Sensitive" /> and <see cref="F:Gtk.Widget.ParentSensitive" /> set, its state is effectively sensitive.
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RcStyle">
      <MemberSignature Language="C#" Value="RcStyle" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Gtk.WidgetFlags RcStyle = int32(65536)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Gtk.WidgetFlags</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <summary>Indicates that the widgets style has been looked up through the rc mechanism.</summary>
        <remarks>
          <para>
          It does not imply that the <paramref name="widget" /> actually had a style defined through the rc mechanism.
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Realized">
      <MemberSignature Language="C#" Value="Realized" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Gtk.WidgetFlags Realized = int32(64)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Gtk.WidgetFlags</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <summary> Set by <see cref="M:Gtk.Widget.Realize" />, unset by <see cref="M:Gtk.Widget.Unrealize" />.</summary>
        <remarks>
          <para>
            A realized <paramref name="widget" /> has an associated <see cref="T:Gdk.Window" />.
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReceivesDefault">
      <MemberSignature Language="C#" Value="ReceivesDefault" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Gtk.WidgetFlags ReceivesDefault = int32(1048576)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Gtk.WidgetFlags</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <summary>The <paramref name="widget" /> when focused will receive the default action and have <see cref="F:Gtk.WidgetFlags.HasDefault" /> set even if there is a different widget set as default.</summary>
        <remarks>
          <para>
          The <paramref name="widget" /> when focused will receive the default action and have <see cref="F:Gtk.WidgetFlags.HasDefault" /> set even if there is a different widget set as default.
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sensitive">
      <MemberSignature Language="C#" Value="Sensitive" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Gtk.WidgetFlags Sensitive = int32(512)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Gtk.WidgetFlags</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <summary>Set and unset by <see cref="P:Gtk.Widget.Sensitive" />. The sensitivity of a <paramref name="widget" /> determines whether it will receive certain events (e.g. button or key presses).</summary>
        <remarks>
          <para>
          One premise for the widgets sensitivity is to have this flag set.
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Toplevel">
      <MemberSignature Language="C#" Value="Toplevel" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Gtk.WidgetFlags Toplevel = int32(16)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Gtk.WidgetFlags</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <summary>Widgets without a real parent, as there are <see cref="T:Gtk.Window" />s and <see cref="T:Gtk.Menu" />s have this flag set throughout their lifetime.</summary>
        <remarks>
          <para>
          Toplevel widgets always contain their own <see cref="T:Gdk.Window" />.
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Visible">
      <MemberSignature Language="C#" Value="Visible" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Gtk.WidgetFlags Visible = int32(256)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Gtk.WidgetFlags</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <summary> Set by <see cref="M:Gtk.Widget.Show" />, unset by <see cref="M:Gtk.Widget.Hide" />. Implies that a <paramref name="widget" /> will be mapped as soon as its parent is mapped.</summary>
        <remarks>
          <para>
           Implies that a <paramref name="widget" /> will be mapped as soon as its parent is mapped.
         </para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
