<Type Name="Init" FullName="Gtk.Init">
  <TypeSignature Language="C#" Value="public class Init" Maintainer="auto" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Init extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>gtk-sharp</AssemblyName>
    <AssemblyPublicKey>
    </AssemblyPublicKey>
    <AssemblyVersion>2.12.0.0</AssemblyVersion>
  </AssemblyInfo>
  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>An object that gets invoked at the beginning of an application but before the application main loop starts. It's used largely for application setup--- for example, reading RC files.</summary>
    <remarks />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Init ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue />
      <Parameters />
      <Docs>
        <summary>Default constructor</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static void Add (Gtk.Function function);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Add(class Gtk.Function function) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="function" Type="Gtk.Function" />
      </Parameters>
      <Docs>
        <param name="function">a <see cref="T:Gtk.Function" /></param>
        <summary>Registers a function to be called when the mainloop is started. </summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Check">
      <MemberSignature Language="C#" Value="public static bool Check (ref string[] argv);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Check(string[] argv) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="argv" Type="System.String[]&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="argv">The command line arguments passed in. Changed if any arguments were handled.</param>
        <summary>Initializes Gtk# for operation, probes window system.</summary>
        <returns>True if the toolkit initialized correctly, false otherwise. </returns>
        <remarks>Aside from the arguments, this function behaves in the same way as <see cref="T:Gtk.Application.InitCheck" />. By returning whether or not the toolkit initialized correctly, it allows the application to fall back to a non-GUI interface, should the developer be so inclined to write one.
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
