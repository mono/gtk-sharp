<Type Name="Widget" FullName="Gtk.Widget">
  <TypeSignature Language="C#" Maintainer="Hector Gomez M" Value="public class Widget : Gtk.Object, Atk.Implementor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Widget extends Gtk.Object implements class Atk.Implementor, class GLib.IWrapper" />
  <AssemblyInfo>
    <AssemblyName>gtk-sharp</AssemblyName>
    <AssemblyPublicKey>
    </AssemblyPublicKey>
    <AssemblyVersion>2.12.0.0</AssemblyVersion>
  </AssemblyInfo>
  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
  <Base>
    <BaseTypeName>Gtk.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Atk.Implementor</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>GLib.TypeInitializer(typeof(Gtk.Widget), "ClassInit")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>GtkWidget introduces style properties - these are basically object properties that are stored in the style object associated to the <paramref name="widget" />.</summary>
    <remarks>
      <para>
      Style properties are set in resource files. This mechanism is used for configuring such things as the location of the scrollbar arrows through the theme, giving theme authors more control over the look of applications without the need to write a theme engine in C.
     </para>
      <para>
      Use <see cref="M:Gtk.Widget.StyleGetProperty" /> to obtain the value of a style property.
     </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Widget ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue />
      <Parameters />
      <Docs>
        <summary>Protected constructor.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Widget (GLib.GType gtype);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(valuetype GLib.GType gtype) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue />
      <Parameters>
        <Parameter Name="gtype" Type="GLib.GType" />
      </Parameters>
      <Docs>
        <param name="gtype">a <see cref="T:GLib.GType" /></param>
        <summary>Protected Constructor.</summary>
        <remarks>Chain to this constructor if you have manually registered a native <see cref="T:GLib.GType" /> value for your subclass.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Widget (IntPtr raw);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int raw) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue />
      <Parameters>
        <Parameter Name="raw" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="raw">Pointer to the C object.</param>
        <summary>Internal constructor</summary>
        <remarks>
          <para>This is an internal constructor, and should not be used by user code.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AccelCanActivate">
      <MemberSignature Language="C#" Value="public event Gtk.AccelCanActivateHandler AccelCanActivate;" />
      <MemberSignature Language="ILAsm" Value=".event class Gtk.AccelCanActivateHandler AccelCanActivate" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Signal("can_activate_accel")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Gtk.AccelCanActivateHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
	  This signal is present to allow applications and derived
	  widgets to override the default Gtk.Widget handling
	  for determining whether an accelerator can be activated.
	</summary>
        <remarks>See <see cref="M:Gtk.Widget.OnAccelCanActivate" /> for more details.</remarks>
        <since version="Gtk# 2.4" />
      </Docs>
    </Member>
    <Member MemberName="AccelClosuresChanged">
      <MemberSignature Language="C#" Value="public event EventHandler AccelClosuresChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler AccelClosuresChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Signal("accel_closures_changed")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Raised when the closures for this widget's accelerator change.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Accessible">
      <MemberSignature Language="C#" Value="public Atk.Object Accessible { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Atk.Object Accessible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Atk.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtains the default reading direction for <paramref name="widgets" />.</summary>
        <value>A <see cref="T:Atk.Object" />.</value>
        <remarks>Obtains the default reading direction for <paramref name="widgets" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Action">
      <MemberSignature Language="C#" Value="public Gtk.Action Action { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Gtk.Action Action" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Gtk.Action</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The action the widget proxies.</summary>
        <value>a <see cref="T:Gtk.Widget" />, or <see langword="null" /> if no proxy relationship exists.</value>
        <remarks>See <see cref="M:Gtk.Action.Proxies" /> for more details.</remarks>
        <since version="Gtk# 2.10" />
      </Docs>
    </Member>
    <Member MemberName="Activate">
      <MemberSignature Language="C#" Value="public bool Activate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Activate() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>For <paramref name="widgets" /> that can be "activated" (buttons, menu items, etc.) this method activates them.</summary>
        <returns>Returns <see langword="true" /> if the <paramref name="widget" /> was activatable.</returns>
        <remarks>
          <para>
          Activation is what happens when you press Enter on a widget during key navigation; clicking a button, selecting a menu item, etc. If the <paramref name="widget" /> isn't activatable, the method returns <see langword="false" />.
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAccelerator">
      <MemberSignature Language="C#" Value="public void AddAccelerator (string accel_signal, Gtk.AccelGroup accel_group, Gtk.AccelKey accel_key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddAccelerator(string accel_signal, class Gtk.AccelGroup accel_group, valuetype Gtk.AccelKey accel_key) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="accel_signal" Type="System.String" />
        <Parameter Name="accel_group" Type="Gtk.AccelGroup" />
        <Parameter Name="accel_key" Type="Gtk.AccelKey" />
      </Parameters>
      <Docs>
        <param name="accel_signal">Widget signal to emit on accelerator activation.</param>
        <param name="accel_group">Accel group for this <paramref name="widget" />, added to its toplevel.</param>
        <param name="accel_key">GDK keyval of the accelerator.</param>
        <summary>Installs an accelerator for this <paramref name="widget" /> in <paramref name="accel-group" /> that causes <paramref name="accel_signal" /> to be emitted if the accelerator is activated.</summary>
        <remarks>
          <para>
          The <paramref name="accel-group" /> needs to be added to the widget's toplevel via <see cref="M:Gtk.Window.AddAccelGroup" />, and the signal must be of type G_RUN_ACTION. Accelerators added through this method are not user changeable during runtime.
         </para>
          <para>
          Accelerators added through this method are not user changeable during runtime. If you want to support accelerators that can be changed by the user, use <see cref="M:Gtk.Window.SetAccelPath" /> instead.
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAccelerator">
      <MemberSignature Language="C#" Value="public void AddAccelerator (string accel_signal, Gtk.AccelGroup accel_group, uint accel_key, Gdk.ModifierType accel_mods, Gtk.AccelFlags accel_flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddAccelerator(string accel_signal, class Gtk.AccelGroup accel_group, unsigned int32 accel_key, valuetype Gdk.ModifierType accel_mods, valuetype Gtk.AccelFlags accel_flags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="accel_signal" Type="System.String" />
        <Parameter Name="accel_group" Type="Gtk.AccelGroup" />
        <Parameter Name="accel_key" Type="System.UInt32" />
        <Parameter Name="accel_mods" Type="Gdk.ModifierType" />
        <Parameter Name="accel_flags" Type="Gtk.AccelFlags" />
      </Parameters>
      <Docs>
        <param name="accel_signal">Widget signal to emit on accelerator activation.</param>
        <param name="accel_group">Accel group for this <paramref name="widget" />, added to its toplevel.</param>
        <param name="accel_key">GDK keyval of the accelerator.</param>
        <param name="accel_mods">Modifier key combination of the accelerator.</param>
        <param name="accel_flags">Flag accelerators.</param>
        <summary>Installs an accelerator for this <paramref name="widget" /> in <paramref name="accel-group" /> that causes <paramref name="accel_signal" /> to be emitted if the accelerator is activated.</summary>
        <remarks>
          <para>
          The <paramref name="accel-group" /> needs to be added to the widget's toplevel via <see cref="M:Gtk.Window.AddAccelGroup" />, and the signal must be of type G_RUN_ACTION. Accelerators added through this method are not user changeable during runtime.
         </para>
          <para>
          Accelerators added through this method are not user changeable during runtime. If you want to support accelerators that can be changed by the user, use <see cref="M:Gtk.Window.SetAccelPath" /> instead.
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddEvents">
      <MemberSignature Language="C#" Value="public void AddEvents (int events);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddEvents(int32 events) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="events" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="events" />
        <summary>Adds the events in the bitfield <paramref name="events" /> to the event mask for <paramref name="widget" />.</summary>
        <remarks>
          <para>
	  See <see cref="M:Gtk.Widget.Events" /> for details.
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddMnemonicLabel">
      <MemberSignature Language="C#" Value="public void AddMnemonicLabel (Gtk.Widget label);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddMnemonicLabel(class Gtk.Widget label) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="label" Type="Gtk.Widget" />
      </Parameters>
      <Docs>
        <param name="label">a <see cref="T:Gtk.Widget" /></param>
        <summary>Adds a widget to the list of mnemonic labels for this widget.</summary>
        <remarks>(See <see cref="M:Gtk.Widget.ListMnemonicLabels()" />). Note the list of mnemonic labels for the widget is cleared when the widget is destroyed, so the caller must make sure to update its internal state at this point as well, by using a connection to the Destroy signal or a weak notifier.</remarks>
        <since version="Gtk# 2.4" />
      </Docs>
    </Member>
    <Member MemberName="Allocation">
      <MemberSignature Language="C#" Value="public Gdk.Rectangle Allocation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Gdk.Rectangle Allocation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Gdk.Rectangle</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets or Sets the widget's allocation.</summary>
        <value>a <see cref="T:Gdk.Rectangle" /> representing the size of the widget's allocation.
<para>
When the top-level widget has determined how much space its child would like to have, the second phase of the size negotiation, size allocation, begins. Depending on its configuration (see <see cref="P:Gtk.Window.Resizable" />), the top-level widget may be able to expand in order to satisfy the size request or it may have to ignore the size request and keep its fixed size. It then tells its child widget how much space it gets by calling <see cref="M:Gtk.Widget.SizeAllocate(Gdk.Rectangle)" />. The child widget divides the space among its children and tells each child how much space it got, and so on. Under normal circumstances, a <see cref="T:Gtk.Window" /> will always give its child the amount of space the child requested.
</para><para>
A child's size allocation is represented by a <see cref="T:Gtk.Allocation" />. This struct contains not only a width and height, but also a position (i.e. X and Y coordinates), so that containers can tell their children not only how much space they have gotten, but also where they are positioned inside the space available to the container.
</para><para>
Widgets are required to honor the size allocation they receive; a size request is only a request, and widgets must be able to cope with any size. 
</para></value>
        <remarks>None.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AppPaintable">
      <MemberSignature Language="C#" Value="public bool AppPaintable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AppPaintable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Property("app-paintable")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <summary>Whether the application will paint directly on the <paramref name="widget" />.</summary>
        <value>
          <see langword="true" /> if the application will paint directly on the <paramref name="widget" />.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ButtonPressEvent">
      <MemberSignature Language="C#" Value="public event Gtk.ButtonPressEventHandler ButtonPressEvent;" />
      <MemberSignature Language="ILAsm" Value=".event class Gtk.ButtonPressEventHandler ButtonPressEvent" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Signal("button_press_event")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Gtk.ButtonPressEventHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Raised when a button is pressed.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ButtonReleaseEvent">
      <MemberSignature Language="C#" Value="public event Gtk.ButtonReleaseEventHandler ButtonReleaseEvent;" />
      <MemberSignature Language="ILAsm" Value=".event class Gtk.ButtonReleaseEventHandler ButtonReleaseEvent" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Signal("button_release_event")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Gtk.ButtonReleaseEventHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Raised when a (mouse) button is released on this widget.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="CanActivateAccel">
      <MemberSignature Language="C#" Value="public bool CanActivateAccel (uint signal_id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CanActivateAccel(unsigned int32 signal_id) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="signal_id" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="signal_id">a <see cref="T:System.UInt32" />, a signal ID (XXX: API: should this really work this way?)</param>
        <summary>
	  Determines whether an accelerator that activates the signal
	  identified by <paramref name="signal_id" /> can currently be activated.
	</summary>
        <returns>a <see cref="T:System.Boolean" />, true if the accelerator can be activated.</returns>
        <remarks>
	  This is done by emitting the <see cref="E:Gtk.Widget.CanActivateAccel" />
	  signal on the widget; if the signal isn't overridden by a
	  handler or in a derived widget, then the default check is
	  that the widget must be sensitive, and the widget and all
	  its ancestors mapped.
	</remarks>
        <since version="Gtk# 2.4" />
      </Docs>
    </Member>
    <Member MemberName="CanDefault">
      <MemberSignature Language="C#" Value="public bool CanDefault { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanDefault" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Property("can-default")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <summary>Evaluates to <see langword="true" /> if the <paramref name="widget" /> is allowed to receive the default focus.</summary>
        <value>
          <see cref="System.Boolean" /> that indicates if the widget can grab the default focus, using <see cref="M:Gtk.Widget.GrabDefault()" />.</value>
        <remarks>
          <para>
When this property is set to true, the widget itself will reserve space to
draw the default if possible.
</para>
          <para>
If either the widget's <see cref="P:Gtk.Widget.Sensitive" /> property or
the <see cref="P:Gtk.Widget.Parent" />'s <see cref="P:Gtk.Widget.Sensitive" /> property evaluates
to false, the <see cref="P:Gtk.Widget.CanDefault" /> property will return false. Otherwise, the
<see cref="P:Gtk.Widget.CanDefault" /> property will return its own value.
</para>
          <para>Typically, you'd like to set the default widget using
		    <see cref="M:Gtk.Widget.GrabDefault()" />, but you must set the <see cref="P:Gtk.Widget.CanDefault" />
			property to true before you call it, in order to force the focus to be grabbed
			into the widget.
		  </para>
          <para>
		    When certain conditions are met and the user press Enter, the default
			widget will be focused. Conditions: the <see cref="P:Gtk.Widget.CanDefault" /> property is set
			to true, the <see cref="M:Gtk.Widget.GrabDefault()" /> has been called and
			the <see cref="T:Gtk.Window" /> containing the widget have the focus.
			This state is common when your window is shown for the first time, and no
			<see cref="M:Gtk.Widget.GrabFocus()" /> call has been made (or when by no
			other means, the focus has been set to any particular widget).
		  </para>
          <para>
            <see cref="M:Gtk.Widget.GrabDefault()" /> [FIXME] This is a seealso instead see</para>
          <para>
            <see cref="P:Gtk.Widget.HasDefault" /> [FIXME] This is a seealso instead see</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanFocus">
      <MemberSignature Language="C#" Value="public bool CanFocus { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanFocus" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Property("can-focus")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <summary>Determines whether the <paramref name="widget" /> is able to receive the focus.</summary>
        <value>Evaluates to <see langword="true" /> if the <paramref name="widget" /> is able to
handle focus grabs.</value>
        <remarks>
          <para>
		    If the widget property <see cref="P:Gtk.Widget.Sensitive" /> evaluates
		    to <see langword="false" />, the <see cref="P:Gtk.Widget.CanFocus" /> property will also return
			<see langword="false" />. widget
		    must be a focusable widget, such as an <see cref="T:Gtk.Entry" />; something
		    like <see cref="T:Gtk.Frame" /> won't work. More precisely, it must have the
		    property <see cref="P:Gtk.Widget.CanFocus" /> set.
		  </para>
          <para>
		    The <see cref="P:Gtk.Widget.CanFocus" /> property is just the helper that will tell you whether
			the widget is focusable.
		  </para>
          <para>
		    Evaluate it before you make a call to <see cref="M:Gtk.Widget.GrabFocus()" />,
			if you are unsure about the "focusability" of the widget.
		  </para>[FIXME] This two links are seealso instead see: <see cref="P:Gtk.Widget.HasFocus" /> and
		  <see cref="M:Gtk.Widget.GrabFocus()" /></remarks>
      </Docs>
    </Member>
    <Member MemberName="ChildFocus">
      <MemberSignature Language="C#" Value="public bool ChildFocus (Gtk.DirectionType direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ChildFocus(valuetype Gtk.DirectionType direction) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="Gtk.DirectionType" />
      </Parameters>
      <Docs>
        <param name="direction">Direction of focus movement.</param>
        <summary>Move focus to particular <paramref name="widget" />.</summary>
        <returns>
          <see langword="true" /> if focus ended up inside <paramref name="widget" />.</returns>
        <remarks>
          <para>
          This method is used by custom <paramref name="widget" /> implementations; if you're writing an app, you'd use <see cref="M:Gtk.Widget.GrabFocus" /> to move the focus to a particular <paramref name="widget" />, and <see cref="M:Gtk.Container.FocusChain" /> to change the focus tab order. So you may want to investigate those methods instead.
         </para>
          <para>
            <see cref="M:Gtk.Widget.ChildFocus" /> is called by containers as the user moves around the window using keyboard shortcuts. <paramref name="direction" /> indicates what kind of motion is taking place (up, down, left, right, tab forward, tab backward). <see cref="M:Gtk.Widget.ChildFocus" /> invokes the <see cref="F:Gtk.Window.FocusActivated" /> event on <see cref="T:Gtk.Widget" />; <paramref name="widgets" /> override the default handler for this event in order to implement appropriate focus behavior.
         </para>
          <para>
          The "focus" default handler for a <paramref name="widget" /> should return <see langword="true" /> if moving in direction left the focus on a focusable location inside that <paramref name="widget" />, and <see langword="false" /> if moving in direction moved the focus outside the <paramref name="widget" />. If returning <see langword="true" />, <paramref name="widgets" /> normally call <see cref="M:Gtk.Widget.GrabFocus" /> to place the focus accordingly; if returning <see langword="false" />, they don't modify the current focus location.
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChildNotified">
      <MemberSignature Language="C#" Value="public event Gtk.ChildNotifiedHandler ChildNotified;" />
      <MemberSignature Language="ILAsm" Value=".event class Gtk.ChildNotifiedHandler ChildNotified" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Signal("child_notify")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Gtk.ChildNotifiedHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Emitted when a child has been notified.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ChildNotify">
      <MemberSignature Language="C#" Value="public void ChildNotify (string child_property);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ChildNotify(string child_property) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child_property" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="child_property">The name of a child property installed on the class of widget's parent.</param>
        <summary>Emits a <see cref="F:Gtk.Widget.ChildNotified" /> event for the child property on <paramref name="widget" />.</summary>
        <remarks>
          <para>
         Emits a <see cref="F:Gtk.Widget.ChildNotified" /> event for the child property on <paramref name="widget" />.
        </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChildRequisition">
      <MemberSignature Language="C#" Value="public Gtk.Requisition ChildRequisition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Gtk.Requisition ChildRequisition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Gtk.Requisition</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Obtains the widget's requisition.</summary>
        <value>a <see cref="T:Gtk.Requisition" /></value>
        <remarks>
          <para>
          Obtains requisition, unless someone has forced a particular geometry, in which case it returns that geometry instead of the widget's requisition. This method differs from <see cref="M:Gtk.Widget.SizeRequest" /> in that it retrieves the last size request value, while the <see cref="M:Gtk.Widget.SizeRequest" /> method recomputes the size request and fills in the requisition, and then returns the recomputed value.
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChildVisible">
      <MemberSignature Language="C#" Value="public bool ChildVisible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ChildVisible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <summary>Sets or obtains whether <paramref name="widget" /> should be mapped along with its when its parent is mapped and <paramref name="widget" /> has been shown with <see cref="M:Gtk.Widget.Show" />.</summary>
        <value>Returns <see langword="true" /> if the <paramref name="widget" /> is mapped with the parent.</value>
        <remarks>
          <para>
          The child visibility can be set for <paramref name="widget" /> before it is added to a container with <see cref="P:Gtk.Widget.Parent" />, to avoid mapping children unnecessary before immediately unmapping them. However it will be reset to its default state of <see langword="true" /> when the <paramref name="widget" /> is removed from a container. 
         </para>
          <para>
          Note that changing the child visibility of a <paramref name="widget" /> does not queue a resize on the <paramref name="widget" />. Most of the time, the size of a <paramref name="widget" /> is computed from all visible children, whether or not they are mapped. If this is not the case, the container can queue a resize itself. This property is only useful for container implementations and never should be called by an application.
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassPath">
      <MemberSignature Language="C#" Value="public void ClassPath (out uint path_length, out string path, out string path_reversed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClassPath(unsigned int32 path_length, string path, string path_reversed) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path_length" Type="System.UInt32&amp;" RefType="out" />
        <Parameter Name="path" Type="System.String&amp;" RefType="out" />
        <Parameter Name="path_reversed" Type="System.String&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="path_length">Location to store the length of the class path. or <see langword="null" />.</param>
        <param name="path">Location to store the class path as an allocated string, or <see langword="null" />.</param>
        <param name="path_reversed">Location to store the reverse class path as an allocated string, or <see langword="null" />.</param>
        <summary>Same as <see cref="M:Gtk.Widget.Path" />, but always uses the name of a <paramref name="widget" />'s type, never uses a custom name set with <see cref="P:Gtk.Widget.Name" />.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ClearFlag">
      <MemberSignature Language="C#" Value="public void ClearFlag (Gtk.WidgetFlags flag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearFlag(valuetype Gtk.WidgetFlags flag) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="flag" Type="Gtk.WidgetFlags" />
      </Parameters>
      <Docs>
        <param name="flag">a <see cref="T:Gtk.WidgetFlags" /> to set</param>
        <summary>Convenince method to clear a flag</summary>
        <remarks>None</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClientEvent">
      <MemberSignature Language="C#" Value="public event Gtk.ClientEventHandler ClientEvent;" />
      <MemberSignature Language="ILAsm" Value=".event class Gtk.ClientEventHandler ClientEvent" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Signal("client_event")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Gtk.ClientEventHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Raised when a message is received from another application.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Colormap">
      <MemberSignature Language="C#" Value="public Gdk.Colormap Colormap { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Gdk.Colormap Colormap" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Gdk.Colormap</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <summary>Sets or obtains the colormap that will be used to render <paramref name="widget" />.</summary>
        <value>A <see cref="T:Gdk.Colormap" />.</value>
        <remarks>
          <para>
          Widget must not have been previously realized.
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompositeChild">
      <MemberSignature Language="C#" Value="public bool CompositeChild { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CompositeChild" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Property("composite-child")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether the <paramref name="widget" /> is part of a composite widget.</summary>
        <value>
          <see langword="true" /> if the <paramref name="widget" /> is part of a composite widget.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="CompositedChanged">
      <MemberSignature Language="C#" Value="public event EventHandler CompositedChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler CompositedChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Signal("composited_changed")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Raised with the composited status changes.</summary>
        <remarks />
        <since version="Gtk# 2.10" />
      </Docs>
    </Member>
    <Member MemberName="CompositeName">
      <MemberSignature Language="C#" Value="public string CompositeName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CompositeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <summary>Sets or obtains a <paramref name="widget" /> composite name.</summary>
        <value>The composite name of <paramref name="widget" />, or <see langword="null" /> if <paramref name="widget" /> is not a composite child. The string should not be freed when it is no longer needed.</value>
        <remarks>
          <para>
          The <paramref name="widget" /> must be a composite child of its parent; see <see cref="M:Gtk.Widget.PushCompositeChild" />.
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConfigureEvent">
      <MemberSignature Language="C#" Value="public event Gtk.ConfigureEventHandler ConfigureEvent;" />
      <MemberSignature Language="ILAsm" Value=".event class Gtk.ConfigureEventHandler ConfigureEvent" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Signal("configure_event")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Gtk.ConfigureEventHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Raised when the configuration of the window has changed (it has been moved or resized).</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="CreateNativeObject">
      <MemberSignature Language="C#" Value="protected override void CreateNativeObject (string[] names, GLib.Value[] vals);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void CreateNativeObject(string[] names, valuetype GLib.Value[] vals) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="names" Type="System.String[]" />
        <Parameter Name="vals" Type="GLib.Value[]" />
      </Parameters>
      <Docs>
        <param name="names">To be added.</param>
        <param name="vals">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePangoContext">
      <MemberSignature Language="C#" Value="public Pango.Context CreatePangoContext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Pango.Context CreatePangoContext() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Pango.Context</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a new <see cref="P:Gtk.Widget.PangoContext" /> with the appropriate colormap, font description, and base direction for drawing text for <paramref name="widget" />.</summary>
        <returns>The new <see cref="P:Gtk.Widget.PangoContext" />.</returns>
        <remarks>
          <para>
          See also <see cref="P:Gtk.Widget.PangoContext" />.
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePangoLayout">
      <MemberSignature Language="C#" Value="public Pango.Layout CreatePangoLayout (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Pango.Layout CreatePangoLayout(string text) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Pango.Layout</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text"> text to set on the layout (can be <see langword="null" />).</param>
        <summary>Creates a new <see cref="T:Pango.Layout" /> with the appropriate colormap, font description, and base direction for drawing text for <paramref name="widget" />.</summary>
        <returns>The new <see cref="T:Pango.Layout" />.</returns>
        <remarks>
          <para>
          If you keep a <see cref="T:Pango.Layout" /> created in this way around, in order notify the layout of changes to the base direction or font of this <paramref name="widget" />, you must call <see cref="M:Pango.Layout.ContextChanged" /> in response to the <see cref="F:Gtk.Widget.StyleSet" /> and <see cref="F:Gtk.Widget.DirectionChanged" /> events for the <paramref name="widget" />.
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultColormap">
      <MemberSignature Language="C#" Value="public static Gdk.Colormap DefaultColormap { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class Gdk.Colormap DefaultColormap" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Gdk.Colormap</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <summary>Sets or obtains the default colormap to use when creating <paramref name="widgets" />.</summary>
        <value>A <see cref="T:Gdk.Colormap" />.</value>
        <remarks>
          <para>
            <see cref="M:Gtk.Widget.PushColormap" /> is a better method to use if you only want to affect a few widgets, rather than all widgets.
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultDirection">
      <MemberSignature Language="C#" Value="public static Gtk.TextDirection DefaultDirection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype Gtk.TextDirection DefaultDirection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Gtk.TextDirection</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <summary>Sets or obtains the default reading direction for <paramref name="widgets" />.</summary>
        <value>A <see cref="P:Gtk.Widget.TextDirection" />.</value>
        <remarks>
          <para>
          Where the direction has not been explicitly set by <see cref="P:Gtk.Widget.Direction" />.
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultStyle">
      <MemberSignature Language="C#" Value="public static Gtk.Style DefaultStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Gtk.Style DefaultStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Gtk.Style</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtains the default style used by all <paramref name="widgets" /> initially.</summary>
        <value>Returns the default style. This <see cref="T:Gtk.Style" /> object is owned by GTK+ and should not be modified or freed.</value>
        <remarks>
          <para>
          Returns the default style used by all <paramref name="widgets" /> initially.
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultVisual">
      <MemberSignature Language="C#" Value="public static Gdk.Visual DefaultVisual { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Gdk.Visual DefaultVisual" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Gdk.Visual</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtains the visual of the default colormap.</summary>
        <value>Returns a visual of the default colormap.</value>
        <remarks>
          <para>
          Not really useful; used to be useful before <see cref="M:Gdk.Colormap.GetVisual" /> existed.
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteEvent">
      <MemberSignature Language="C#" Value="public event Gtk.DeleteEventHandler DeleteEvent;" />
      <MemberSignature Language="ILAsm" Value=".event class Gtk.DeleteEventHandler DeleteEvent" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Signal("delete_event")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Gtk.DeleteEventHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Raised when the user has clicked on the "close" button in the window's frame (the button that is automatically set by the window manager).</summary>
        <remarks>If the handler returns False, the widget will be destroyed (and the window closed), but if the handler returns True, nothing will be done. This is a good way to prevent the user from closing your application's window if there should be some cleanups first (like saving the document).


<example><code lang="C#">
using System;
using Gtk;

class TestClose
{
	public static void Main ()
	{
		// Init Gtk#
		Application.Init ();
		
		// Create window
		Window win = new Window ("Test Close");
		win.SetDefaultSize (300, 300);
		
		// Add button
		Button button = new Button ("Close Now");
		button.Clicked += delegate { Application.Quit (); };
		win.Add (button);
		
		// Delete event
		win.DeleteEvent += delegate (object o, DeleteEventArgs e)
		{
			// Cancel closing then the "Close"
			// button of the window is pressed
			e.RetVal = true;
		};
		
		// Show window and run
		win.ShowAll ();
		Application.Run ();
	}
}
  </code></example></remarks>
      </Docs>
    </Member>
    <Member MemberName="Destroy">
      <MemberSignature Language="C#" Value="public override void Destroy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Destroy() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DestroyEvent">
      <MemberSignature Language="C#" Value="public event Gtk.DestroyEventHandler DestroyEvent;" />
      <MemberSignature Language="ILAsm" Value=".event class Gtk.DestroyEventHandler DestroyEvent" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Signal("destroy_event")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Gtk.DestroyEventHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Raised when this widget is destroyed.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Direction">
      <MemberSignature Language="C#" Value="public Gtk.TextDirection Direction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Gtk.TextDirection Direction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Gtk.TextDirection</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <summary>Sets or obtains the reading direction on a particular <paramref name="widget" />.</summary>
        <value>The reading direction for the <paramref name="widget" />.</value>
        <remarks>
          <para>
          This direction controls the primary direction for <paramref name="widgets" /> containing text, and also the direction in which the children of a container are packed. The ability to set the direction is present in order so that correct localization into languages with right-to-left reading directions can be done. Generally, applications will let the default reading direction present, except for containers where the containers are arranged in an order that is explicitely visual rather than logical (such as buttons for text justification). If the direction is set none, then the value set by <see cref="P:Gtk.Widget.DefaultDirection" /> will be used.
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DirectionChanged">
      <MemberSignature Language="C#" Value="public event Gtk.DirectionChangedHandler DirectionChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class Gtk.DirectionChangedHandler DirectionChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Signal("direction_changed")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Gtk.DirectionChangedHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Raised when the text direction for this widget is changed.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Display">
      <MemberSignature Language="C#" Value="public Gdk.Display Display { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Gdk.Display Display" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Gdk.Display</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtains the <see cref="T:Gdk.Display" /> for the toplevel window associated with this <paramref name="widget" />.</summary>
        <value>The <see cref="T:Gdk.Display" /> for the toplevel for this <paramref name="widget" />.</value>
        <remarks>
          <para>
	  This method can only be called after the <paramref name="widget" /> has been added to a widget hierarchy with a <see cref="T:Gtk.Window" /> at the top.
	 </para>
          <para>
	  In general, you should only create display specific resources when a <paramref name="widget" /> has been realized, and you should free those resources when the <paramref name="widget" /> is unrealized. 
	 </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DoubleBuffered">
      <MemberSignature Language="C#" Value="public bool DoubleBuffered { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DoubleBuffered" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <summary>Use this property to turn off the double buffering.</summary>
        <value>Returns <see langword="true" /> because double buffering is on by Default, but returns <see langword="false" /> if you turn it off.</value>
        <remarks>
          <para>
           Widgets are double buffered by default, you can use this property to turn off the buffering. "Double buffered" simply means that <see cref="M:Gdk.Window.BeginPaintRegion" /> and <see cref="M:Gdk.Window.EndPaint" /> are called automatically around <see cref="F:Gtk.Widget.ExposeEvent" /> events sent to the <paramref name="widget" />. <see cref="M:Gdk.Window.BeginPaint" /> diverts all drawing to a <paramref name="widget" />'s window to an offscreen buffer, and <see cref="M:Gdk.Window.EndPaint" /> draws the buffer to the screen. The result is that users see the window update in one smooth step, and don't see individual graphics primitives being rendered. 
         </para>
          <para>
           In very simple terms, double buffered <paramref name="widgets" /> don't flicker, so you would only use this property to turn off double buffering if you had special needs and really knew what you were doing.
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DragBegin">
      <MemberSignature Language="C#" Value="public event Gtk.DragBeginHandler DragBegin;" />
      <MemberSignature Language="ILAsm" Value=".event class Gtk.DragBeginHandler DragBegin" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Signal("drag_begin")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Gtk.DragBeginHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Raised on a source widget when the user begins a drag.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DragDataDelete">
      <MemberSignature Language="C#" Value="public event Gtk.DragDataDeleteHandler DragDataDelete;" />
      <MemberSignature Language="ILAsm" Value=".event class Gtk.DragDataDeleteHandler DragDataDelete" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Signal("drag_data_delete")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Gtk.DragDataDeleteHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Raised on a source widget when dragged data is deleted.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="DragDataGet">
      <MemberSignature Language="C#" Value="public event Gtk.DragDataGetHandler DragDataGet;" />
      <MemberSignature Language="ILAsm" Value=".event class Gtk.DragDataGetHandler DragDataGet" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Signal("drag_data_get")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Gtk.DragDataGetHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Raised when the drag-and-drop process gets data from a source widget.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="DragDataReceived">
      <MemberSignature Language="C#" Value="public event Gtk.DragDataReceivedHandler DragDataReceived;" />
      <MemberSignature Language="ILAsm" Value=".event class Gtk.DragDataReceivedHandler DragDataReceived" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Signal("drag_data_received")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Gtk.DragDataReceivedHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Raised on a destination widget when it receives dragged data.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="DragDrop">
      <MemberSignature Language="C#" Value="public event Gtk.DragDropHandler DragDrop;" />
      <MemberSignature Language="ILAsm" Value=".event class Gtk.DragDropHandler DragDrop" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Signal("drag_drop")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Gtk.DragDropHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Raised on a source widget when dragged data is dropped.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="DragEnd">
      <MemberSignature Language="C#" Value="public event Gtk.DragEndHandler DragEnd;" />
      <MemberSignature Language="ILAsm" Value=".event class Gtk.DragEndHandler DragEnd" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Signal("drag_end")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Gtk.DragEndHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Raised on a source widget when a drag operation is completed.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="DragFailed">
      <MemberSignature Language="C#" Value="public event Gtk.DragFailedHandler DragFailed;" />
      <MemberSignature Language="ILAsm" Value=".event class Gtk.DragFailedHandler DragFailed" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Signal("drag_failed")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Gtk.DragFailedHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
        <since version="Gtk# 2.12" />
      </Docs>
    </Member>
    <Member MemberName="DragLeave">
      <MemberSignature Language="C#" Value="public event Gtk.DragLeaveHandler DragLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class Gtk.DragLeaveHandler DragLeave" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Signal("drag_leave")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Gtk.DragLeaveHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Raised when a drag action leaves this widget.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="DragMotion">
      <MemberSignature Language="C#" Value="public event Gtk.DragMotionHandler DragMotion;" />
      <MemberSignature Language="ILAsm" Value=".event class Gtk.DragMotionHandler DragMotion" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Signal("drag_motion")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Gtk.DragMotionHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Raised on a source widget when the user is moving a dragged selection.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Draw">
      <MemberSignature Language="C#" Value="public void Draw (Gdk.Rectangle area);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Draw(valuetype Gdk.Rectangle area) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="area" Type="Gdk.Rectangle" />
      </Parameters>
      <Docs>
        <param name="area">a <see cref="T:Gdk.Rectangle" /></param>
        <summary>Deprecated.</summary>
        <remarks>
	  In GTK+ 1.2, this function would immediately render the
	  region <paramref name="area" /> of a widget, by invoking the virtual draw method of a
	  widget. In GTK+ 2.0, this method simply invalidates the specified region of the
	  widget, then updates the invalid region of the widget immediately.
	  Usually you don't want to update the region immediately for
	  performance reasons, so in general <see cref="M:Gtk.Widget.QueueDrawArea" /> is
	  a better choice if you want to draw a region of a widget.
	</remarks>
        <since version="Gtk# 2.4" />
      </Docs>
    </Member>
    <Member MemberName="EnsureStyle">
      <MemberSignature Language="C#" Value="public void EnsureStyle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnsureStyle() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ensures that <paramref name="widget" /> has a style (<paramref name="widget" />-&gt;style).</summary>
        <remarks>
          <para>
          Not a very useful method; most of the time, if you want the style, the <paramref name="widget" /> is realized, and realized <paramref name="widgets" /> are guaranteed to have a style already.
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnterNotifyEvent">
      <MemberSignature Language="C#" Value="public event Gtk.EnterNotifyEventHandler EnterNotifyEvent;" />
      <MemberSignature Language="ILAsm" Value=".event class Gtk.EnterNotifyEventHandler EnterNotifyEvent" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Signal("enter_notify_event")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Gtk.EnterNotifyEventHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>The pointer has just entered the widget.</summary>
        <remarks>If the <see cref="P:Gtk.Widget.CanFocus" /> flag is set, Widget will gain the focus, and the widget might be drawn differently. If the handler returns False, the event might be passed to the parent of widget (if no other handler of widget has returned True).</remarks>
      </Docs>
    </Member>
    <Member MemberName="ErrorBell">
      <MemberSignature Language="C#" Value="public void ErrorBell ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ErrorBell() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
        <since version="Gtk# 2.12" />
      </Docs>
    </Member>
    <Member MemberName="Events">
      <MemberSignature Language="C#" Value="public Gdk.EventMask Events { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Gdk.EventMask Events" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Property("events")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Gdk.EventMask</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Obtains or sets the event mask for the <paramref name="widget" /> (a bitfield containing flags from <see cref="T:Gdk.EventMask" />).</summary>
        <value>a <see cref="T:Gdk.EventMask" /></value>
        <remarks>
          <para>
         The event mask determines which events a <paramref name="widget" /> will receive. Keep in mind that different widgets have different default event masks, and by changing the event mask you may disrupt a <paramref name="widget" />'s fuctionalit, so be careful.
        </para>
          <para>
         This property must be called while a <paramref name="widget" /> is unrealized. Consider <see cref="M:Gtk.Widget.AddEvents" /> for widgets that are already realized, or if you want to preserve the existing event mask.
        </para>
          <para>
         This property can't be used with <see cref="F:Gtk.WidgetFlags.NoWindow" /> widgets; to get events on those events, place them inside a <see cref="T:Gtk.EventBox" /> and receive events on the event box.
        </para>
          <para>
         These are the events that the <paramref name="widget" /> will receive.
        </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExposeEvent">
      <MemberSignature Language="C#" Value="public event Gtk.ExposeEventHandler ExposeEvent;" />
      <MemberSignature Language="ILAsm" Value=".event class Gtk.ExposeEventHandler ExposeEvent" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Signal("expose_event")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Gtk.ExposeEventHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Raised when the widget needs to be (fully or partially) redrawn.</summary>
        <remarks>See <see cref="T:Gtk.ExposeEventArgs" />, <see cref="T:Gtk.ExposeEventHandler" />. </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExtensionEvents">
      <MemberSignature Language="C#" Value="public Gdk.ExtensionMode ExtensionEvents { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Gdk.ExtensionMode ExtensionEvents" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Property("extension-events")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Gdk.ExtensionMode</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <summary>The mask that decides what kind of extension events the <paramref name="widget" /> gets.</summary>
        <value>A Gdk.ExtensionMode.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Flags">
      <MemberSignature Language="C#" Value="public int Flags { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Flags" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Obtains or sets the flags for this <paramref name="widget" />.</summary>
        <value>a <see cref="T:System.Int32" /></value>
        <remarks>
          <para>
          This property should only be used when writing custom widgets in C#. The <see cref="M:Gtk.Widget.WidgetFlags" /> property is a preferred more strongly typed member.  This member is obsolete in Gtk# 2.0.
          </para>
          <para>
          See <see cref="T:Gtk.WidgetFlags" /> for possible values.
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Focused">
      <MemberSignature Language="C#" Value="public event Gtk.FocusedHandler Focused;" />
      <MemberSignature Language="ILAsm" Value=".event class Gtk.FocusedHandler Focused" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Signal("focus")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Gtk.FocusedHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Raised whenever this widget is focused.</summary>
        <remarks>The widget gets this signal as the user uses keyboard shortcuts or tabs through the widgets in a window.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FocusGrabbed">
      <MemberSignature Language="C#" Value="public event EventHandler FocusGrabbed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler FocusGrabbed" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Signal("grab_focus")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Raised when this widget grabs the keyboard focus.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="FocusInEvent">
      <MemberSignature Language="C#" Value="public event Gtk.FocusInEventHandler FocusInEvent;" />
      <MemberSignature Language="ILAsm" Value=".event class Gtk.FocusInEventHandler FocusInEvent" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Signal("focus_in_event")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Gtk.FocusInEventHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Raised when the widget has just gained the focus.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="FocusLineWidth">
      <MemberSignature Language="C#" Value="public int FocusLineWidth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 FocusLineWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>The width of the focus line in a <paramref name="widget" />.</summary>
        <value>a <see cref="T:System.Int32" /></value>
        <remarks>
          <para>
          Subclasses of <paramref name="widget" /> use this style property to correctly layout their children.
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FocusOutEvent">
      <MemberSignature Language="C#" Value="public event Gtk.FocusOutEventHandler FocusOutEvent;" />
      <MemberSignature Language="ILAsm" Value=".event class Gtk.FocusOutEventHandler FocusOutEvent" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Signal("focus_out_event")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Gtk.FocusOutEventHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Raised when the focus leaves this widget.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="FreezeChildNotify">
      <MemberSignature Language="C#" Value="public void FreezeChildNotify ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FreezeChildNotify() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Stops emission of <see cref="F:Gtk.Widget.ChildNotified" /> events on <paramref name="widget" />.</summary>
        <remarks>
          <para>
          The events are queued until <see cref="M:Gtk.Widget.ThawChildNotify" /> is called on <paramref name="widget" />.
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GdkWindow">
      <MemberSignature Language="C#" Value="public Gdk.Window GdkWindow { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Gdk.Window GdkWindow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Gdk.Window</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Obtains or sets the underlying Gdk.Window used to display the contents of the <paramref name="widget" />.</summary>
        <value>a <see cref="T:Gdk.Window" /></value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="GetAncestor">
      <MemberSignature Language="C#" Value="public Gtk.Widget GetAncestor (GLib.GType widget_type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Gtk.Widget GetAncestor(valuetype GLib.GType widget_type) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Gtk.Widget</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="widget_type" Type="GLib.GType" />
      </Parameters>
      <Docs>
        <param name="widget_type">Ancestor type.</param>
        <summary>Obtains the first ancestor of <paramref name="widget" />.</summary>
        <returns>The ancesor <paramref name="widget" />, or see <see langword="null" /> if not found.</returns>
        <remarks>
          <para>
	  For example sending <paramref name="GTK_TYPE_BOX" /> gets the first <see cref="T:Gtk.Box" /> that's an ancstor of <paramref name="widget" />. No reference will be added to the retured <paramref name="widget" />; it should not be unreferenced. See note about checking for a toplevel <see cref="T:Gtk.WIndow" /> in the docs for <see cref="M:Gtk.Widget.Toplevel" />. Note that unlike <see cref="M:Gtk.Widget.IsAncestor" />, <see cref="M:Gtk.Widget.GetAncestor" /> considers <paramref name="widget" /> to be an ancestor of itself.
	 </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetClipboard">
      <MemberSignature Language="C#" Value="public Gtk.Clipboard GetClipboard (Gdk.Atom selection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Gtk.Clipboard GetClipboard(class Gdk.Atom selection) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Gtk.Clipboard</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="selection" Type="Gdk.Atom" />
      </Parameters>
      <Docs>
        <param name="selection">A <see cref="T:Gdk.Atom" /> which identifies the clipboard to use. <see cref="F:Gdk.Selection.Clipboard" /> gives the default clipboard, another common value is <see cref="F:Gdk.Selection.Primary" />, which gives the primary X selection.</param>
        <summary>Returns the clipboard object for the given selection to be used with <paramref name="widget" />.</summary>
        <returns>The appropiate clipboard object. If no clipboard already exists, a new one will be created. Once a clipboard object has been created, it is persistent for all time.</returns>
        <remarks>
          <para>
            <paramref name="widget" /> must have a <see cref="T:Gdk.Display" /> associated with it, so must be attached to a toplevel window.
	 </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPointer">
      <MemberSignature Language="C#" Value="public void GetPointer (out int x, out int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void GetPointer(int32 x, int32 y) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="y" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="x">Return location for the X coordinate, or <see langword="null" />.</param>
        <param name="y">Return location for the Y coordinate, or <see langword="null" />.</param>
        <summary>Obtains the location of the mouse pointer in <paramref name="widget" /> coordinates.</summary>
        <remarks>
          <para>
	  Widget coordinates are a bit odd; for historical reasons, they are defined as <paramref name="widget" />-&gt;window coordinates for widgets that are not <see cref="F:Gtk.WidgetFlags.NoWindow" /><paramref name="widgets" />, and are relative to <paramref name="widget" />-&gt;allocation.x, <paramref name="widget" />-&gt;allocation.y for widgets that are <see cref="F:Gtk.WidgetFlags.NoWindow" /><paramref name="widgets" />.
	 </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSizeRequest">
      <MemberSignature Language="C#" Value="public void GetSizeRequest (out int width, out int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void GetSizeRequest(int32 width, int32 height) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="width" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="height" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="width">Return location for width, or <see langword="null" />.</param>
        <param name="height">Return location for height, or <see langword="null" />.</param>
        <summary>Gets the size request that was explicitly set for the <paramref name="widget" /> using <see cref="M:Gtk.Widget.SetSizeRequest" />.</summary>
        <remarks>
          <para>
          A value of -1 stored in <paramref name="width" /> or <paramref name="height" /> indicates that that dimension has not been set explicitly and the natural requisition of the <paramref name="widget" /> will be used intead. See <see cref="M:Gtk.Widget.SetSizeRequest" />. To get the size a <paramref name="widget" /> will actually use, call <see cref="M:Gtk.Widget.SizeRequest" /> instead of this method.
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GrabBrokenEvent">
      <MemberSignature Language="C#" Value="public event Gtk.GrabBrokenEventHandler GrabBrokenEvent;" />
      <MemberSignature Language="ILAsm" Value=".event class Gtk.GrabBrokenEventHandler GrabBrokenEvent" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Signal("grab_broken_event")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Gtk.GrabBrokenEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Raised when an existing grab is broken by another.</summary>
        <remarks />
        <since version="Gtk# 2.8" />
      </Docs>
    </Member>
    <Member MemberName="GrabDefault">
      <MemberSignature Language="C#" Value="public void GrabDefault ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void GrabDefault() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Causes <paramref name="widget" /> to become the default <paramref name="widget" />.</summary>
        <remarks>
          <para>
          The default <paramref name="widget" /> is activated when the user presses Enter in a window. Default <paramref name="widgets" /> must be activatable, that is, <see cref="M:Gtk.Widget.Activate" /> should affect them. The <paramref name="widgets" /> must have the <see cref="F:Gtk.WidgetFlags.CanDefault" /> flag set; typically you have to set this flag yourself by calling <see cref="P:Gtk.Widget.CanDefault" />.
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GrabFocus">
      <MemberSignature Language="C#" Value="public void GrabFocus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void GrabFocus() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Causes a <paramref name="widget" /> to have the keyboard focus for the <see cref="T:Gtk.Window" /> it's inside.</summary>
        <remarks>
          <para>
          The <paramref name="widget" /> must be a focusable <paramref name="widget" />, such as a <see cref="T:Gtk.Entry" />; something like <see cref="T:Gtk.Frame" /> won't work (More precisely, it must have the <see cref="P:Gtk.Widget.CanFocus" /> flag set).
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GrabNotify">
      <MemberSignature Language="C#" Value="public event Gtk.GrabNotifyHandler GrabNotify;" />
      <MemberSignature Language="ILAsm" Value=".event class Gtk.GrabNotifyHandler GrabNotify" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Signal("grab_notify")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Gtk.GrabNotifyHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Emitted when a widget grabs focus.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="GType">
      <MemberSignature Language="C#" Value="public static GLib.GType GType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype GLib.GType GType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>GLib.GType</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>GType Property.</summary>
        <value>a <see cref="T:GLib.GType" /></value>
        <remarks>Returns the native <see cref="T:GLib.GType" /> value for <see cref="T:Gtk.Widget" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasDefault">
      <MemberSignature Language="C#" Value="public bool HasDefault { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasDefault" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Property("has-default")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <summary>
          <see langword="true" /> when the <paramref name="widget" /> currently is receiving the default action.</summary>
        <value>Evaluates to <see langword="true" />if the <paramref name="widget" /> currently is receiving the default action.</value>
        <remarks>When the <paramref name="widget" /> is focused will receive the default action, and HasDefault will be <see langword="true" /> even if there is a different widget set as default.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasFocus">
      <MemberSignature Language="C#" Value="public bool HasFocus { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasFocus" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Property("has-focus")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <summary>Whether the <paramref name="widget" /> has the input focus.</summary>
        <value>
          <see langword="true" /> if the <paramref name="widget" /> has the input focus.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="HasGrab">
      <MemberSignature Language="C#" Value="public bool HasGrab { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasGrab" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Convenience property to check Flags for WidgetFlags.HasGrab</summary>
        <value>True if the HasGrab flag is set.</value>
        <remarks>None.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasScreen">
      <MemberSignature Language="C#" Value="public bool HasScreen { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasScreen" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Checks whether there is a <see cref="T:Gdk.Screen" /> is associated with this <paramref name="widget" />.</summary>
        <value>see langword="true" /&gt; if there is a <see cref="T:Gdk.Screen" /> associated with the <paramref name="widget" />.</value>
        <remarks>All toplevel <paramref name="widgets" /> have an associated screen, and all <paramref name="widgets" /> added into a hierarchy with a toplevel window at the top.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasTooltip">
      <MemberSignature Language="C#" Value="public bool HasTooltip { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasTooltip" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Property("has-tooltip")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <since version="Gtk# 2.12" />
      </Docs>
    </Member>
    <Member MemberName="HeightRequest">
      <MemberSignature Language="C#" Value="public int HeightRequest { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 HeightRequest" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Property("height-request")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <summary>Override for the height request for the <paramref name="widget" />.</summary>
        <value>The height of the <paramref name="widget" />.</value>
        <remarks>Or -1 if natural request should be used.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HelpShown">
      <MemberSignature Language="C#" Value="public event Gtk.HelpShownHandler HelpShown;" />
      <MemberSignature Language="ILAsm" Value=".event class Gtk.HelpShownHandler HelpShown" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Signal("show_help")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Gtk.HelpShownHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Raised when the help text is shown.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Hidden">
      <MemberSignature Language="C#" Value="public event EventHandler Hidden;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Hidden" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Signal("hide")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Raised whenever this widget is hidden.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Hide">
      <MemberSignature Language="C#" Value="public void Hide ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Hide() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reverses the effects of <see cref="M:Gtk.Widget.Show" />, causing the <paramref name="widget" /> to be hidden (invisible to the user).</summary>
        <remarks>
          <para>
          Reverses the effects of <see cref="M:Gtk.Widget.Show" />, causing the <paramref name="widget" /> to be hidden (invisible to the user).
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HideAll">
      <MemberSignature Language="C#" Value="public void HideAll ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void HideAll() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Recursively hides a <paramref name="widget" /> and any child <paramref name="widgets" />.</summary>
        <remarks>
          <para>
          Recursively hides a <paramref name="widget" /> and any child <paramref name="widgets" />.
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HideOnDelete">
      <MemberSignature Language="C#" Value="public bool HideOnDelete ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool HideOnDelete() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Utility method; intended to be connected to the <see cref="F:Gtk.Widget.DeleteEvent" /> event on a <see cref="T:Gtk.Window" />.</summary>
        <returns>Returns <see langword="true" />.</returns>
        <remarks>
          <para>
          The method calls <see cref="M:Gtk.Widget.Hide" /> on its argument, then returns <see langword="true" />. If connected to <see cref="F:Gtk.Widget.DeleteEvent" />, the result is that clicking the close button for a window (on the window frame, top right corner usually) will hide but not destroy the window. By default, GTK+ destroys windows when <see cref="F:Gtk.Widget.DeleteEvent" /> is received.
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HierarchyChanged">
      <MemberSignature Language="C#" Value="public event Gtk.HierarchyChangedHandler HierarchyChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class Gtk.HierarchyChangedHandler HierarchyChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Signal("hierarchy_changed")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Gtk.HierarchyChangedHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Raised when the hierarchy (parent or child relationships) of this widget or its parent or children changes.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="InputShapeCombineMask">
      <MemberSignature Language="C#" Value="public void InputShapeCombineMask (Gdk.Pixmap shape_mask, int offset_x, int offset_y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InputShapeCombineMask(class Gdk.Pixmap shape_mask, int32 offset_x, int32 offset_y) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="shape_mask" Type="Gdk.Pixmap" />
        <Parameter Name="offset_x" Type="System.Int32" />
        <Parameter Name="offset_y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="shape_mask">mask to combine.</param>
        <param name="offset_x">x offset of <paramref name="shape_mask" />.</param>
        <param name="offset_y">y offset of <paramref name="shape_mask" />.</param>
        <summary>Sets an input shape mask for the widget.</summary>
        <remarks>Allows widgets to react to non-rectangular regions for mouse events.</remarks>
        <since version="Gtk# 2.10" />
      </Docs>
    </Member>
    <Member MemberName="Intersect">
      <MemberSignature Language="C#" Value="public bool Intersect (Gdk.Rectangle area, out Gdk.Rectangle intersection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Intersect(valuetype Gdk.Rectangle area, valuetype Gdk.Rectangle intersection) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="area" Type="Gdk.Rectangle" />
        <Parameter Name="intersection" Type="Gdk.Rectangle&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="area"> A rectangle.</param>
        <param name="intersection"> A rectangle to store intersection of <paramref name="widget" /> and <paramref name="area" />.</param>
        <summary>Computes the intersection of a <paramref name="widget" />'s area and <paramref name="area" />.</summary>
        <returns>
          <see langword="true" /> if there was an intersection.</returns>
        <remarks>
          <para>
          Computes the intersection of a <paramref name="widget" />'s area and <paramref name="area" />, storing the intersection in <paramref name="intersection" />, and returns <see langword="true" /> if there was an intersection. <paramref name="intersection" /> may be <see langword="null" /> if you're only interested in whether there was an intersection.
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAncestor">
      <MemberSignature Language="C#" Value="public bool IsAncestor (Gtk.Widget ancestor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsAncestor(class Gtk.Widget ancestor) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ancestor" Type="Gtk.Widget" />
      </Parameters>
      <Docs>
        <param name="ancestor">Another <see cref="T:Gtk.Widget" />.</param>
        <summary>Determines whether <paramref name="widget" /> is somewhere inside <paramref name="ancestor" />, possibly with intermediate containers.</summary>
        <returns>Returns <see langword="true" /> if ancestor contains <paramref name="widget" /> as a child, grandchild, great grandchild, etc.</returns>
        <remarks>
          <para>
          Determines whether <paramref name="widget" /> is somewhere inside <paramref name="ancestor" />, possibly with intermediate containers.
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAppPaintable">
      <MemberSignature Language="C#" Value="public bool IsAppPaintable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAppPaintable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Convenience property to check Flags for WidgetFlags.AppPaintable</summary>
        <value>True if the AppPaintable flag is set</value>
        <remarks>None</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCompositeChild">
      <MemberSignature Language="C#" Value="public bool IsCompositeChild { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCompositeChild" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Convenience property to check Flags for WidgetFlags.CompositeChild</summary>
        <value>True if the CompositeChild flag is set</value>
        <remarks>None</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsComposited">
      <MemberSignature Language="C#" Value="public bool IsComposited { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsComposited" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates if a widget can rely on its alpha channel being drawn correctly.</summary>
        <value>if <see langword="true" />, alpha compositing is available.</value>
        <remarks>Depends on window manager feature availability on X.</remarks>
        <since version="Gtk# 2.10" />
      </Docs>
    </Member>
    <Member MemberName="IsDoubleBuffered">
      <MemberSignature Language="C#" Value="public bool IsDoubleBuffered { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDoubleBuffered" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Convenience property to check Flags for WidetFlags.DoubleBuffered</summary>
        <value>True if the DoubleBuffered flag is set.</value>
        <remarks>None</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDrawable">
      <MemberSignature Language="C#" Value="public bool IsDrawable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDrawable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Convenience property to check if the widget is Visible and Realized.</summary>
        <value>True if the widget is able to be drawn on</value>
        <remarks>None</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFocus">
      <MemberSignature Language="C#" Value="public bool IsFocus { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFocus" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Property("is-focus")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <summary>Determines if the <paramref name="widget" /> is the focus widget within its toplevel.</summary>
        <value>
          <see langword="true" /> if the <paramref name="widget" /> is the focus widget.</value>
        <remarks>
          <para>
          This does not mean that the <see cref="P:Gtk.Widget.HasFocus" /> flag is necessarily set; <see cref="P:Gtk.Widget.HasFocus" /> will only be set if the toplevel <paramref name="widget" /> additionally has the global input focus.
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMapped">
      <MemberSignature Language="C#" Value="public bool IsMapped { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMapped" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Check to see if the widget is Mapped</summary>
        <value>true if the widget is Mapped, false otherwise.</value>
        <remarks>None.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNoWindow">
      <MemberSignature Language="C#" Value="public bool IsNoWindow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNoWindow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Convenience property to check Flags for WidgetFlags.NoWindow</summary>
        <value>True if the NoWindow flag is set.</value>
        <remarks>None.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsRealized">
      <MemberSignature Language="C#" Value="public bool IsRealized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsRealized" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Checks to see if the widget is Realized</summary>
        <value>returns true if the widget is Realized</value>
        <remarks>None.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTopLevel">
      <MemberSignature Language="C#" Value="public bool IsTopLevel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTopLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Convenience property to check Flags for WidgetFlags.Toplevel</summary>
        <value>True if the Toplevel flag is set.</value>
        <remarks>None</remarks>
      </Docs>
    </Member>
    <Member MemberName="KeynavFailed">
      <MemberSignature Language="C#" Value="public bool KeynavFailed (Gtk.DirectionType direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool KeynavFailed(valuetype Gtk.DirectionType direction) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="Gtk.DirectionType" />
      </Parameters>
      <Docs>
        <param name="direction">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <since version="Gtk# 2.12" />
      </Docs>
    </Member>
    <Member MemberName="KeyPressEvent">
      <MemberSignature Language="C#" Value="public event Gtk.KeyPressEventHandler KeyPressEvent;" />
      <MemberSignature Language="ILAsm" Value=".event class Gtk.KeyPressEventHandler KeyPressEvent" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Signal("key_press_event")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Gtk.KeyPressEventHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Raised when a key is pressed within this widget.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="KeyReleaseEvent">
      <MemberSignature Language="C#" Value="public event Gtk.KeyReleaseEventHandler KeyReleaseEvent;" />
      <MemberSignature Language="ILAsm" Value=".event class Gtk.KeyReleaseEventHandler KeyReleaseEvent" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Signal("key_release_event")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Gtk.KeyReleaseEventHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Raised when a key is released within this widget.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="LeaveNotifyEvent">
      <MemberSignature Language="C#" Value="public event Gtk.LeaveNotifyEventHandler LeaveNotifyEvent;" />
      <MemberSignature Language="ILAsm" Value=".event class Gtk.LeaveNotifyEventHandler LeaveNotifyEvent" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Signal("leave_notify_event")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Gtk.LeaveNotifyEventHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Raised when the mouse leaves this widget.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ListMnemonicLabels">
      <MemberSignature Language="C#" Value="public Gtk.Widget[] ListMnemonicLabels ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Gtk.Widget[] ListMnemonicLabels() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Gtk.Widget[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a list of the widgets, normally Labels, for which this widget is a the target of a mnemonic</summary>
        <returns>a <see cref="T:Gtk.Widget[]" /></returns>
        <remarks />
        <since version="Gtk# 2.4" />
      </Docs>
    </Member>
    <Member MemberName="Map">
      <MemberSignature Language="C#" Value="public void Map ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Map() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Causes a <paramref name="widget" /> to be mapped if it isn't already.</summary>
        <remarks>
          <para>
          This method is only for use in widget implementations.
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MapEvent">
      <MemberSignature Language="C#" Value="public event Gtk.MapEventHandler MapEvent;" />
      <MemberSignature Language="ILAsm" Value=".event class Gtk.MapEventHandler MapEvent" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Signal("map_event")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Gtk.MapEventHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Raised just after the widget is mapped.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Mapped">
      <MemberSignature Language="C#" Value="public event EventHandler Mapped;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Mapped" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Signal("map")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Raised when this widget is mapped.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="MnemonicActivate">
      <MemberSignature Language="C#" Value="public bool MnemonicActivate (bool group_cycling);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool MnemonicActivate(bool group_cycling) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="group_cycling" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="group_cycling">A boolean; set to true if the list of targets should cycle once the end of the list is reached.</param>
        <summary>Activates the targets associated with the mnemonic.</summary>
        <returns>
          <see langword="true" /> if the activation is done.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="MnemonicActivated">
      <MemberSignature Language="C#" Value="public event Gtk.MnemonicActivatedHandler MnemonicActivated;" />
      <MemberSignature Language="ILAsm" Value=".event class Gtk.MnemonicActivatedHandler MnemonicActivated" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Signal("mnemonic_activate")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Gtk.MnemonicActivatedHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Raised when someone presses a mnemonic key.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ModifierStyle">
      <MemberSignature Language="C#" Value="public Gtk.RcStyle ModifierStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Gtk.RcStyle ModifierStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Gtk.RcStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtains the current modifier style for the <paramref name="widget" />.(As set by <see cref="M:Gtk.Widget.ModifyStyle" />)</summary>
        <value>The modifier style for the <paramref name="widget" />. This rc style is owned by the <paramref name="widget" />.</value>
        <remarks>
          <para>
          If no style has previously set, a new <see cref="T:Gtk.RcStyle" /> will be created with all values unset, and set as the modifier style for the <paramref name="widget" />. If you make changes to this rc style, you must call <see cref="M:Gtk.Widget.ModifyStyle" />, passing in the returned rc style, to make sure that your changes take effect.
         </para>
          <para>
          Caution: passing the style back to <see cref="M:Gtk.Widget.ModifyStyle" /> will normally end up destroying it, because <see cref="M:Gtk.Widget.ModifyStyle" /> copies the passed-in style and sets the copy as the new modifier style, thus dropping any reference to the old modifier style. Add a reference to the modifier style if you want to keep it alive.
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ModifyBase">
      <MemberSignature Language="C#" Value="public void ModifyBase (Gtk.StateType state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ModifyBase(valuetype Gtk.StateType state) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="Gtk.StateType" />
      </Parameters>
      <Docs>
        <param name="state">The state to be reset.</param>
        <summary>Resets the base color to the default color.</summary>
        <remarks>To set a specific color, use the overload of this method.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ModifyBase">
      <MemberSignature Language="C#" Value="public void ModifyBase (Gtk.StateType state, Gdk.Color color);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ModifyBase(valuetype Gtk.StateType state, valuetype Gdk.Color color) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="Gtk.StateType" />
        <Parameter Name="color" Type="Gdk.Color" />
      </Parameters>
      <Docs>
        <param name="state">The state for which to set the base color.</param>
        <param name="color">The color to assign (does not need to be allocated), or <see langword="null" /> to undo the effect of previous calls to of <see cref="M:Gtk.Widget.ModifyBase" />.</param>
        <summary>Sets the base color for a <paramref name="widget" /> in a particular state.</summary>
        <remarks>
          <para>
          All other style values are left untouched. The base color is the background color used along with the text color (see <see cref="M:Gtk.Widget.ModifyText" />) for <paramref name="widgets" /> such as <see cref="T:Gtk.Entry" /> and <see cref="T:Gtk.TextView" />. See also <see cref="M:Gtk.Widget.ModifyStyle" />.
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ModifyBg">
      <MemberSignature Language="C#" Value="public void ModifyBg (Gtk.StateType state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ModifyBg(valuetype Gtk.StateType state) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="Gtk.StateType" />
      </Parameters>
      <Docs>
        <param name="state">The state to be reset.</param>
        <summary>Resets the background color to the default color.</summary>
        <remarks>To set a specific color, use the overload of this method.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ModifyBg">
      <MemberSignature Language="C#" Value="public void ModifyBg (Gtk.StateType state, Gdk.Color color);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ModifyBg(valuetype Gtk.StateType state, valuetype Gdk.Color color) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="Gtk.StateType" />
        <Parameter Name="color" Type="Gdk.Color" />
      </Parameters>
      <Docs>
        <param name="state">The state for which to set the background color.</param>
        <param name="color">The color to assign (does not need to be allocated), or <see langword="null" /> to undo the effect of previous calls of <see cref="M:Gtk.Widget.ModifyBg" />.</param>
        <summary>Sets the background color for a <paramref name="widget" /> in a particular state.</summary>
        <remarks>
          <para>
          All other style values are left untouched. See also <see cref="M:Gtk.Widget.ModifyStyle" />. 
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ModifyCursor">
      <MemberSignature Language="C#" Value="public void ModifyCursor (Gdk.Color primary, Gdk.Color secondary);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ModifyCursor(valuetype Gdk.Color primary, valuetype Gdk.Color secondary) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="primary" Type="Gdk.Color" />
        <Parameter Name="secondary" Type="Gdk.Color" />
      </Parameters>
      <Docs>
        <param name="primary">To be added.</param>
        <param name="secondary">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
        <since version="Gtk# 2.12" />
      </Docs>
    </Member>
    <Member MemberName="ModifyFg">
      <MemberSignature Language="C#" Value="public void ModifyFg (Gtk.StateType state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ModifyFg(valuetype Gtk.StateType state) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="Gtk.StateType" />
      </Parameters>
      <Docs>
        <param name="state">The state to be reset.</param>
        <summary>Resets the foreground color to the default color.</summary>
        <remarks>To set a specific color, use the overload of this method.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ModifyFg">
      <MemberSignature Language="C#" Value="public void ModifyFg (Gtk.StateType state, Gdk.Color color);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ModifyFg(valuetype Gtk.StateType state, valuetype Gdk.Color color) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="Gtk.StateType" />
        <Parameter Name="color" Type="Gdk.Color" />
      </Parameters>
      <Docs>
        <param name="state">The state for which to set the background color.</param>
        <param name="color">The color to assign (does not need to be allocated), or <see langword="null" /> to undo the effect of previous calls to of <see cref="M:Gtk.Widget.ModifyFg" />.</param>
        <summary>Sets the foreground <paramref name="color" /> for a <paramref name="widget" /> in a particular <paramref name="state" />.</summary>
        <remarks>
          <para>
          All other style values are left untouched. See also <see cref="M:Gdk.Widget.ModifyStyle" />.
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ModifyFont">
      <MemberSignature Language="C#" Value="public void ModifyFont (Pango.FontDescription font_desc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ModifyFont(class Pango.FontDescription font_desc) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="font_desc" Type="Pango.FontDescription" />
      </Parameters>
      <Docs>
        <param name="font_desc">The font description to use, or <see langword="null" /> to undo the effect of previous calls to <see cref="M:Gtk.Widget.ModifyFont" />.</param>
        <summary>Sets the font to use for a <paramref name="widget" />.</summary>
        <remarks>
          <para>
          All other style values are left untouched. See also <see cref="M:Gtk.Widget.ModifyStyle" />.
         </para>
          <para>
To change the font of a simple Widget:

<example><code lang="C#">
	using Pango;
	...
	[Widget] Label label1;
	...

	...
	label1.ModifyFont(FontDescription.FromString("Courier 16"));
	...
  </code></example></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ModifyStyle">
      <MemberSignature Language="C#" Value="public void ModifyStyle (Gtk.RcStyle style);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ModifyStyle(class Gtk.RcStyle style) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="style" Type="Gtk.RcStyle" />
      </Parameters>
      <Docs>
        <param name="style">The <see cref="T:Gtk.RcStyle" /> holding the style modifications.</param>
        <summary>Modifies style values on the <paramref name="widget" />.</summary>
        <remarks>
          <para>
          Modifications made using this technique take precedence over style values set via an RC file, however, they will be overriden if a <paramref name="style" /> is explicitely set on the <paramref name="widget" /> using <see cref="M:Gtk.Widget.StyleSet" />. The <see cref="T:Gtk.RcStyle" /> structure is designed so each field can either be set or unset, so it is possible, using this method, to modify some style values and leave the others unchanged.
         </para>
          <para>
          Note that modifications made with this method are not cumulative with previous calls to <see cref="M:Gtk.Widget.ModifyStyle" /> or with such methods as <see cref="M:Gtk.Widget.ModifyBg" />. If you wish to retain previous values, you must first call <see cref="M:Gtk.Widget.ModifierStyle" />, make your modifications to the returned <paramref name="style" />, then call <see cref="M:Gtk.Widget.ModifyStyle" /> with that <paramref name="style" />. On the other hand, if you first call <see cref="M:Gtk.Widget.ModifyStyle" />, subsequent calls to such methods <see cref="M:Gtk.Widget.ModifyFg" /> will have a cumulative effect with the initial modifications.
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ModifyText">
      <MemberSignature Language="C#" Value="public void ModifyText (Gtk.StateType state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ModifyText(valuetype Gtk.StateType state) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="Gtk.StateType" />
      </Parameters>
      <Docs>
        <param name="state">The state to be reset.</param>
        <summary>Resets the text color to the default color.</summary>
        <remarks>To set a specific color, use the overload of this method.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ModifyText">
      <MemberSignature Language="C#" Value="public void ModifyText (Gtk.StateType state, Gdk.Color color);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ModifyText(valuetype Gtk.StateType state, valuetype Gdk.Color color) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="Gtk.StateType" />
        <Parameter Name="color" Type="Gdk.Color" />
      </Parameters>
      <Docs>
        <param name="state">The state for which to set the text color.</param>
        <param name="color">The color to assign (does not need to be allocated), or <see langword="null" /> to undo the effect of previous calls to of <see cref="M:Gtk.Widget.ModifyText" />.</param>
        <summary>Sets the text <paramref name="color" /> for a <paramref name="widget" /> in a particular state.</summary>
        <remarks>
          <para>
          All other style values are left untouched. The text color is the foreground color used along with the base color (see <see cref="M:Gtk.Widget.ModifyBase" />) for <paramref name="widgets" /> such as <see cref="T:Gtk.Entry" /> and <see cref="T:Gtk.TextView" />. See also <see cref="M:Gtk.Widget.ModifyStyle" />.
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MotionNotifyEvent">
      <MemberSignature Language="C#" Value="public event Gtk.MotionNotifyEventHandler MotionNotifyEvent;" />
      <MemberSignature Language="ILAsm" Value=".event class Gtk.MotionNotifyEventHandler MotionNotifyEvent" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Signal("motion_notify_event")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Gtk.MotionNotifyEventHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Raised when the pointer moves within this widget.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Property("name")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <summary>The name of the <paramref name="widget" />.</summary>
        <value>The name of the <paramref name="widget" />.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="NoExposeEvent">
      <MemberSignature Language="C#" Value="public event Gtk.NoExposeEventHandler NoExposeEvent;" />
      <MemberSignature Language="ILAsm" Value=".event class Gtk.NoExposeEventHandler NoExposeEvent" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Signal("no_expose_event")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Gtk.NoExposeEventHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Emits NoExposeEvent</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="NoShowAll">
      <MemberSignature Language="C#" Value="public bool NoShowAll { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool NoShowAll" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Property("no-show-all")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
	  This property determines whether the widget will be affected by 
	  <see cref="M:Gtk.Widget.ShowAll" /> and <see cref="M:Gtk.Widget.HideAll" />.
	</summary>
        <value>a <see cref="T:System.Boolean" />, true if the widget should be affected</value>
        <remarks />
        <since version="Gtk# 2.4" />
      </Docs>
    </Member>
    <Member MemberName="OnAccelCanActivate">
      <MemberSignature Language="C#" Value="protected virtual bool OnAccelCanActivate (uint signal_id);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnAccelCanActivate(unsigned int32 signal_id) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.DefaultSignalHandler(ConnectionMethod="OverrideAccelCanActivate", Type=typeof(Gtk.Widget))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="signal_id" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="signal_id">a <see cref="T:System.UInt32" />, a signal ID</param>
        <summary>
	  Method raised when the <see cref="E:Gtk.Widget.AccelCanActivate" />
	  event happens; override this for additional functionality.
	</summary>
        <returns>a <see cref="T:System.Boolean" />, true if the accelerator can be activated.</returns>
        <remarks>
        </remarks>
        <since version="Gtk# 2.4" />
      </Docs>
    </Member>
    <Member MemberName="OnAccelClosuresChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnAccelClosuresChanged ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAccelClosuresChanged() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.DefaultSignalHandler(ConnectionMethod="OverrideAccelClosuresChanged", Type=typeof(Gtk.Widget))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Default handler for the <see cref="M:Gtk.Widget.AccelClosuresChanged" /> event.</summary>
        <remarks>Override this method in a subclass to provide a default handler for the <see cref="M:Gtk.Widget.AccelClosuresChanged" /> event.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnActivate">
      <MemberSignature Language="C#" Value="protected virtual void OnActivate ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnActivate() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.DefaultSignalHandler(ConnectionMethod="ConnectActivate", Type=typeof(Gtk.Widget))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Method raised when the widget is activated, primarily by <see cref="M:Gtk.Widget.Activate" />.</summary>
        <remarks>Override this method in a subclass to be notified when the widget is activated, commonly when the user presses Enter or Space during key navigation.</remarks>
        <since version="Gtk# 2.10" />
      </Docs>
    </Member>
    <Member MemberName="OnButtonPressEvent">
      <MemberSignature Language="C#" Value="protected virtual bool OnButtonPressEvent (Gdk.EventButton evnt);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnButtonPressEvent(class Gdk.EventButton evnt) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.DefaultSignalHandler(ConnectionMethod="OverrideButtonPressEvent", Type=typeof(Gtk.Widget))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="evnt" Type="Gdk.EventButton" />
      </Parameters>
      <Docs>
        <param name="evnt">a <see cref="T:Gdk.EventButton" /></param>
        <summary>Default handler for the <see cref="M:Gtk.Widget.ButtonPressEvent" /> event.</summary>
        <returns>a <see cref="T:System.Boolean" /></returns>
        <remarks>Override this method in a subclass to provide a default handler for the <see cref="M:Gtk.Widget.ButtonPressEvent" /> event.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnButtonReleaseEvent">
      <MemberSignature Language="C#" Value="protected virtual bool OnButtonReleaseEvent (Gdk.EventButton evnt);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnButtonReleaseEvent(class Gdk.EventButton evnt) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.DefaultSignalHandler(ConnectionMethod="OverrideButtonReleaseEvent", Type=typeof(Gtk.Widget))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="evnt" Type="Gdk.EventButton" />
      </Parameters>
      <Docs>
        <param name="evnt">a <see cref="T:Gdk.EventButton" /></param>
        <summary>Default handler for the <see cref="M:Gtk.Widget.ButtonReleaseEvent" /> event.</summary>
        <returns>a <see cref="T:System.Boolean" /></returns>
        <remarks>Override this method in a subclass to provide a default handler for the <see cref="M:Gtk.Widget.ButtonReleaseEvent" /> event.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnChildNotified">
      <MemberSignature Language="C#" Value="protected virtual void OnChildNotified (IntPtr pspec);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnChildNotified(native int pspec) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.DefaultSignalHandler(ConnectionMethod="OverrideChildNotified", Type=typeof(Gtk.Widget))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pspec" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="pspec">a <see cref="T:System.IntPtr" /></param>
        <summary>Default handler for the <see cref="M:Gtk.Widget.ChildNotified" /> event.</summary>
        <remarks>Override this method in a subclass to provide a default handler for the <see cref="M:Gtk.Widget.ChildNotified" /> event.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnClientEvent">
      <MemberSignature Language="C#" Value="protected virtual bool OnClientEvent (Gdk.EventClient evnt);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnClientEvent(class Gdk.EventClient evnt) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.DefaultSignalHandler(ConnectionMethod="OverrideClientEvent", Type=typeof(Gtk.Widget))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="evnt" Type="Gdk.EventClient" />
      </Parameters>
      <Docs>
        <param name="evnt">a <see cref="T:Gdk.EventClient" /></param>
        <summary>Default handler for the <see cref="M:Gtk.Widget.ClientEvent" /> event.</summary>
        <returns>a <see cref="T:System.Boolean" /></returns>
        <remarks>Override this method in a subclass to provide a default handler for the <see cref="M:Gtk.Widget.ClientEvent" /> event.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnCompositedChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnCompositedChanged ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCompositedChanged() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.DefaultSignalHandler(ConnectionMethod="OverrideCompositedChanged", Type=typeof(Gtk.Widget))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Default handler for <see cref="M:Gtk.Widget.CompositedChanged" /> event.</summary>
        <remarks />
        <since version="Gtk# 2.10" />
      </Docs>
    </Member>
    <Member MemberName="OnConfigureEvent">
      <MemberSignature Language="C#" Value="protected virtual bool OnConfigureEvent (Gdk.EventConfigure evnt);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnConfigureEvent(class Gdk.EventConfigure evnt) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.DefaultSignalHandler(ConnectionMethod="OverrideConfigureEvent", Type=typeof(Gtk.Widget))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="evnt" Type="Gdk.EventConfigure" />
      </Parameters>
      <Docs>
        <param name="evnt">a <see cref="T:Gdk.EventConfigure" /></param>
        <summary>Default handler for the <see cref="M:Gtk.Widget.ConfigureEvent" /> event.</summary>
        <returns>a <see cref="T:System.Boolean" /></returns>
        <remarks>Override this method in a subclass to provide a default handler for the <see cref="M:Gtk.Widget.ConfigureEvent" /> event.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDeleteEvent">
      <MemberSignature Language="C#" Value="protected virtual bool OnDeleteEvent (Gdk.Event evnt);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnDeleteEvent(class Gdk.Event evnt) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.DefaultSignalHandler(ConnectionMethod="OverrideDeleteEvent", Type=typeof(Gtk.Widget))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="evnt" Type="Gdk.Event" />
      </Parameters>
      <Docs>
        <param name="evnt">a <see cref="T:Gdk.Event" /></param>
        <summary>Default handler for the <see cref="M:Gtk.Widget.DeleteEvent" /> event.</summary>
        <returns>a <see cref="T:System.Boolean" /></returns>
        <remarks>Override this method in a subclass to provide a default handler for the <see cref="M:Gtk.Widget.DeleteEvent" /> event.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDestroyEvent">
      <MemberSignature Language="C#" Value="protected virtual bool OnDestroyEvent (Gdk.Event evnt);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnDestroyEvent(class Gdk.Event evnt) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.DefaultSignalHandler(ConnectionMethod="OverrideDestroyEvent", Type=typeof(Gtk.Widget))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="evnt" Type="Gdk.Event" />
      </Parameters>
      <Docs>
        <param name="evnt">a <see cref="T:Gdk.Event" /></param>
        <summary>Default handler for the <see cref="M:Gtk.Widget.DestroyEvent" /> event.</summary>
        <returns>a <see cref="T:System.Boolean" /></returns>
        <remarks>Override this method in a subclass to provide a default handler for the <see cref="M:Gtk.Widget.DestroyEvent" /> event.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDirectionChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnDirectionChanged (Gtk.TextDirection previous_direction);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDirectionChanged(valuetype Gtk.TextDirection previous_direction) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.DefaultSignalHandler(ConnectionMethod="OverrideDirectionChanged", Type=typeof(Gtk.Widget))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="previous_direction" Type="Gtk.TextDirection" />
      </Parameters>
      <Docs>
        <param name="previous_direction">a <see cref="T:Gtk.TextDirection" /></param>
        <summary>Default handler for the <see cref="M:Gtk.Widget.DirectionChanged" /> event.</summary>
        <remarks>Override this method in a subclass to provide a default handler for the <see cref="M:Gtk.Widget.DirectionChanged" /> event.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDragBegin">
      <MemberSignature Language="C#" Value="protected virtual void OnDragBegin (Gdk.DragContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDragBegin(class Gdk.DragContext context) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.DefaultSignalHandler(ConnectionMethod="OverrideDragBegin", Type=typeof(Gtk.Widget))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Gdk.DragContext" />
      </Parameters>
      <Docs>
        <param name="context">a <see cref="T:Gdk.DragContext" /></param>
        <summary>Default handler for the <see cref="M:Gtk.Widget.DragBegin" /> event.</summary>
        <remarks>Override this method in a subclass to provide a default handler for the <see cref="M:Gtk.Widget.DragBegin" /> event.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDragDataDelete">
      <MemberSignature Language="C#" Value="protected virtual void OnDragDataDelete (Gdk.DragContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDragDataDelete(class Gdk.DragContext context) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.DefaultSignalHandler(ConnectionMethod="OverrideDragDataDelete", Type=typeof(Gtk.Widget))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Gdk.DragContext" />
      </Parameters>
      <Docs>
        <param name="context">a <see cref="T:Gdk.DragContext" /></param>
        <summary>Default handler for the <see cref="M:Gtk.Widget.DragDataDelete" /> event.</summary>
        <remarks>Override this method in a subclass to provide a default handler for the <see cref="M:Gtk.Widget.DragDataDelete" /> event.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDragDataGet">
      <MemberSignature Language="C#" Value="protected virtual void OnDragDataGet (Gdk.DragContext context, Gtk.SelectionData selection_data, uint info, uint time_);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDragDataGet(class Gdk.DragContext context, class Gtk.SelectionData selection_data, unsigned int32 info, unsigned int32 time_) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.DefaultSignalHandler(ConnectionMethod="OverrideDragDataGet", Type=typeof(Gtk.Widget))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Gdk.DragContext" />
        <Parameter Name="selection_data" Type="Gtk.SelectionData" />
        <Parameter Name="info" Type="System.UInt32" />
        <Parameter Name="time_" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="context">a <see cref="T:Gdk.DragContext" /></param>
        <param name="selection_data">a <see cref="T:Gtk.SelectionData" /></param>
        <param name="info">a <see cref="T:System.UInt32" /></param>
        <param name="time_">a <see cref="T:System.UInt32" /></param>
        <summary>Default handler for the <see cref="M:Gtk.Widget.DragDataGet" /> event.</summary>
        <remarks>Override this method in a subclass to provide a default handler for the <see cref="M:Gtk.Widget.DragDataGet" /> event.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDragDataReceived">
      <MemberSignature Language="C#" Value="protected virtual void OnDragDataReceived (Gdk.DragContext context, int x, int y, Gtk.SelectionData selection_data, uint info, uint time_);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDragDataReceived(class Gdk.DragContext context, int32 x, int32 y, class Gtk.SelectionData selection_data, unsigned int32 info, unsigned int32 time_) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.DefaultSignalHandler(ConnectionMethod="OverrideDragDataReceived", Type=typeof(Gtk.Widget))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Gdk.DragContext" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="selection_data" Type="Gtk.SelectionData" />
        <Parameter Name="info" Type="System.UInt32" />
        <Parameter Name="time_" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="context">a <see cref="T:Gdk.DragContext" /></param>
        <param name="x">a <see cref="T:System.Int32" /></param>
        <param name="y">a <see cref="T:System.Int32" /></param>
        <param name="selection_data">a <see cref="T:Gtk.SelectionData" /></param>
        <param name="info">a <see cref="T:System.UInt32" /></param>
        <param name="time_">a <see cref="T:System.UInt32" /></param>
        <summary>Default handler for the <see cref="M:Gtk.Widget.DragDataReceived" /> event.</summary>
        <remarks>Override this method in a subclass to provide a default handler for the <see cref="M:Gtk.Widget.DragDataReceived" /> event.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDragDrop">
      <MemberSignature Language="C#" Value="protected virtual bool OnDragDrop (Gdk.DragContext context, int x, int y, uint time_);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnDragDrop(class Gdk.DragContext context, int32 x, int32 y, unsigned int32 time_) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.DefaultSignalHandler(ConnectionMethod="OverrideDragDrop", Type=typeof(Gtk.Widget))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Gdk.DragContext" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="time_" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="context">a <see cref="T:Gdk.DragContext" /></param>
        <param name="x">a <see cref="T:System.Int32" /></param>
        <param name="y">a <see cref="T:System.Int32" /></param>
        <param name="time_">a <see cref="T:System.UInt32" /></param>
        <summary>Default handler for the <see cref="M:Gtk.Widget.DragDrop" /> event.</summary>
        <returns>a <see cref="T:System.Boolean" /></returns>
        <remarks>Override this method in a subclass to provide a default handler for the <see cref="M:Gtk.Widget.DragDrop" /> event.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDragEnd">
      <MemberSignature Language="C#" Value="protected virtual void OnDragEnd (Gdk.DragContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDragEnd(class Gdk.DragContext context) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.DefaultSignalHandler(ConnectionMethod="OverrideDragEnd", Type=typeof(Gtk.Widget))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Gdk.DragContext" />
      </Parameters>
      <Docs>
        <param name="context">a <see cref="T:Gdk.DragContext" /></param>
        <summary>Default handler for the <see cref="M:Gtk.Widget.DragEnd" /> event.</summary>
        <remarks>Override this method in a subclass to provide a default handler for the <see cref="M:Gtk.Widget.DragEnd" /> event.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDragFailed">
      <MemberSignature Language="C#" Value="protected virtual bool OnDragFailed (Gdk.DragContext drag_context, Gtk.DragResult drag_result);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnDragFailed(class Gdk.DragContext drag_context, valuetype Gtk.DragResult drag_result) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.DefaultSignalHandler(ConnectionMethod="OverrideDragFailed", Type=typeof(Gtk.Widget))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="drag_context" Type="Gdk.DragContext" />
        <Parameter Name="drag_result" Type="Gtk.DragResult" />
      </Parameters>
      <Docs>
        <param name="drag_context">To be added.</param>
        <param name="drag_result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <since version="Gtk# 2.12" />
      </Docs>
    </Member>
    <Member MemberName="OnDragLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnDragLeave (Gdk.DragContext context, uint time_);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDragLeave(class Gdk.DragContext context, unsigned int32 time_) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.DefaultSignalHandler(ConnectionMethod="OverrideDragLeave", Type=typeof(Gtk.Widget))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Gdk.DragContext" />
        <Parameter Name="time_" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="context">a <see cref="T:Gdk.DragContext" /></param>
        <param name="time_">a <see cref="T:System.UInt32" /></param>
        <summary>Default handler for the <see cref="M:Gtk.Widget.DragLeave" /> event.</summary>
        <remarks>Override this method in a subclass to provide a default handler for the <see cref="M:Gtk.Widget.DragLeave" /> event.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDragMotion">
      <MemberSignature Language="C#" Value="protected virtual bool OnDragMotion (Gdk.DragContext context, int x, int y, uint time_);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnDragMotion(class Gdk.DragContext context, int32 x, int32 y, unsigned int32 time_) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.DefaultSignalHandler(ConnectionMethod="OverrideDragMotion", Type=typeof(Gtk.Widget))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Gdk.DragContext" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="time_" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="context">a <see cref="T:Gdk.DragContext" /></param>
        <param name="x">a <see cref="T:System.Int32" /></param>
        <param name="y">a <see cref="T:System.Int32" /></param>
        <param name="time_">a <see cref="T:System.UInt32" /></param>
        <summary>Default handler for the <see cref="M:Gtk.Widget.DragMotion" /> event.</summary>
        <returns>a <see cref="T:System.Boolean" /></returns>
        <remarks>Override this method in a subclass to provide a default handler for the <see cref="M:Gtk.Widget.DragMotion" /> event.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnEnterNotifyEvent">
      <MemberSignature Language="C#" Value="protected virtual bool OnEnterNotifyEvent (Gdk.EventCrossing evnt);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnEnterNotifyEvent(class Gdk.EventCrossing evnt) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.DefaultSignalHandler(ConnectionMethod="OverrideEnterNotifyEvent", Type=typeof(Gtk.Widget))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="evnt" Type="Gdk.EventCrossing" />
      </Parameters>
      <Docs>
        <param name="evnt">a <see cref="T:Gdk.EventCrossing" /></param>
        <summary>Default handler for the <see cref="M:Gtk.Widget.EnterNotifyEvent" /> event.</summary>
        <returns>a <see cref="T:System.Boolean" /></returns>
        <remarks>Override this method in a subclass to provide a default handler for the <see cref="M:Gtk.Widget.EnterNotifyEvent" /> event.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnExposeEvent">
      <MemberSignature Language="C#" Value="protected virtual bool OnExposeEvent (Gdk.EventExpose evnt);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnExposeEvent(class Gdk.EventExpose evnt) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.DefaultSignalHandler(ConnectionMethod="OverrideExposeEvent", Type=typeof(Gtk.Widget))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="evnt" Type="Gdk.EventExpose" />
      </Parameters>
      <Docs>
        <param name="evnt">a <see cref="T:Gdk.EventExpose" /></param>
        <summary>Default handler for the <see cref="M:Gtk.Widget.ExposeEvent" /> event.</summary>
        <returns>a <see cref="T:System.Boolean" /></returns>
        <remarks>Override this method in a subclass to provide a default handler for the <see cref="M:Gtk.Widget.ExposeEvent" /> event.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnFocused">
      <MemberSignature Language="C#" Value="protected virtual bool OnFocused (Gtk.DirectionType direction);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnFocused(valuetype Gtk.DirectionType direction) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.DefaultSignalHandler(ConnectionMethod="OverrideFocused", Type=typeof(Gtk.Widget))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="Gtk.DirectionType" />
      </Parameters>
      <Docs>
        <param name="direction">a <see cref="T:Gtk.DirectionType" /></param>
        <summary>Default handler for the <see cref="M:Gtk.Widget.Focused" /> event.</summary>
        <returns>a <see cref="T:System.Boolean" /></returns>
        <remarks>Override this method in a subclass to provide a default handler for the <see cref="M:Gtk.Widget.Focused" /> event.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnFocusGrabbed">
      <MemberSignature Language="C#" Value="protected virtual void OnFocusGrabbed ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnFocusGrabbed() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.DefaultSignalHandler(ConnectionMethod="OverrideFocusGrabbed", Type=typeof(Gtk.Widget))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Default handler for the <see cref="M:Gtk.Widget.FocusGrabbed" /> event.</summary>
        <remarks>Override this method in a subclass to provide a default handler for the <see cref="M:Gtk.Widget.FocusGrabbed" /> event.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnFocusInEvent">
      <MemberSignature Language="C#" Value="protected virtual bool OnFocusInEvent (Gdk.EventFocus evnt);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnFocusInEvent(class Gdk.EventFocus evnt) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.DefaultSignalHandler(ConnectionMethod="OverrideFocusInEvent", Type=typeof(Gtk.Widget))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="evnt" Type="Gdk.EventFocus" />
      </Parameters>
      <Docs>
        <param name="evnt">a <see cref="T:Gdk.EventFocus" /></param>
        <summary>Default handler for the <see cref="M:Gtk.Widget.FocusInEvent" /> event.</summary>
        <returns>a <see cref="T:System.Boolean" /></returns>
        <remarks>Override this method in a subclass to provide a default handler for the <see cref="M:Gtk.Widget.FocusInEvent" /> event.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnFocusOutEvent">
      <MemberSignature Language="C#" Value="protected virtual bool OnFocusOutEvent (Gdk.EventFocus evnt);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnFocusOutEvent(class Gdk.EventFocus evnt) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.DefaultSignalHandler(ConnectionMethod="OverrideFocusOutEvent", Type=typeof(Gtk.Widget))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="evnt" Type="Gdk.EventFocus" />
      </Parameters>
      <Docs>
        <param name="evnt">a <see cref="T:Gdk.EventFocus" /></param>
        <summary>Default handler for the <see cref="M:Gtk.Widget.FocusOutEvent" /> event.</summary>
        <returns>a <see cref="T:System.Boolean" /></returns>
        <remarks>Override this method in a subclass to provide a default handler for the <see cref="M:Gtk.Widget.FocusOutEvent" /> event.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnGrabBrokenEvent">
      <MemberSignature Language="C#" Value="protected virtual bool OnGrabBrokenEvent (Gdk.EventGrabBroken evnt);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnGrabBrokenEvent(class Gdk.EventGrabBroken evnt) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.DefaultSignalHandler(ConnectionMethod="OverrideGrabBrokenEvent", Type=typeof(Gtk.Widget))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="evnt" Type="Gdk.EventGrabBroken" />
      </Parameters>
      <Docs>
        <param name="evnt">To be added.</param>
        <summary>Default handler for the <see cref="M:Gtk.Widget.GrabBrokenEvent" /> event.</summary>
        <returns>To be added.</returns>
        <remarks>Override this method in a subclass to provide a default handler for the <see cref="M:Gtk.Widget.GrabBrokenEvent" /> event.</remarks>
        <since version="Gtk# 2.8" />
      </Docs>
    </Member>
    <Member MemberName="OnGrabNotify">
      <MemberSignature Language="C#" Value="protected virtual void OnGrabNotify (bool was_grabbed);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGrabNotify(bool was_grabbed) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.DefaultSignalHandler(ConnectionMethod="OverrideGrabNotify", Type=typeof(Gtk.Widget))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="was_grabbed" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="was_grabbed">a <see cref="T:System.Boolean" /></param>
        <summary>Default handler for the <see cref="M:Gtk.Widget.GrabNotify" /> event.</summary>
        <remarks>Override this method in a subclass to provide a default handler for the <see cref="M:Gtk.Widget.GrabNotify" /> event.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnHelpShown">
      <MemberSignature Language="C#" Value="protected virtual bool OnHelpShown (Gtk.WidgetHelpType help_type);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnHelpShown(valuetype Gtk.WidgetHelpType help_type) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.DefaultSignalHandler(ConnectionMethod="OverrideHelpShown", Type=typeof(Gtk.Widget))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="help_type" Type="Gtk.WidgetHelpType" />
      </Parameters>
      <Docs>
        <param name="help_type">a <see cref="T:Gtk.WidgetHelpType" /></param>
        <summary>Default handler for the <see cref="M:Gtk.Widget.HelpShown" /> event.</summary>
        <returns>a <see cref="T:System.Boolean" /></returns>
        <remarks>Override this method in a subclass to provide a default handler for the <see cref="M:Gtk.Widget.HelpShown" /> event.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnHidden">
      <MemberSignature Language="C#" Value="protected virtual void OnHidden ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnHidden() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.DefaultSignalHandler(ConnectionMethod="OverrideHidden", Type=typeof(Gtk.Widget))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Default handler for the <see cref="M:Gtk.Widget.Hidden" /> event.</summary>
        <remarks>Override this method in a subclass to provide a default handler for the <see cref="M:Gtk.Widget.Hidden" /> event.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnHierarchyChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnHierarchyChanged (Gtk.Widget previous_toplevel);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnHierarchyChanged(class Gtk.Widget previous_toplevel) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.DefaultSignalHandler(ConnectionMethod="OverrideHierarchyChanged", Type=typeof(Gtk.Widget))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="previous_toplevel" Type="Gtk.Widget" />
      </Parameters>
      <Docs>
        <param name="previous_toplevel">a <see cref="T:Gtk.Widget" /></param>
        <summary>Default handler for the <see cref="M:Gtk.Widget.HierarchyChanged" /> event.</summary>
        <remarks>Override this method in a subclass to provide a default handler for the <see cref="M:Gtk.Widget.HierarchyChanged" /> event.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnKeyPressEvent">
      <MemberSignature Language="C#" Value="protected virtual bool OnKeyPressEvent (Gdk.EventKey evnt);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnKeyPressEvent(class Gdk.EventKey evnt) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.DefaultSignalHandler(ConnectionMethod="OverrideKeyPressEvent", Type=typeof(Gtk.Widget))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="evnt" Type="Gdk.EventKey" />
      </Parameters>
      <Docs>
        <param name="evnt">a <see cref="T:Gdk.EventKey" /></param>
        <summary>Default handler for the <see cref="M:Gtk.Widget.KeyPressEvent" /> event.</summary>
        <returns>a <see cref="T:System.Boolean" /></returns>
        <remarks>Override this method in a subclass to provide a default handler for the <see cref="M:Gtk.Widget.KeyPressEvent" /> event.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnKeyReleaseEvent">
      <MemberSignature Language="C#" Value="protected virtual bool OnKeyReleaseEvent (Gdk.EventKey evnt);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnKeyReleaseEvent(class Gdk.EventKey evnt) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.DefaultSignalHandler(ConnectionMethod="OverrideKeyReleaseEvent", Type=typeof(Gtk.Widget))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="evnt" Type="Gdk.EventKey" />
      </Parameters>
      <Docs>
        <param name="evnt">a <see cref="T:Gdk.EventKey" /></param>
        <summary>Default handler for the <see cref="M:Gtk.Widget.KeyReleaseEvent" /> event.</summary>
        <returns>a <see cref="T:System.Boolean" /></returns>
        <remarks>Override this method in a subclass to provide a default handler for the <see cref="M:Gtk.Widget.KeyReleaseEvent" /> event.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnLeaveNotifyEvent">
      <MemberSignature Language="C#" Value="protected virtual bool OnLeaveNotifyEvent (Gdk.EventCrossing evnt);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnLeaveNotifyEvent(class Gdk.EventCrossing evnt) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.DefaultSignalHandler(ConnectionMethod="OverrideLeaveNotifyEvent", Type=typeof(Gtk.Widget))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="evnt" Type="Gdk.EventCrossing" />
      </Parameters>
      <Docs>
        <param name="evnt">a <see cref="T:Gdk.EventCrossing" /></param>
        <summary>Default handler for the <see cref="M:Gtk.Widget.LeaveNotifyEvent" /> event.</summary>
        <returns>a <see cref="T:System.Boolean" /></returns>
        <remarks>Override this method in a subclass to provide a default handler for the <see cref="M:Gtk.Widget.LeaveNotifyEvent" /> event.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMapEvent">
      <MemberSignature Language="C#" Value="protected virtual bool OnMapEvent (Gdk.Event evnt);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnMapEvent(class Gdk.Event evnt) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.DefaultSignalHandler(ConnectionMethod="OverrideMapEvent", Type=typeof(Gtk.Widget))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="evnt" Type="Gdk.Event" />
      </Parameters>
      <Docs>
        <param name="evnt">a <see cref="T:Gdk.Event" /></param>
        <summary>Default handler for the <see cref="M:Gtk.Widget.MapEvent" /> event.</summary>
        <returns>a <see cref="T:System.Boolean" /></returns>
        <remarks>Override this method in a subclass to provide a default handler for the <see cref="M:Gtk.Widget.MapEvent" /> event.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMapped">
      <MemberSignature Language="C#" Value="protected virtual void OnMapped ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMapped() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.DefaultSignalHandler(ConnectionMethod="OverrideMapped", Type=typeof(Gtk.Widget))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Default handler for the <see cref="M:Gtk.Widget.Mapped" /> event.</summary>
        <remarks>Override this method in a subclass to provide a default handler for the <see cref="M:Gtk.Widget.Mapped" /> event.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMnemonicActivated">
      <MemberSignature Language="C#" Value="protected virtual bool OnMnemonicActivated (bool group_cycling);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnMnemonicActivated(bool group_cycling) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.DefaultSignalHandler(ConnectionMethod="OverrideMnemonicActivated", Type=typeof(Gtk.Widget))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="group_cycling" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="group_cycling">a <see cref="T:System.Boolean" /></param>
        <summary>Default handler for the <see cref="M:Gtk.Widget.MnemonicActivated" /> event.</summary>
        <returns>a <see cref="T:System.Boolean" /></returns>
        <remarks>Override this method in a subclass to provide a default handler for the <see cref="M:Gtk.Widget.MnemonicActivated" /> event.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMotionNotifyEvent">
      <MemberSignature Language="C#" Value="protected virtual bool OnMotionNotifyEvent (Gdk.EventMotion evnt);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnMotionNotifyEvent(class Gdk.EventMotion evnt) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.DefaultSignalHandler(ConnectionMethod="OverrideMotionNotifyEvent", Type=typeof(Gtk.Widget))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="evnt" Type="Gdk.EventMotion" />
      </Parameters>
      <Docs>
        <param name="evnt">a <see cref="T:Gdk.EventMotion" /></param>
        <summary>Default handler for the <see cref="M:Gtk.Widget.MotionNotifyEvent" /> event.</summary>
        <returns>a <see cref="T:System.Boolean" /></returns>
        <remarks>Override this method in a subclass to provide a default handler for the <see cref="M:Gtk.Widget.MotionNotifyEvent" /> event.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnNoExposeEvent">
      <MemberSignature Language="C#" Value="protected virtual bool OnNoExposeEvent (Gdk.Event evnt);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnNoExposeEvent(class Gdk.Event evnt) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.DefaultSignalHandler(ConnectionMethod="OverrideNoExposeEvent", Type=typeof(Gtk.Widget))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="evnt" Type="Gdk.Event" />
      </Parameters>
      <Docs>
        <param name="evnt">a <see cref="T:Gdk.Event" /></param>
        <summary>Default handler for the <see cref="M:Gtk.Widget.NoExposeEvent" /> event.</summary>
        <returns>a <see cref="T:System.Boolean" /></returns>
        <remarks>Override this method in a subclass to provide a default handler for the <see cref="M:Gtk.Widget.NoExposeEvent" /> event.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnParentSet">
      <MemberSignature Language="C#" Value="protected virtual void OnParentSet (Gtk.Widget previous_parent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnParentSet(class Gtk.Widget previous_parent) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.DefaultSignalHandler(ConnectionMethod="OverrideParentSet", Type=typeof(Gtk.Widget))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="previous_parent" Type="Gtk.Widget" />
      </Parameters>
      <Docs>
        <param name="previous_parent">a <see cref="T:Gtk.Widget" /></param>
        <summary>Default handler for the <see cref="M:Gtk.Widget.ParentSet" /> event.</summary>
        <remarks>Override this method in a subclass to provide a default handler for the <see cref="M:Gtk.Widget.ParentSet" /> event.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPopupMenu">
      <MemberSignature Language="C#" Value="protected virtual bool OnPopupMenu ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnPopupMenu() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.DefaultSignalHandler(ConnectionMethod="OverridePopupMenu", Type=typeof(Gtk.Widget))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Default handler for the <see cref="M:Gtk.Widget.PopupMenu" /> event.</summary>
        <returns>a <see cref="T:System.Boolean" /></returns>
        <remarks>Override this method in a subclass to provide a default handler for the <see cref="M:Gtk.Widget.PopupMenu" /> event.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPropertyNotifyEvent">
      <MemberSignature Language="C#" Value="protected virtual bool OnPropertyNotifyEvent (Gdk.EventProperty evnt);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnPropertyNotifyEvent(class Gdk.EventProperty evnt) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.DefaultSignalHandler(ConnectionMethod="OverridePropertyNotifyEvent", Type=typeof(Gtk.Widget))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="evnt" Type="Gdk.EventProperty" />
      </Parameters>
      <Docs>
        <param name="evnt">a <see cref="T:Gdk.EventProperty" /></param>
        <summary>Default handler for the <see cref="M:Gtk.Widget.PropertyNotifyEvent" /> event.</summary>
        <returns>a <see cref="T:System.Boolean" /></returns>
        <remarks>Override this method in a subclass to provide a default handler for the <see cref="M:Gtk.Widget.PropertyNotifyEvent" /> event.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnProximityInEvent">
      <MemberSignature Language="C#" Value="protected virtual bool OnProximityInEvent (Gdk.EventProximity evnt);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnProximityInEvent(class Gdk.EventProximity evnt) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.DefaultSignalHandler(ConnectionMethod="OverrideProximityInEvent", Type=typeof(Gtk.Widget))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="evnt" Type="Gdk.EventProximity" />
      </Parameters>
      <Docs>
        <param name="evnt">a <see cref="T:Gdk.EventProximity" /></param>
        <summary>Default handler for the <see cref="M:Gtk.Widget.ProximityInEvent" /> event.</summary>
        <returns>a <see cref="T:System.Boolean" /></returns>
        <remarks>Override this method in a subclass to provide a default handler for the <see cref="M:Gtk.Widget.ProximityInEvent" /> event.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnProximityOutEvent">
      <MemberSignature Language="C#" Value="protected virtual bool OnProximityOutEvent (Gdk.EventProximity evnt);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnProximityOutEvent(class Gdk.EventProximity evnt) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.DefaultSignalHandler(ConnectionMethod="OverrideProximityOutEvent", Type=typeof(Gtk.Widget))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="evnt" Type="Gdk.EventProximity" />
      </Parameters>
      <Docs>
        <param name="evnt">a <see cref="T:Gdk.EventProximity" /></param>
        <summary>Default handler for the <see cref="M:Gtk.Widget.ProximityOutEvent" /> event.</summary>
        <returns>a <see cref="T:System.Boolean" /></returns>
        <remarks>Override this method in a subclass to provide a default handler for the <see cref="M:Gtk.Widget.ProximityOutEvent" /> event.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnQueryTooltip">
      <MemberSignature Language="C#" Value="protected virtual bool OnQueryTooltip (int x, int y, bool keyboard_tooltip, Gtk.Tooltip tooltip);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnQueryTooltip(int32 x, int32 y, bool keyboard_tooltip, class Gtk.Tooltip tooltip) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.DefaultSignalHandler(ConnectionMethod="OverrideQueryTooltip", Type=typeof(Gtk.Widget))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="keyboard_tooltip" Type="System.Boolean" />
        <Parameter Name="tooltip" Type="Gtk.Tooltip" />
      </Parameters>
      <Docs>
        <param name="x">To be added.</param>
        <param name="y">To be added.</param>
        <param name="keyboard_tooltip">To be added.</param>
        <param name="tooltip">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <since version="Gtk# 2.12" />
      </Docs>
    </Member>
    <Member MemberName="OnRealized">
      <MemberSignature Language="C#" Value="protected virtual void OnRealized ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRealized() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.DefaultSignalHandler(ConnectionMethod="OverrideRealized", Type=typeof(Gtk.Widget))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Default handler for the <see cref="M:Gtk.Widget.Realized" /> event.</summary>
        <remarks>Override this method in a subclass to provide a default handler for the <see cref="M:Gtk.Widget.Realized" /> event.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnScreenChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnScreenChanged (Gdk.Screen previous_screen);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnScreenChanged(class Gdk.Screen previous_screen) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.DefaultSignalHandler(ConnectionMethod="OverrideScreenChanged", Type=typeof(Gtk.Widget))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="previous_screen" Type="Gdk.Screen" />
      </Parameters>
      <Docs>
        <param name="previous_screen">a <see cref="T:Gdk.Screen" /></param>
        <summary>Default handler for the <see cref="M:Gtk.Widget.ScreenChanged" /> event.</summary>
        <remarks>Override this method in a subclass to provide a default handler for the <see cref="M:Gtk.Widget.ScreenChanged" /> event.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnScrollEvent">
      <MemberSignature Language="C#" Value="protected virtual bool OnScrollEvent (Gdk.EventScroll evnt);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnScrollEvent(class Gdk.EventScroll evnt) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.DefaultSignalHandler(ConnectionMethod="OverrideScrollEvent", Type=typeof(Gtk.Widget))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="evnt" Type="Gdk.EventScroll" />
      </Parameters>
      <Docs>
        <param name="evnt">a <see cref="T:Gdk.EventScroll" /></param>
        <summary>Default handler for the <see cref="M:Gtk.Widget.ScrollEvent" /> event.</summary>
        <returns>a <see cref="T:System.Boolean" /></returns>
        <remarks>Override this method in a subclass to provide a default handler for the <see cref="M:Gtk.Widget.ScrollEvent" /> event.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnSelectionClearEvent">
      <MemberSignature Language="C#" Value="protected virtual bool OnSelectionClearEvent (Gdk.EventSelection evnt);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnSelectionClearEvent(class Gdk.EventSelection evnt) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.DefaultSignalHandler(ConnectionMethod="OverrideSelectionClearEvent", Type=typeof(Gtk.Widget))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="evnt" Type="Gdk.EventSelection" />
      </Parameters>
      <Docs>
        <param name="evnt">a <see cref="T:Gdk.EventSelection" /></param>
        <summary>Default handler for the <see cref="M:Gtk.Widget.SelectionClearEvent" /> event.</summary>
        <returns>a <see cref="T:System.Boolean" /></returns>
        <remarks>Override this method in a subclass to provide a default handler for the <see cref="M:Gtk.Widget.SelectionClearEvent" /> event.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnSelectionGet">
      <MemberSignature Language="C#" Value="protected virtual void OnSelectionGet (Gtk.SelectionData selection_data, uint info, uint time_);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSelectionGet(class Gtk.SelectionData selection_data, unsigned int32 info, unsigned int32 time_) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.DefaultSignalHandler(ConnectionMethod="OverrideSelectionGet", Type=typeof(Gtk.Widget))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="selection_data" Type="Gtk.SelectionData" />
        <Parameter Name="info" Type="System.UInt32" />
        <Parameter Name="time_" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="selection_data">a <see cref="T:Gtk.SelectionData" /></param>
        <param name="info">a <see cref="T:System.UInt32" /></param>
        <param name="time_">a <see cref="T:System.UInt32" /></param>
        <summary>Default handler for the <see cref="M:Gtk.Widget.SelectionGet" /> event.</summary>
        <remarks>Override this method in a subclass to provide a default handler for the <see cref="M:Gtk.Widget.SelectionGet" /> event.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnSelectionNotifyEvent">
      <MemberSignature Language="C#" Value="protected virtual bool OnSelectionNotifyEvent (Gdk.EventSelection evnt);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnSelectionNotifyEvent(class Gdk.EventSelection evnt) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.DefaultSignalHandler(ConnectionMethod="OverrideSelectionNotifyEvent", Type=typeof(Gtk.Widget))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="evnt" Type="Gdk.EventSelection" />
      </Parameters>
      <Docs>
        <param name="evnt">a <see cref="T:Gdk.EventSelection" /></param>
        <summary>Default handler for the <see cref="M:Gtk.Widget.SelectionNotifyEvent" /> event.</summary>
        <returns>a <see cref="T:System.Boolean" /></returns>
        <remarks>Override this method in a subclass to provide a default handler for the <see cref="M:Gtk.Widget.SelectionNotifyEvent" /> event.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnSelectionReceived">
      <MemberSignature Language="C#" Value="protected virtual void OnSelectionReceived (Gtk.SelectionData selection_data, uint time_);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSelectionReceived(class Gtk.SelectionData selection_data, unsigned int32 time_) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.DefaultSignalHandler(ConnectionMethod="OverrideSelectionReceived", Type=typeof(Gtk.Widget))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="selection_data" Type="Gtk.SelectionData" />
        <Parameter Name="time_" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="selection_data">a <see cref="T:Gtk.SelectionData" /></param>
        <param name="time_">a <see cref="T:System.UInt32" /></param>
        <summary>Default handler for the <see cref="M:Gtk.Widget.SelectionReceived" /> event.</summary>
        <remarks>Override this method in a subclass to provide a default handler for the <see cref="M:Gtk.Widget.SelectionReceived" /> event.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnSelectionRequestEvent">
      <MemberSignature Language="C#" Value="protected virtual bool OnSelectionRequestEvent (Gdk.EventSelection evnt);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnSelectionRequestEvent(class Gdk.EventSelection evnt) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.DefaultSignalHandler(ConnectionMethod="OverrideSelectionRequestEvent", Type=typeof(Gtk.Widget))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="evnt" Type="Gdk.EventSelection" />
      </Parameters>
      <Docs>
        <param name="evnt">a <see cref="T:Gdk.EventSelection" /></param>
        <summary>Default handler for the <see cref="M:Gtk.Widget.SelectionRequestEvent" /> event.</summary>
        <returns>a <see cref="T:System.Boolean" /></returns>
        <remarks>Override this method in a subclass to provide a default handler for the <see cref="M:Gtk.Widget.SelectionRequestEvent" /> event.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnSetScrollAdjustments">
      <MemberSignature Language="C#" Value="protected virtual void OnSetScrollAdjustments (Gtk.Adjustment hadj, Gtk.Adjustment vadj);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSetScrollAdjustments(class Gtk.Adjustment hadj, class Gtk.Adjustment vadj) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.DefaultSignalHandler(ConnectionMethod="ConnectSetScrollAdjustments", Type=typeof(Gtk.Widget))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hadj" Type="Gtk.Adjustment" />
        <Parameter Name="vadj" Type="Gtk.Adjustment" />
      </Parameters>
      <Docs>
        <param name="hadj">a horizontal plane <see cref="T:Gtk.Adjustment" /></param>
        <param name="vadj">a vertical plane <see cref="T:Gtk.Adjustment" /></param>
        <summary>Virtual method to support scrollable widgets.</summary>
        <remarks>Override this method in a subclass to support scrolling of the widget within a viewport smaller than the widget's size.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnShown">
      <MemberSignature Language="C#" Value="protected virtual void OnShown ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnShown() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.DefaultSignalHandler(ConnectionMethod="OverrideShown", Type=typeof(Gtk.Widget))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Default handler for the <see cref="M:Gtk.Widget.Shown" /> event.</summary>
        <remarks>Override this method in a subclass to provide a default handler for the <see cref="M:Gtk.Widget.Shown" /> event.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnSizeAllocated">
      <MemberSignature Language="C#" Value="protected virtual void OnSizeAllocated (Gdk.Rectangle allocation);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSizeAllocated(valuetype Gdk.Rectangle allocation) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.DefaultSignalHandler(ConnectionMethod="OverrideSizeAllocated", Type=typeof(Gtk.Widget))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="allocation" Type="Gdk.Rectangle" />
      </Parameters>
      <Docs>
        <param name="allocation">a <see cref="T:Gdk.Rectangle" /></param>
        <summary>Default handler for the <see cref="M:Gtk.Widget.SizeAllocated" /> event.</summary>
        <remarks>Override this method in a subclass to provide a default handler for the <see cref="M:Gtk.Widget.SizeAllocated" /> event.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnSizeRequested">
      <MemberSignature Language="C#" Value="protected virtual void OnSizeRequested (ref Gtk.Requisition requisition);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSizeRequested(valuetype Gtk.Requisition requisition) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.DefaultSignalHandler(ConnectionMethod="OverrideSizeRequested", Type=typeof(Gtk.Widget))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requisition" Type="Gtk.Requisition&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="requisition">a <see cref="T:Gtk.Requisition" /></param>
        <summary>Default handler for the <see cref="M:Gtk.Widget.SizeRequested" /> event.</summary>
        <remarks>Override this method in a subclass to provide a default handler for the <see cref="M:Gtk.Widget.SizeRequested" /> event.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnStateChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnStateChanged (Gtk.StateType previous_state);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStateChanged(valuetype Gtk.StateType previous_state) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.DefaultSignalHandler(ConnectionMethod="OverrideStateChanged", Type=typeof(Gtk.Widget))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="previous_state" Type="Gtk.StateType" />
      </Parameters>
      <Docs>
        <param name="previous_state">a <see cref="T:Gtk.StateType" /></param>
        <summary>Default handler for the <see cref="M:Gtk.Widget.StateChanged" /> event.</summary>
        <remarks>Override this method in a subclass to provide a default handler for the <see cref="M:Gtk.Widget.StateChanged" /> event.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnStyleSet">
      <MemberSignature Language="C#" Value="protected virtual void OnStyleSet (Gtk.Style previous_style);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStyleSet(class Gtk.Style previous_style) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.DefaultSignalHandler(ConnectionMethod="OverrideStyleSet", Type=typeof(Gtk.Widget))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="previous_style" Type="Gtk.Style" />
      </Parameters>
      <Docs>
        <param name="previous_style">a <see cref="T:Gtk.Style" /></param>
        <summary>Default handler for the <see cref="M:Gtk.Widget.StyleSet" /> event.</summary>
        <remarks>Override this method in a subclass to provide a default handler for the <see cref="M:Gtk.Widget.StyleSet" /> event.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnUnmapEvent">
      <MemberSignature Language="C#" Value="protected virtual bool OnUnmapEvent (Gdk.Event evnt);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnUnmapEvent(class Gdk.Event evnt) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.DefaultSignalHandler(ConnectionMethod="OverrideUnmapEvent", Type=typeof(Gtk.Widget))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="evnt" Type="Gdk.Event" />
      </Parameters>
      <Docs>
        <param name="evnt">a <see cref="T:Gdk.Event" /></param>
        <summary>Default handler for the <see cref="M:Gtk.Widget.UnmapEvent" /> event.</summary>
        <returns>a <see cref="T:System.Boolean" /></returns>
        <remarks>Override this method in a subclass to provide a default handler for the <see cref="M:Gtk.Widget.UnmapEvent" /> event.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnUnmapped">
      <MemberSignature Language="C#" Value="protected virtual void OnUnmapped ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnUnmapped() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.DefaultSignalHandler(ConnectionMethod="OverrideUnmapped", Type=typeof(Gtk.Widget))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Default handler for the <see cref="M:Gtk.Widget.Unmapped" /> event.</summary>
        <remarks>Override this method in a subclass to provide a default handler for the <see cref="M:Gtk.Widget.Unmapped" /> event.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnUnrealized">
      <MemberSignature Language="C#" Value="protected virtual void OnUnrealized ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnUnrealized() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.DefaultSignalHandler(ConnectionMethod="OverrideUnrealized", Type=typeof(Gtk.Widget))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Default handler for the <see cref="M:Gtk.Widget.Unrealized" /> event.</summary>
        <remarks>Override this method in a subclass to provide a default handler for the <see cref="M:Gtk.Widget.Unrealized" /> event.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnVisibilityNotifyEvent">
      <MemberSignature Language="C#" Value="protected virtual bool OnVisibilityNotifyEvent (Gdk.EventVisibility evnt);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnVisibilityNotifyEvent(class Gdk.EventVisibility evnt) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.DefaultSignalHandler(ConnectionMethod="OverrideVisibilityNotifyEvent", Type=typeof(Gtk.Widget))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="evnt" Type="Gdk.EventVisibility" />
      </Parameters>
      <Docs>
        <param name="evnt">a <see cref="T:Gdk.EventVisibility" /></param>
        <summary>Default handler for the <see cref="M:Gtk.Widget.VisibilityNotifyEvent" /> event.</summary>
        <returns>a <see cref="T:System.Boolean" /></returns>
        <remarks>Override this method in a subclass to provide a default handler for the <see cref="M:Gtk.Widget.VisibilityNotifyEvent" /> event.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnWidgetEvent">
      <MemberSignature Language="C#" Value="protected virtual bool OnWidgetEvent (Gdk.Event evnt);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnWidgetEvent(class Gdk.Event evnt) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.DefaultSignalHandler(ConnectionMethod="OverrideWidgetEvent", Type=typeof(Gtk.Widget))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="evnt" Type="Gdk.Event" />
      </Parameters>
      <Docs>
        <param name="evnt">a <see cref="T:Gdk.Event" /></param>
        <summary>Default handler for the <see cref="M:Gtk.Widget.WidgetEvent" /> event.</summary>
        <returns>a <see cref="T:System.Boolean" /></returns>
        <remarks>Override this method in a subclass to provide a default handler for the <see cref="M:Gtk.Widget.WidgetEvent" /> event.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnWidgetEventAfter">
      <MemberSignature Language="C#" Value="protected virtual void OnWidgetEventAfter (Gdk.Event evnt);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnWidgetEventAfter(class Gdk.Event evnt) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.DefaultSignalHandler(ConnectionMethod="OverrideWidgetEventAfter", Type=typeof(Gtk.Widget))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="evnt" Type="Gdk.Event" />
      </Parameters>
      <Docs>
        <param name="evnt">a <see cref="T:Gdk.Event" /></param>
        <summary>Default handler for the <see cref="M:Gtk.Widget.WidgetEventAfter" /> event.</summary>
        <remarks>Override this method in a subclass to provide a default handler for the <see cref="M:Gtk.Widget.WidgetEventAfter" /> event.</remarks>
        <since version="Gtk# 2.4" />
      </Docs>
    </Member>
    <Member MemberName="OnWindowStateEvent">
      <MemberSignature Language="C#" Value="protected virtual bool OnWindowStateEvent (Gdk.EventWindowState evnt);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnWindowStateEvent(class Gdk.EventWindowState evnt) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.DefaultSignalHandler(ConnectionMethod="OverrideWindowStateEvent", Type=typeof(Gtk.Widget))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="evnt" Type="Gdk.EventWindowState" />
      </Parameters>
      <Docs>
        <param name="evnt">a <see cref="T:Gdk.EventWindowState" /></param>
        <summary>Default handler for the <see cref="M:Gtk.Widget.WindowStateEvent" /> event.</summary>
        <returns>a <see cref="T:System.Boolean" /></returns>
        <remarks>Override this method in a subclass to provide a default handler for the <see cref="M:Gtk.Widget.WindowStateEvent" /> event.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PangoContext">
      <MemberSignature Language="C#" Value="public Pango.Context PangoContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Pango.Context PangoContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Pango.Context</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtains a <see cref="T:Pango.Context" /> with the appropriate colormap, font description and base direction for <paramref name="widget" />.</summary>
        <value />
        <remarks>
          <para>
          Unlike the context returned by <see cref="M:Gtk.Widget.CreatePangoContext" />, this context is owned by the <paramref name="widget" /> (it can be used until the screen for the <paramref name="widget" /> changes or the <paramref name="widget" /> is removed from its toplevel), and will be updated to match any changes to the <paramref name="widget" />'s attributes. 
         </para>
          <para>
          If you create and keep a <see cref="T:Pango.Layout" /> using this context, you must deal with changes to the context by calling <see cref="T:Pango.Layout.ContextChanged" /> on the layout in response to the <see cref="F:Gtk.Widget.StyleSet" /> and <see cref="F:Gtk.Widget.DirectionChanged" /> events for the <paramref name="widget" />.
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public Gtk.Widget Parent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Gtk.Widget Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Property("parent")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Gtk.Widget</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <summary>The parent widget of this <paramref name="widget" />.</summary>
        <value>The parent widget.</value>
        <remarks>Must be a Container <paramref name="widget" />,</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParentSet">
      <MemberSignature Language="C#" Value="public event Gtk.ParentSetHandler ParentSet;" />
      <MemberSignature Language="ILAsm" Value=".event class Gtk.ParentSetHandler ParentSet" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Signal("parent_set")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Gtk.ParentSetHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Raised whenever this widget's parent widget is set.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ParentWindow">
      <MemberSignature Language="C#" Value="public Gdk.Window ParentWindow { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Gdk.Window ParentWindow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Gdk.Window</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <summary>Sets or obtains <paramref name="widget" />'s parent window.</summary>
        <value>The parent window of <paramref name="widget" />.</value>
        <remarks>
          <para>
          Sets or obtains <paramref name="widget" />'s parent window.
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Path">
      <MemberSignature Language="C#" Value="public void Path (out uint path_length, out string path, out string path_reversed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Path(unsigned int32 path_length, string path, string path_reversed) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path_length" Type="System.UInt32&amp;" RefType="out" />
        <Parameter Name="path" Type="System.String&amp;" RefType="out" />
        <Parameter Name="path_reversed" Type="System.String&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="path_length">Location to store length of the path, or <see langword="null" />.</param>
        <param name="path">Location to store allocated path string, or <see langword="null" />.</param>
        <param name="path_reversed">Location to store allocated reverse path string, or <see langword="null" />.</param>
        <summary>Obtains the full path to <paramref name="widget" />.</summary>
        <remarks>
          <para>
	  The path is simply the name of a <paramref name="widget" /> and all its parents in the container hierarchy, separated by periods. The name of a <paramref name="widget" /> comes from <see cref="P:Gtk.Widget.Name" />. Paths are used to apply styles to a <paramref name="widget" /> in gtkrc configuration files. Widget names are the type of the <paramref name="widget" /> by default (e.g. "<see cref="T:Gtk.Button" />") or can be set to an application-specific value with <see cref="P:Gtk.Widget.Name" />.
	 </para>
          <para>
	  By setting the name of a <paramref name="widget" />, you allow users or theme authors to apply styles to that specific <paramref name="widget" /> in their gtkrc file. <paramref name="path_reversed_p" /> fills in the path in reverse order, i.e. starting with <paramref name="widget" />'s name instead of starting with the name of <paramref name="widget" />'s outermost ancestor.
	 </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PopColormap">
      <MemberSignature Language="C#" Value="public static void PopColormap ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void PopColormap() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Removes a colormap pushed with <see cref="M:Gtk.Widget.PushColormap" />.</summary>
        <remarks>
          <para>
          Removes a colormap pushed with <see cref="M:Gtk.Widget.PushColormap" />.
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PopCompositeChild">
      <MemberSignature Language="C#" Value="public static void PopCompositeChild ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void PopCompositeChild() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cancels the effect of a previous call to <see cref="M:Gtk.Widget.PushCompositeChild" />.</summary>
        <remarks>
          <para>
          Cancels the effect of a previous call to <see cref="M:Gtk.Widget.PushCompositeChild" />.
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PopupMenu">
      <MemberSignature Language="C#" Value="public event Gtk.PopupMenuHandler PopupMenu;" />
      <MemberSignature Language="ILAsm" Value=".event class Gtk.PopupMenuHandler PopupMenu" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Signal("popup_menu")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Gtk.PopupMenuHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Raised when this widget's popup menu is activated.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ProcessEvent">
      <MemberSignature Language="C#" Value="public bool ProcessEvent (Gdk.Event evnt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ProcessEvent(class Gdk.Event evnt) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="evnt" Type="Gdk.Event" />
      </Parameters>
      <Docs>
        <param name="evnt">A <see cref="T:Gdk.Event" />.</param>
        <summary>Rarely-used method. This method is used to emit the events on a <paramref name="widget" />.</summary>
        <returns>Return from the event emission (<see langword="true" /> if the event was handled)</returns>
        <remarks>
          <para>
          If you want to synthesize an event though, don't use this method; instead, use Gtk.Main.DoEvent so the event will behave as if it were in the event queue.
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyNotifyEvent">
      <MemberSignature Language="C#" Value="public event Gtk.PropertyNotifyEventHandler PropertyNotifyEvent;" />
      <MemberSignature Language="ILAsm" Value=".event class Gtk.PropertyNotifyEventHandler PropertyNotifyEvent" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Signal("property_notify_event")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Gtk.PropertyNotifyEventHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Emitted when a property is changed.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ProximityInEvent">
      <MemberSignature Language="C#" Value="public event Gtk.ProximityInEventHandler ProximityInEvent;" />
      <MemberSignature Language="ILAsm" Value=".event class Gtk.ProximityInEventHandler ProximityInEvent" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Signal("proximity_in_event")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Gtk.ProximityInEventHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Raised when the user is using a stylus or touch screen and their pointer comes near the widget.</summary>
        <remarks>See <see cref="T:Gdk.EventProximity" /> for context.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProximityOutEvent">
      <MemberSignature Language="C#" Value="public event Gtk.ProximityOutEventHandler ProximityOutEvent;" />
      <MemberSignature Language="ILAsm" Value=".event class Gtk.ProximityOutEventHandler ProximityOutEvent" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Signal("proximity_out_event")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Gtk.ProximityOutEventHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Raised when the user is using a stylus or touch screen and their pointer leaves the area near the widget.</summary>
        <remarks>See <see cref="T:Gdk.EventProximity" /> for context.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PushColormap">
      <MemberSignature Language="C#" Value="public static void PushColormap (Gdk.Colormap cmap);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void PushColormap(class Gdk.Colormap cmap) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cmap" Type="Gdk.Colormap" />
      </Parameters>
      <Docs>
        <param name="cmap">Colormap that is pushed by <see cref="T:Gdk.Colormap" />.</param>
        <summary>Pushes <paramref name="cmap" /> onto a global stack of colormaps.</summary>
        <remarks>
          <para>
          Pushes <paramref name="cmap" /> onto a global stack of colormaps; the topmost colormap on the stack will be used to create all <paramref name="widgets" />. Remove <paramref name="cmap" /> with <see cref="M:Gtk.Widget.PopColormap" />. There's little reason to use this method.
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PushCompositeChild">
      <MemberSignature Language="C#" Value="public static void PushCompositeChild ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void PushCompositeChild() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Makes all newly-created <paramref name="widgets" /> as composite children until the corresponding <see cref="M:Gtk.Widget.PopCompositeChild" /> call.</summary>
        <remarks>
          <para>
          A composite child is a child that's an implementation detail of the container it's inside and should not be visible to people using the container. Composite children aren't treated differently by GTK# (but see <see cref="M:Gtk.Container.Foreach" /> vs. <see cref="M:GtkContainer.Forall" />), but e.g. GUI builders might want to treat them in a different way.
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryTooltip">
      <MemberSignature Language="C#" Value="public event Gtk.QueryTooltipHandler QueryTooltip;" />
      <MemberSignature Language="ILAsm" Value=".event class Gtk.QueryTooltipHandler QueryTooltip" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Signal("query-tooltip")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Gtk.QueryTooltipHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
        <since version="Gtk# 2.12" />
      </Docs>
    </Member>
    <Member MemberName="QueueClear">
      <MemberSignature Language="C#" Value="public void QueueClear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void QueueClear() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Deprecated: Use <see cref="M:Gtk.Widget.QueueDraw()" /> instead.</summary>
        <remarks />
        <since version="Gtk# 2.4" />
      </Docs>
    </Member>
    <Member MemberName="QueueClearArea">
      <MemberSignature Language="C#" Value="public void QueueClearArea (int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void QueueClearArea(int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">a <see cref="T:System.Int32" /></param>
        <param name="y">a <see cref="T:System.Int32" /></param>
        <param name="width">a <see cref="T:System.Int32" /></param>
        <param name="height">a <see cref="T:System.Int32" /></param>
        <summary>Deprecated equivalent of <see cref="M:Gtk.Widget.QueueDrawArea()" /></summary>
        <remarks />
        <since version="Gtk# 2.4" />
      </Docs>
    </Member>
    <Member MemberName="QueueDraw">
      <MemberSignature Language="C#" Value="public void QueueDraw ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void QueueDraw() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Equivalent to calling <see cref="M:Gtk.Widget.QueueDrawArea" /> for the entire area of a <paramref name="widget" />.</summary>
        <remarks>
          <para>
          Equivalent to calling <see cref="M:Gtk.Widget.QueueDrawArea" /> for the entire area of a <paramref name="widget" />.
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueueDrawArea">
      <MemberSignature Language="C#" Value="public void QueueDrawArea (int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void QueueDrawArea(int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">y coordinate of upper-left corner of rectangle to redraw.</param>
        <param name="y">x coordinate of upper-left corner of rectangle to redraw.</param>
        <param name="width">Width of region to draw.</param>
        <param name="height">Height of region to draw.</param>
        <summary>Invalidates the rectangular area of a <paramref name="widget" />.</summary>
        <remarks>
          <para>
          Invalidates the rectangular area of <paramref name="widget" /> defined by <paramref name="x" />, <paramref name="y" />, <paramref name="width" /> and <paramref name="height" /> by calling <see cref="M:Gdk.Window.InvalidateRect" /> on the <paramref name="widget" />'s window and all its child windows. Once the main loop becomes idle (after the current batch of events has been processed, roughly), the window will receive <see cref="F:Gtk.Widget.ExposeEvent" /> events for the union of all regions that have been invalidated.
         </para>
          <para>
          Normally you would only use this method in widget implementations. You might also use it, or <see cref="M:Gdk.Window.InvalidateRect" /> directly, to schedule a redraw of a <see cref="T:Gtk.DrawingArea" /> or some portion thereof. Frequently you can just call <see cref="M:Gdk.Window.InvalidateRect" /> or <see cref="M:Gdk.Window.InvalidateRegion" /> instead of this method. Those methods will invalidate only a single window, instead of the <paramref name="widget" /> and all its children.
         </para>
          <para>
          The advantage of adding to the invalidated region compared to simply drawing immediately is efficiency; using an invalid region ensures that you only have to redraw one time.
         </para>
          <para>
         If an immediate redraw is desired, a call to <see cref="M:Gdk.Window.ProcessUpdates" /> will force an immediate refresh of the drawable.  This can be useful in situations where mouse activity requires immediate visible feedback on the widget.
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueueResize">
      <MemberSignature Language="C#" Value="public void QueueResize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void QueueResize() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Flags a <paramref name="widget" /> to have its size renegotiated; should be called when a <paramref name="widget" /> for some reason has a new <see cref="M:Gtk.Widget.SizeRequest" />.</summary>
        <remarks>
          <para>
          This method is only for use in widget implementations. One example, when you change the text in a <see cref="T:Gtk.Label" />, it queues a resize to ensure there's enough space for the new text.
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueueResizeNoRedraw">
      <MemberSignature Language="C#" Value="public void QueueResizeNoRedraw ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void QueueResizeNoRedraw() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>This function works like <see cref="M:Gtk.Widget.QueueResize()" />, except that the widget is not invalidated.</summary>
        <remarks />
        <since version="Gtk# 2.4" />
      </Docs>
    </Member>
    <Member MemberName="Realize">
      <MemberSignature Language="C#" Value="public void Realize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Realize() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates the GDK (windowing system) resources associated with a <paramref name="widget" />.</summary>
        <remarks>
          <para>
          For example, <paramref name="widget" />-&gt;window will be created when a <paramref name="widget" /> is realized. Normally realization happens implicitly; if you show a <paramref name="widget" /> and all its parent containers, then it will be realized and mapped automatically. Realizing a <paramref name="widget" /> requires all the widget's parent widgets to be realized; calling <see cref="M:Gtk.Widget.Realize" /> realizes the widget's parents in addition to <paramref name="widget" /> itself. If a <paramref name="widget" /> is not yet inside a toplevel window when you realize it, bad things will happen. 
         </para>
          <para>
          This method is primarily used in widget implementations, and isn't very useful otherwise. Many times when you think you might need it, a better approach is to connect to a event that will be called after the <paramref name="widget" /> is realized automatically, such as <see cref="F:Gtk.Widget.ExposeEvent" />. Or simply <see cref="M:Glib.SignalAttr.ConnectAfter" /> to the realize event.
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Realized">
      <MemberSignature Language="C#" Value="public event EventHandler Realized;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Realized" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Signal("realize")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Emitted when a widget is realized.</summary>
        <remarks>The default handler creates the Gdk window associated with the widget, and its ancestors.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReceivesDefault">
      <MemberSignature Language="C#" Value="public bool ReceivesDefault { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ReceivesDefault" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Property("receives-default")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <summary>Whether to make the <paramref name="widget" /> receive the default action when it is focused.</summary>
        <value>
          <see langword="true" /> if the <paramref name="true" /> will receive the default action when is focused.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="RedrawOnAllocate">
      <MemberSignature Language="C#" Value="public bool RedrawOnAllocate { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RedrawOnAllocate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <summary>Sets whether a <paramref name="widget" /> size allocation changes, the entire <paramref name="widget" /> is queued for drawing.</summary>
        <value>Returns <see langword="true" /> because it is on by Default, but returns <see langword="false" /> if you turn it off.</value>
        <remarks>
          <para>
           By default, this setting is <see langword="true" /> and the entire <paramref name="widget" /> is redrawn on every size change. If your <paramref name="widget" /> leaves the upper left are unchanged when made bigger, turning this setting on will improve performance.
         </para>
          <para>
           Note that for <see cref="F:Gtk.WidgetFlags.NoWindow" /><paramref name="widgets" /> setting this flag to <see langword="false" /> turns off all allocation on resizing: the <paramref name="widget" /> will not even redraw if its position changes; this is to allow containers that don't draw anything to avoid excess invalidations. If you set this flag on a <see cref="F:Gtk.WidgetFlags.NoWindow" /><paramref name="widget" /> that does draw on <paramref name="widget" />-&gt;window, you are responsible for invalidating both the old and new allocation of the <paramref name="widget" /> when the <paramref name="widget" /> is moved and responsible for invalidating regions newly when the <paramref name="widget" /> increases size.
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RefAccessible">
      <MemberSignature Language="C#" Value="public Atk.Object RefAccessible ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Atk.Object RefAccessible() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Atk.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets a reference to an object's <see cref="T:Atk.Object" /> implementation.</summary>
        <returns>An <see cref="T:Atk.Object" />.</returns>
        <remarks>
          <para>
          Gets a reference to an object's <see cref="T:Atk.Object" /> implementation.
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegionIntersect">
      <MemberSignature Language="C#" Value="public Gdk.Region RegionIntersect (Gdk.Region region);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Gdk.Region RegionIntersect(class Gdk.Region region) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Gdk.Region</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="region" Type="Gdk.Region" />
      </Parameters>
      <Docs>
        <param name="region">A <see cref="T:Gdk.Region" />, in the same coordinate system as <paramref name="widget" />-&gt;allocation. That is, relative to <paramref name="widget" />-&gt;window for <see cref="F:Gtk.WidgetFlags.NoWindow" /><paramref name="widgets" />; relative to the parent window of <paramref name="widget" />-&gt;window for widgets with their own window.</param>
        <summary>Computes the intersection of a <paramref name="widget" />'s area and <paramref name="region" />, returning the intersection. </summary>
        <returns> A newly allocated region holding the intersection of <paramref name="widget" /> and <paramref name="region" />. The coordinates of the return value are relative to <paramref name="widget" />-&gt;window for <see cref="F:Gtk.WidgetFlags.NoWindow" /><paramref name="widgets" />, and relative to the parent window of <paramref name="widget" />-&gt;window for widgets with their own window.</returns>
        <remarks>
          <para>
          The result may be empty, use <see cref="M:Gdk.Region.Empty" /> to check.
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAccelerator">
      <MemberSignature Language="C#" Value="public bool RemoveAccelerator (Gtk.AccelGroup accel_group, uint accel_key, Gdk.ModifierType accel_mods);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool RemoveAccelerator(class Gtk.AccelGroup accel_group, unsigned int32 accel_key, valuetype Gdk.ModifierType accel_mods) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="accel_group" Type="Gtk.AccelGroup" />
        <Parameter Name="accel_key" Type="System.UInt32" />
        <Parameter Name="accel_mods" Type="Gdk.ModifierType" />
      </Parameters>
      <Docs>
        <param name="accel_group">Accel group for this <paramref name="widget" />.</param>
        <param name="accel_key">GDK keyval of the accelerator.</param>
        <param name="accel_mods">Modifier key combination of the accelerator.</param>
        <summary>Removes an accelerator from <paramref name="widget" />, previously installed with <see cref="M:Gtk.Widget.AddAccelerator" />.</summary>
        <returns>Returns whether an accelerator was installed and could be removed.</returns>
        <remarks>
          <para>
          Removes an accelerator from <paramref name="widget" />, previously installed with <see cref="M:Gtk.Widget.AddAccelerator" />.
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveMnemonicLabel">
      <MemberSignature Language="C#" Value="public void RemoveMnemonicLabel (Gtk.Widget label);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveMnemonicLabel(class Gtk.Widget label) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="label" Type="Gtk.Widget" />
      </Parameters>
      <Docs>
        <param name="label">a <see cref="T:Gtk.Widget" /></param>
        <summary>Removes a widget from the list of mnemonic labels for this widget.</summary>
        <remarks>The widget must have previously been added to the list with <see cref="M:Gtk.Widget.AddMnemonicLabel()" />.</remarks>
        <since version="Gtk# 2.4" />
      </Docs>
    </Member>
    <Member MemberName="RenderIcon">
      <MemberSignature Language="C#" Value="public Gdk.Pixbuf RenderIcon (string stock_id, Gtk.IconSize size, string detail);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Gdk.Pixbuf RenderIcon(string stock_id, valuetype Gtk.IconSize size, string detail) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Gdk.Pixbuf</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stock_id" Type="System.String" />
        <Parameter Name="size" Type="Gtk.IconSize" />
        <Parameter Name="detail" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="stock_id">A stock ID.</param>
        <param name="size">A stock size.</param>
        <param name="detail">Render detail to pass to theme engine.</param>
        <summary>A convenience method that uses the theme engine and RC file settings for <paramref name="widget" /> to look up <paramref name="stock_id" /> and render it to a <see cref="T:Gdk.Pixbuf" />.</summary>
        <returns>A new <see cref="T:Gdk.Pixbuf" />, or <see langword="null" /> if the <paramref name="stock_id" /> wasn't known.</returns>
        <remarks>
          <para>
          The <paramref name="stock_id" /> should be a stock icon ID such as <see cref="P:Gtk.Stock.Open" /> or <see cref="P:Gtk.Stock.Ok" />. <paramref name="size" /> should be a size such as <see cref="F:Gtk.IconSize.Menu" />. <paramref name="detail" /> should be a string that identifies the <paramref name="widget" /> or code doing the rendering, so that theme engines can special-case rendering for that <paramref name="widget" /> or code.
         </para>
          <para>
          The pixels in the returned <see cref="T:Gdk.Pixbuf" /> are shared with the rest of the application and should not be modified. The <see cref="T:Gdk.Pixbuf" /> should be freed after use with <see cref="M:Glib.Object.Unref" />.
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reparent">
      <MemberSignature Language="C#" Value="public void Reparent (Gtk.Widget new_parent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reparent(class Gtk.Widget new_parent) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="new_parent" Type="Gtk.Widget" />
      </Parameters>
      <Docs>
        <param name="new_parent">A <see cref="T:Gtk.Container" /> to move the <paramref name="widget" /> into.</param>
        <summary>Moves a <paramref name="widget" /> from one <see cref="T:Gtk.Container" /> to another, handling reference count issues to avoid destroying the <paramref name="widget" />.</summary>
        <remarks>
          <para>
          Moves a <paramref name="widget" /> from one <see cref="T:Gtk.Container" /> to another, handling reference count issues to avoid destroying the <paramref name="widget" />.
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Requisition">
      <MemberSignature Language="C#" Value="public Gtk.Requisition Requisition { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Gtk.Requisition Requisition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Gtk.Requisition</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets or Sets the widget's requisition</summary>
        <value>a <see cref="T:Gtk.Requisition" /> representing the widget's requisition</value>
        <remarks>
        </remarks>
        <since version="Gtk# 2.4" />
      </Docs>
    </Member>
    <Member MemberName="ResetRcStyles">
      <MemberSignature Language="C#" Value="public void ResetRcStyles ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetRcStyles() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reset the styles of <paramref name="widget" /> and all descendents, so when they are looked up again, they get the correct values for the currently loaded RC file settings.</summary>
        <remarks>
          <para>
          This method is not useful for applications.
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetShapes">
      <MemberSignature Language="C#" Value="public void ResetShapes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetShapes() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Recursively resets the shape on  <paramref name="widget" /> and its descendants.</summary>
        <remarks>
          <para>
          Recursively resets the shape on this <paramref name="widget" /> and its descendants.
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RootWindow">
      <MemberSignature Language="C#" Value="public Gdk.Window RootWindow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Gdk.Window RootWindow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Gdk.Window</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The root window this Widget is attached to.</summary>
        <value>a <see cref="T:Gdk.Window" /></value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Screen">
      <MemberSignature Language="C#" Value="public Gdk.Screen Screen { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Gdk.Screen Screen" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Gdk.Screen</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtains the <see cref="T:Gdk.Screen" /> from the toplevel window associated with this <paramref name="widget" />.</summary>
        <value>The <see cref="T:Gdk.Screen" /> for the toplevel for this <paramref name="widget" />.</value>
        <remarks>
          <para>
	  This method can only be called after the <paramref name="widget" /> has been added to a widget hierarchy with a <see cref="T:Gtk.Window" /> at the top. 
	 </para>
          <para>
	  In general, you should only create screen specific resources when a <paramref name="widget" /> has been realized, and you should free those resources when the <paramref name="widget" /> is unrealized.
	 </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScreenChanged">
      <MemberSignature Language="C#" Value="public event Gtk.ScreenChangedHandler ScreenChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class Gtk.ScreenChangedHandler ScreenChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Signal("screen_changed")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Gtk.ScreenChangedHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Emitted when the screen has changed.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ScrollEvent">
      <MemberSignature Language="C#" Value="public event Gtk.ScrollEventHandler ScrollEvent;" />
      <MemberSignature Language="ILAsm" Value=".event class Gtk.ScrollEventHandler ScrollEvent" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Signal("scroll_event")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Gtk.ScrollEventHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Raised when the widget is scrolled.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="SelectionClearEvent">
      <MemberSignature Language="C#" Value="public event Gtk.SelectionClearEventHandler SelectionClearEvent;" />
      <MemberSignature Language="ILAsm" Value=".event class Gtk.SelectionClearEventHandler SelectionClearEvent" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Signal("selection_clear_event")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Gtk.SelectionClearEventHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Raised when the current selection is cleared.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="SelectionGet">
      <MemberSignature Language="C#" Value="public event Gtk.SelectionGetHandler SelectionGet;" />
      <MemberSignature Language="ILAsm" Value=".event class Gtk.SelectionGetHandler SelectionGet" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Signal("selection_get")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Gtk.SelectionGetHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Raised when this widget gets a selection from the clipboard.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="SelectionNotifyEvent">
      <MemberSignature Language="C#" Value="public event Gtk.SelectionNotifyEventHandler SelectionNotifyEvent;" />
      <MemberSignature Language="ILAsm" Value=".event class Gtk.SelectionNotifyEventHandler SelectionNotifyEvent" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Signal("selection_notify_event")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Gtk.SelectionNotifyEventHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Emitted when a selection is made.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="SelectionReceived">
      <MemberSignature Language="C#" Value="public event Gtk.SelectionReceivedHandler SelectionReceived;" />
      <MemberSignature Language="ILAsm" Value=".event class Gtk.SelectionReceivedHandler SelectionReceived" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Signal("selection_received")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Gtk.SelectionReceivedHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Raised when this widget is the destination of a received selection.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="SelectionRequestEvent">
      <MemberSignature Language="C#" Value="public event Gtk.SelectionRequestEventHandler SelectionRequestEvent;" />
      <MemberSignature Language="ILAsm" Value=".event class Gtk.SelectionRequestEventHandler SelectionRequestEvent" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Signal("selection_request_event")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Gtk.SelectionRequestEventHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Raised whenever the widget receives a request for a selection.</summary>
        <remarks>TODO: explain more about the X selection model </remarks>
      </Docs>
    </Member>
    <Member MemberName="SendExpose">
      <MemberSignature Language="C#" Value="public int SendExpose (Gdk.Event evnt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 SendExpose(class Gdk.Event evnt) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="evnt" Type="Gdk.Event" />
      </Parameters>
      <Docs>
        <param name="evnt">A <see cref="F:Gtk.Widget.ExposeEvent" />.</param>
        <summary>Very rarely-used method. This method is used to emit an <see cref="F:Gtk.Widget.ExposeEvent" /> events on a <paramref name="widget" />.</summary>
        <returns>Return from the event emission (<see langword="true" /> if the event was handled).</returns>
        <remarks>
          <para>
          This method is not normally used directly. The only time it is used is when propagating an <see cref="F:Gtk.Widget.ExposeEvent" /> to a child <see cref="F:Gtk.WidgetFlags.NoWindow" /><paramref name="widget" />, and that is normally done using <see cref="M:Gtk.Container.PropagateExpose" />. If you want to force an area of a window to be redrawn, use <see cref="M:Gdk.Window.InvalidateRect" /> or <see cref="M:Gdk.Window.InvalidateRegion" />. To cause the redraw to be done immediately, follow that call with a call to <see cref="M:Gdk.Window.ProcessUpdates" />.
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sensitive">
      <MemberSignature Language="C#" Value="public bool Sensitive { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Sensitive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Property("sensitive")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <summary>Sets the sensitivity of the <see cref="T:Gtk.Widget" />. A widget is sensitive if the user can interact with it, otherwise, it is grayed.</summary>
        <value>
          <see langword="true" /> if the <paramref name="widget" /> responds to input.</value>
        <remarks>
          <para>Insensitive widgets are "grayed out" and the user can't
interact with them. Insensitive widgets are known as
"inactive", "disabled", or "ghosted" in some other toolkits.
The sensitivity of a widget determines whether it will receive
certain events (e.g. button or key presses).</para>
          <para>
If the ancestor (parent) widget sesitivity is set to false,
it does not matter what the sensitivity property have,
the widget will not be sensitive. Use
<c>widget.Parent.Sensitive</c>
to check whether the ancestor widget is sensitive or not.
</para>
          <see cref="P:Gtk.Widget.Parent" />
          <see cref="M:Gtk.Widget.GetAncestor(uint)" />
          <para>
When the sensitive property is set to false, the widget
property <see cref="P:Gtk.Widget.CanDefault" /> will return false.
</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetAccelPath">
      <MemberSignature Language="C#" Value="public void SetAccelPath (string accel_path, Gtk.AccelGroup accel_group);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAccelPath(string accel_path, class Gtk.AccelGroup accel_group) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="accel_path" Type="System.String" />
        <Parameter Name="accel_group" Type="Gtk.AccelGroup" />
      </Parameters>
      <Docs>
        <param name="accel_path">Path used to look up the the accelerator.</param>
        <param name="accel_group">A <see cref="T:Gtk.AccelGroup" />.</param>
        <summary>Given an accelerator group, <paramref name="accel_group" />, and an accelerator path, <paramref name="accel_path" />, sets up an accelerator in <paramref name="accel_group" /> so whenever the key binding that is defined for <paramref name="accel_path" /> is pressed, <paramref name="widget" /> will be activated.</summary>
        <remarks>
          <para>
          This removes any accelerators (for any accelerator group) installed by previous calls to <see cref="M:Gtk.Widget.SetAccelPath" />. Associating accelerators with paths allows them to be modified by the user and the modifications to be saved for future use.
         </para>
          <para>
          This is a low level method that would most likely be used by a menu creation system like <see cref="T:Gtk.ItemFactory" />. If you use <see cref="T:Gtk.ItemFactory" />, setting up accelerator paths will be done automatically.
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetFlag">
      <MemberSignature Language="C#" Value="public void SetFlag (Gtk.WidgetFlags flag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetFlag(valuetype Gtk.WidgetFlags flag) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="flag" Type="Gtk.WidgetFlags" />
      </Parameters>
      <Docs>
        <param name="flag">a <see cref="T:Gtk.WidgetFlags" /> to set</param>
        <summary>Convenience method to set a flag.</summary>
        <remarks>None.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetScrollAdjustments">
      <MemberSignature Language="C#" Value="public bool SetScrollAdjustments (Gtk.Adjustment hadjustment, Gtk.Adjustment vadjustment);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool SetScrollAdjustments(class Gtk.Adjustment hadjustment, class Gtk.Adjustment vadjustment) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hadjustment" Type="Gtk.Adjustment" />
        <Parameter Name="vadjustment" Type="Gtk.Adjustment" />
      </Parameters>
      <Docs>
        <param name="hadjustment">An adjustment for horizontal scrolling, or <see langword="null" />.</param>
        <param name="vadjustment">An adjustment for vertical scrolling, or <see langword="null" />.</param>
        <summary>For <paramref name="widgets" /> that support scrolling, sets the scroll adjustments.</summary>
        <returns>Returns <see langword="true" /> if the <paramref name="widget" /> supports scrolling.</returns>
        <remarks>
          <para>
          For <paramref name="widgets" /> that don't support scrolling, does nothing and returns <see langword="false" />. <paramref name="Widgets" /> that don't support scrolling can be scrolled by placing them in a <see cref="T:Gtk.ViewPort" />, which does support scrolling.
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetSizeRequest">
      <MemberSignature Language="C#" Value="public void SetSizeRequest (int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetSizeRequest(int32 width, int32 height) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="width">Width <paramref name="widget" /> should request, or -1 to unset.</param>
        <param name="height">Weight <paramref name="widget" /> should request, or -1 to unset.</param>
        <summary>Sets the minimum size of a <paramref name="widget" />; that is, the <paramref name="widget" />'s size request will be <paramref name="width" /> by <paramref name="height" />.</summary>
        <remarks>
          <para>
          You can use this method to force a <paramref name="widget" /> to be either larger or smaller than it normally would be. In most cases, <see cref="M:Gtk.Window.SetDefaultSize" /> is a better choice for toplevel windows than this method; setting the default size will still allow users to shrink the window. Setting the size request will force them to leave the window at least as large as the size request. When dealing with window sizes, <see cref="M:Gtk.Window.SetGeometryHints" /> can be a useful method as well.
         </para>
          <para>
          Note the inherent danger of setting any fixed size - themes, translations into other languages, different fonts, and user action can all change the appropriate size for a given <paramref name="widget" />. So, it's basically impossible to hardcode a size that will always be correct. The size request of a <paramref name="widget" /> is the smallest size a <paramref name="widget" /> can accept while still methoding well and drawing itself correctly. However in some strange cases a <paramref name="widget" /> may be allocated less than its requested size, and in many cases a <paramref name="widget" /> may be allocated more space than it requested. 
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Settings">
      <MemberSignature Language="C#" Value="public Gtk.Settings Settings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Gtk.Settings Settings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Gtk.Settings</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtains the settings object holding the settings (global property settings, RC file information, etc) used for this <paramref name="widget" />.</summary>
        <value>The relevant <see cref="T:Gtk.Settings" /> object.</value>
        <remarks>
          <para>
          Note that this property can only be called when the <see cref="T:Gtk.Widget" /> is attached to a toplevel, since the settings object is specific to a particular <see cref="T:Gdk.Screen" />.
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetUposition">
      <MemberSignature Language="C#" Value="public void SetUposition (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetUposition(int32 x, int32 y) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">a <see cref="T:System.Int32" /></param>
        <param name="y">a <see cref="T:System.Int32" /></param>
        <summary>Deprecated way to set the position of a widget.</summary>
        <remarks>The funny "u" in the name comes from the "user position" hint specified by the X Window System, and exists for legacy reasons. This function does not work if a widget is inside a container; it is only really useful on <see cref="T:Gtk.Window" />.</remarks>
        <since version="Gtk# 2.4" />
      </Docs>
    </Member>
    <Member MemberName="SetUsize">
      <MemberSignature Language="C#" Value="public void SetUsize (int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetUsize(int32 width, int32 height) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="width">a <see cref="T:System.Int32" /></param>
        <param name="height">a <see cref="T:System.Int32" /></param>
        <summary>Sets the minimum size of a widget</summary>
        <remarks>
          <see cref="M:Gtk.Widget.SetUsize()" /> is deprecated and should not be used in newly-written code.</remarks>
        <since version="Gtk# 2.4" />
      </Docs>
    </Member>
    <Member MemberName="ShapeCombineMask">
      <MemberSignature Language="C#" Value="public void ShapeCombineMask (Gdk.Pixmap shape_mask, int offset_x, int offset_y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ShapeCombineMask(class Gdk.Pixmap shape_mask, int32 offset_x, int32 offset_y) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="shape_mask" Type="Gdk.Pixmap" />
        <Parameter Name="offset_x" Type="System.Int32" />
        <Parameter Name="offset_y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="shape_mask">Shape to be added, or <see langword="null" /> to remove an existing shape.</param>
        <param name="offset_x">X position of shape mask with respect to the window.</param>
        <param name="offset_y">Y position of shape mask with respect to the window.</param>
        <summary>Sets a shape for this <paramref name="widget" />'s GDK window. This allows for transparent windows etc., see <see cref="M:Gdk.Window.ShapeCombineMask" /> for more information.</summary>
        <remarks>
          <para>
          Sets a shape for this <paramref name="widget" />'s GDK window. This allows for transparent windows etc., see <see cref="M:Gdk.Window.ShapeCombineMask" /> for more information.
         </para>
        </remarks>
        <since version="Gtk# 2.4" />
      </Docs>
    </Member>
    <Member MemberName="Show">
      <MemberSignature Language="C#" Value="public void Show ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Show() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Flags a <paramref name="widget" /> to be displayed.</summary>
        <remarks>
          <para>
          Any <paramref name="widget" /> that isn't shown will not appear on the screen. If you want to show all the <paramref name="widgets" /> in a container, it's easier to call <see cref="M:Gtk.Widget.ShowAll" /> on the container, instead of individually showing the <paramref name="widgets" />.
         </para>
          <para>
          Remember that you have to show the containers containing a <paramref name="widget" />, in addition to the <paramref name="widget" /> itself, before it will appear onscreen. And that when a toplevel container is shown, it is immediately realized and mapped; other shown <paramref name="widgets" /> are realized and mapped when their toplevel container is realized and mapped.
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowAll">
      <MemberSignature Language="C#" Value="public void ShowAll ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ShowAll() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Recursively shows a <paramref name="widget" />, and any child <paramref name="widgets" /> (if the widget is a container).</summary>
        <remarks>
          <para>
          Recursively shows a <paramref name="widget" />, and any child <paramref name="widgets" /> (if the widget is a container).
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Shown">
      <MemberSignature Language="C#" Value="public event EventHandler Shown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Shown" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Signal("show")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Raised when the widget is shown.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ShowNow">
      <MemberSignature Language="C#" Value="public void ShowNow ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ShowNow() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Shows a <paramref name="widget" />.</summary>
        <remarks>
          <para>
          If the <paramref name="widget" /> is an unmapped toplevel <paramref name="widget" />, a <see cref="T:Gtk.Window" /> that has not yet been shown, enter the main loop and wait for the window to actually be mapped. Be careful, because the main loop is running, anything can happen during this method.
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SizeAllocate">
      <MemberSignature Language="C#" Value="public void SizeAllocate (Gdk.Rectangle allocation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SizeAllocate(valuetype Gdk.Rectangle allocation) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="allocation" Type="Gdk.Rectangle" />
      </Parameters>
      <Docs>
        <param name="allocation">A position and size to be allocated to <paramref name="widget" />.</param>
        <summary>This method is only used by <see cref="T:Gtk.Container" /> subclasses, to assign a size and position to their child <paramref name="widgets" />.</summary>
        <remarks>
          <para>
          This fuction is only used by <see cref="T:Gtk.Container" /> subclasses, to assign a size and position to their child <paramref name="widgets" />.
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SizeAllocated">
      <MemberSignature Language="C#" Value="public event Gtk.SizeAllocatedHandler SizeAllocated;" />
      <MemberSignature Language="ILAsm" Value=".event class Gtk.SizeAllocatedHandler SizeAllocated" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Signal("size_allocate")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Gtk.SizeAllocatedHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Raised when size is allocated for this widget.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="SizeRequest">
      <MemberSignature Language="C#" Value="public Gtk.Requisition SizeRequest ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype Gtk.Requisition SizeRequest() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Gtk.Requisition</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Obtains the preferred size of a <paramref name="widget" />.</summary>
        <returns>a <see cref="T:Gtk.Requisition" /></returns>
        <remarks>
          <para>
	  The container uses this information to arrange its child widgets and decide what size allocations to give them with <see cref="M:Gtk.Widget.SizeAllocate" />.
	 </para>
          <para>
	  You can also call this method from an application, with some caveats. Most notably, getting a size request requieres the <paramref name="widget" /> to be associated with a screen, because font information may be needed. Multihead-aware applications should keep this in mind.
	 </para>
          <para>
	  Also remember that the size request is not necessarily the size a <paramref name="widget" /> will actually be allocated.
	 </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SizeRequested">
      <MemberSignature Language="C#" Value="public event Gtk.SizeRequestedHandler SizeRequested;" />
      <MemberSignature Language="ILAsm" Value=".event class Gtk.SizeRequestedHandler SizeRequested" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Signal("size_request")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Gtk.SizeRequestedHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Raised when this widget needs to notify another object of its preferred size.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="public Gtk.StateType State { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Gtk.StateType State" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Gtk.StateType</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Sets or obtains the state of a <paramref name="widget" /> (insensitive, prelighted, etc.).</summary>
        <value>New state for <paramref name="widget" />.</value>
        <remarks>
          <para>Usually you should set the state using wrapper fuctions such as <see cref="P:Gtk.Widget.Sensitive" />. This property is for use in widget implementations. This property should not be used to check the state of a Gtk.Checkbutton or Gtk.ToggleButton, use <see cref="P:Gtk.ToggleButton.Active" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StateChanged">
      <MemberSignature Language="C#" Value="public event Gtk.StateChangedHandler StateChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class Gtk.StateChangedHandler StateChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Signal("state_changed")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Gtk.StateChangedHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Raised when the state of the widget changes.</summary>
        <remarks>See <see cref="T:Gtk.StateType" /> for the possible states of a widget.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Style">
      <MemberSignature Language="C#" Value="public Gtk.Style Style { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Gtk.Style Style" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Property("style")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Gtk.Style</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <summary>The style of the <paramref name="widget" />.</summary>
        <value>A style.</value>
        <remarks>Which contains information about how it will look (colors etc).</remarks>
      </Docs>
    </Member>
    <Member MemberName="StyleGetProperty">
      <MemberSignature Language="C#" Value="public object StyleGetProperty (string property_name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object StyleGetProperty(string property_name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property_name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="property_name">The name of a style property.</param>
        <summary>Obtains the value of a style property of <paramref name="widget" />.</summary>
        <returns>The property value. This can be one of the following types: <see cref="T:System.Boolean" />, <see cref="T:System.Int32" />, <see cref="T:System.UInt32" />, <see cref="T:System.Int64" />, <see cref="T:System.UInt64" />,
<see cref="T:System.Enum" />, <see cref="T:System.Single" />, <see cref="T:System.Double" />, <see cref="T:System.String" />, <see cref="T:System.IntPtr" />
or <see cref="T:GLib.Object" />.</returns>
        <remarks />
        <since version="Gtk# 2.4" />
      </Docs>
    </Member>
    <Member MemberName="StyleSet">
      <MemberSignature Language="C#" Value="public event Gtk.StyleSetHandler StyleSet;" />
      <MemberSignature Language="ILAsm" Value=".event class Gtk.StyleSetHandler StyleSet" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Signal("style_set")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Gtk.StyleSetHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Raised when a <see cref="T:Gtk.Style" /> is set for this widget.t</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ThawChildNotify">
      <MemberSignature Language="C#" Value="public void ThawChildNotify ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ThawChildNotify() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reverts the effect of a previous call to <see cref="M:Gtk.Widget.FreezeChildNotify" />.</summary>
        <remarks>
          <para>
          Reverts the effect of a previous call to <see cref="M:Gtk.Widget.FreezeChildNotify" />. This causes all queued <see cref="F:Gtk.Widget.ChildNotified" /> events on <paramref name="widget" /> to be emitted.
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TooltipMarkup">
      <MemberSignature Language="C#" Value="public string TooltipMarkup { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TooltipMarkup" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Property("tooltip-markup")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <since version="Gtk# 2.12" />
      </Docs>
    </Member>
    <Member MemberName="TooltipText">
      <MemberSignature Language="C#" Value="public string TooltipText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TooltipText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Property("tooltip-text")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <since version="Gtk# 2.12" />
      </Docs>
    </Member>
    <Member MemberName="TooltipWindow">
      <MemberSignature Language="C#" Value="public Gtk.Window TooltipWindow { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Gtk.Window TooltipWindow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Gtk.Window</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <since version="Gtk# 2.12" />
      </Docs>
    </Member>
    <Member MemberName="Toplevel">
      <MemberSignature Language="C#" Value="public Gtk.Widget Toplevel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Gtk.Widget Toplevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Gtk.Widget</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtains the topmost <paramref name="widget" /> in the container hierarchy <paramref name="widget" /> is a part of.</summary>
        <value>The topmost ancestor of <paramref name="widget" />, or <paramref name="widget" /> itself if there's no ancestor.</value>
        <remarks>
          <para>
          Note the difference in behavior against <see cref="P:Gtk.Widget.GetAncestor" />, would return <see langword="null" /> if <paramref name="widget" /> wasn't inside a toplevel window, and if the window was inside a GtkWindow-derived <paramref name="widget" /> which was in turn inside the toplevel <see cref="T:Gtk.Window" />. While the second case may seem unlikely, it actually happens when a <see cref="T:Gtk.Plug" /> is embedded inside a <see cref="T:Gtk.Socket" /> within the same application. To reliably find the toplevel <see cref="T:Gtk.Window" />, use <see cref="P:Gtk.Widget.TopLevel" /> and check if the <see cref="F:Gtk.WidgetFlags.TopLevel" /> flag is set on the result.
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateCoordinates">
      <MemberSignature Language="C#" Value="public bool TranslateCoordinates (Gtk.Widget dest_widget, int src_x, int src_y, out int dest_x, out int dest_y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TranslateCoordinates(class Gtk.Widget dest_widget, int32 src_x, int32 src_y, int32 dest_x, int32 dest_y) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dest_widget" Type="Gtk.Widget" />
        <Parameter Name="src_x" Type="System.Int32" />
        <Parameter Name="src_y" Type="System.Int32" />
        <Parameter Name="dest_x" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="dest_y" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="dest_widget">A <see cref="T:Gtk.Widget" />.</param>
        <param name="src_x">X position relative to source <paramref name="widget" />.</param>
        <param name="src_y">Y position relative to source <paramref name="widget" />.</param>
        <param name="dest_x">Location to store X position relative to <paramref name="dest_widget" />.</param>
        <param name="dest_y">Location to store Y position relative to <paramref name="dest_widget" />.</param>
        <summary>Translate coordinates relative to <paramref name="widget" />'s allocation to coordinates relative to <paramref name="dest_widget" />'s allocations.</summary>
        <returns>Returns <see langword="false" /> if either <paramref name="widget" /> was not realized, or there was no common ancestor. In this case, nothing is stored in <paramref name="*dest_x" /> and <paramref name="*dest_y" />. Otherwise <see langword="true" />.</returns>
        <remarks>
          <para>
	  In order to perform this operation, both widgets must be realized, and must share a common toplevel. 
	 </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TriggerTooltipQuery">
      <MemberSignature Language="C#" Value="public void TriggerTooltipQuery ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TriggerTooltipQuery() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
        <since version="Gtk# 2.12" />
      </Docs>
    </Member>
    <Member MemberName="Unmap">
      <MemberSignature Language="C#" Value="public void Unmap ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Unmap() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Causes a <paramref name="widget" /> to be unmapped if it's currently mapped.</summary>
        <remarks>
          <para>
          This method is only for use in widget implementations.
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnmapEvent">
      <MemberSignature Language="C#" Value="public event Gtk.UnmapEventHandler UnmapEvent;" />
      <MemberSignature Language="ILAsm" Value=".event class Gtk.UnmapEventHandler UnmapEvent" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Signal("unmap_event")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Gtk.UnmapEventHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Raised whenever this widget (or its parent, if <see cref="M:Gtk.Widget.ChildVisible" /> is true for the parent) is told to hide itself.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Unmapped">
      <MemberSignature Language="C#" Value="public event EventHandler Unmapped;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Unmapped" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Signal("unmap")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Raised when the widget is unmapped on the screen.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Unparent">
      <MemberSignature Language="C#" Value="public void Unparent ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Unparent() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Should be called by implementations of the remove method on <see cref="T:Gtk.Container" />, to dissociate a child from the container.</summary>
        <remarks>
          <para>
          This method is only for use in widget implementations.
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Unrealize">
      <MemberSignature Language="C#" Value="public void Unrealize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Unrealize() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Causes a <paramref name="widget" /> to be unrealized (frees all GDK resources associated with the widget).</summary>
        <remarks>
          <para>
          This method is only useful in widget implementations.
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Unrealized">
      <MemberSignature Language="C#" Value="public event EventHandler Unrealized;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Unrealized" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Signal("unrealize")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Raised when a widget is unrealized.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="VisibilityNotifyEvent">
      <MemberSignature Language="C#" Value="public event Gtk.VisibilityNotifyEventHandler VisibilityNotifyEvent;" />
      <MemberSignature Language="ILAsm" Value=".event class Gtk.VisibilityNotifyEventHandler VisibilityNotifyEvent" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Signal("visibility_notify_event")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Gtk.VisibilityNotifyEventHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Raised whenever the visibility state of the widget changes--- partially visible or fully visible, for example.</summary>
        <remarks>It may be preferable to handle a <see cref="T:Gtk.Widget.ExposeEvent" />instead.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Visible">
      <MemberSignature Language="C#" Value="public bool Visible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Visible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Property("visible")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <summary>Whether the <paramref name="widget" /> is visible.</summary>
        <value>
          <see langword="true" /> if the widget is meant to be visible.</value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Visual">
      <MemberSignature Language="C#" Value="public Gdk.Visual Visual { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Gdk.Visual Visual" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Gdk.Visual</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtains the visual that will be used to render <paramref name="widget" />.</summary>
        <value>The visual for <paramref name="widget" />.</value>
        <remarks>
          <para>
          Obtains the visual that will be used to render <paramref name="widget" />.
         </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WidgetEvent">
      <MemberSignature Language="C#" Value="public event Gtk.WidgetEventHandler WidgetEvent;" />
      <MemberSignature Language="ILAsm" Value=".event class Gtk.WidgetEventHandler WidgetEvent" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Signal("event")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Gtk.WidgetEventHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Emits the WidgetEvent.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="WidgetEventAfter">
      <MemberSignature Language="C#" Value="public event Gtk.WidgetEventAfterHandler WidgetEventAfter;" />
      <MemberSignature Language="ILAsm" Value=".event class Gtk.WidgetEventAfterHandler WidgetEventAfter" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Signal("event_after")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Gtk.WidgetEventAfterHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Emits the WidgetEventAfter.</summary>
        <remarks />
        <since version="Gtk# 2.4" />
      </Docs>
    </Member>
    <Member MemberName="WidgetFlags">
      <MemberSignature Language="C#" Value="public Gtk.WidgetFlags WidgetFlags { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Gtk.WidgetFlags WidgetFlags" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Gtk.WidgetFlags</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Contains Widget specific flags values.</summary>
        <value>a <see cref="T:Gtk.WidgetFlags" /></value>
        <remarks />
        <since version="Gtk# 2.4" />
      </Docs>
    </Member>
    <Member MemberName="WidthRequest">
      <MemberSignature Language="C#" Value="public int WidthRequest { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WidthRequest" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Property("width-request")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <summary>Override for the width request for the <paramref name="widget" />.</summary>
        <value>The width of the <paramref name="widget" />.</value>
        <remarks>Or -1 if natural request should be used.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WindowStateEvent">
      <MemberSignature Language="C#" Value="public event Gtk.WindowStateEventHandler WindowStateEvent;" />
      <MemberSignature Language="ILAsm" Value=".event class Gtk.WindowStateEventHandler WindowStateEvent" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Signal("window_state_event")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Gtk.WindowStateEventHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Emitted when the Window state changes.</summary>
        <remarks />
      </Docs>
    </Member>
  </Members>
</Type>
