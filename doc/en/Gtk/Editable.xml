<Type Name="Editable" FullName="Gtk.Editable">
  <TypeSignature Language="C#" Maintainer="auto" Value="public interface Editable : GLib.IWrapper" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract Editable implements class GLib.IWrapper" />
  <AssemblyInfo>
    <AssemblyName>gtk-sharp</AssemblyName>
    <AssemblyPublicKey>
    </AssemblyPublicKey>
    <AssemblyVersion>2.12.0.0</AssemblyVersion>
  </AssemblyInfo>
  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
  <Interfaces>
    <Interface>
      <InterfaceName>GLib.IWrapper</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Interface for text-editing widgets.</summary>
    <remarks />
  </Docs>
  <Members>
    <Member MemberName="Changed">
      <MemberSignature Language="C#" Value="public event EventHandler Changed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Changed" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Raised when the user has changed the contents of the widget.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="CopyClipboard">
      <MemberSignature Language="C#" Value="public void CopyClipboard ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyClipboard() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Causes the characters in the current selection to be copied to the clipboard.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="CutClipboard">
      <MemberSignature Language="C#" Value="public void CutClipboard ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CutClipboard() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Causes the characters in the current selection to be copied to the clipboard and then deleted from the widget.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="DeleteSelection">
      <MemberSignature Language="C#" Value="public void DeleteSelection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DeleteSelection() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Causes the characters in the current selection to be deleted.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="DeleteText">
      <MemberSignature Language="C#" Value="public void DeleteText (int start_pos, int end_pos);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DeleteText(int32 start_pos, int32 end_pos) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start_pos" Type="System.Int32" />
        <Parameter Name="end_pos" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="start_pos">An integer; the start position</param>
        <param name="end_pos">An integer; the end position</param>
        <summary>Deletes a sequence of characters. The characters that are deleted are those characters at positions from <paramref name="start_pos" /> up to, but not including <paramref name="end_pos" />. If <paramref name="end_pos" /> is negative, then the the characters deleted will be those characters from  <paramref name="start_pos" /> to the end of the text.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public string GetChars (int start_pos, int end_pos);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetChars(int32 start_pos, int32 end_pos) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start_pos" Type="System.Int32" />
        <Parameter Name="end_pos" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="start_pos">An integer; the start position</param>
        <param name="end_pos">An integer; the end position</param>
        <summary>Retrieves a sequence of characters. The characters that are retrieved are those characters at positions from <paramref name="start_pos" /> up to, but not including <paramref name="end_pos" />. If <paramref name="end_pos" /> is negative, then the the characters retrieved will be those characters from  <paramref name="start_pos" /> to the end of the text.</summary>
        <returns>The characters between <paramref name="start_pos" /> and (but not including) <paramref name="end_pos" />.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="GetSelectionBounds">
      <MemberSignature Language="C#" Value="public bool GetSelectionBounds (out int start, out int end);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GetSelectionBounds(int32 start, int32 end) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="end" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="start">An IntPtr to store the start position in.</param>
        <param name="end">An IntPtr to store the end position in.</param>
        <summary>Gets the current selection bounds, if there is a selection</summary>
        <returns>Boolean, TRUE if there is a selection.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="InsertText">
      <MemberSignature Language="C#" Value="public void InsertText (string new_text, ref int position);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InsertText(string new_text, int32 position) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="new_text" Type="System.String" />
        <Parameter Name="position" Type="System.Int32&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="new_text">A string to insert.</param>
        <param name="position">A pointer to the position within the Editable object for inserting the string.</param>
        <summary>Inserts <paramref name="new_text" /> at <paramref name="position" />.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="IsEditable">
      <MemberSignature Language="C#" Value="public bool IsEditable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEditable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <summary>Whether or not the user can edit the text in the editable widget or not.</summary>
        <value>A boolean; TRUE if the user can edit the text.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="PasteClipboard">
      <MemberSignature Language="C#" Value="public void PasteClipboard ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PasteClipboard() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Causes the contents of the clipboard to be pasted into the given widget at the current cursor position.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public int Position { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Position" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <summary>The current cursor position.</summary>
        <value>An integer position for the cursor.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="SelectRegion">
      <MemberSignature Language="C#" Value="public void SelectRegion (int start, int end);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SelectRegion(int32 start, int32 end) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="end" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="start">An integer, the start of the selected region.</param>
        <param name="end">An integer, the end of the selected region.</param>
        <summary>Selects a region of text. </summary>
        <remarks>The characters that are selected are those characters at positions from <paramref name="start" /> up to, but not including <paramref name="end" />. If <paramref name="end" /> is negative, then the the characters selected will be those characters from <paramref name="start" /> to the end of the text.
	</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextDeleted">
      <MemberSignature Language="C#" Value="public event Gtk.TextDeletedHandler TextDeleted;" />
      <MemberSignature Language="ILAsm" Value=".event class Gtk.TextDeletedHandler TextDeleted" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Gtk.TextDeletedHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Raised whenever the user deletes text.</summary>
        <remarks>The default handler for this signal will normally be responsible for inserting the text, so by connecting to this signal and then stopping the signal with gtk_signal_emit_stop(), it is possible to modify the inserted text, or prevent it from being inserted entirely. The <paramref name="start_pos" /> and <paramref name="end_pos" /> parameters are interpreted as for <see cref="F:Gtk.Editable.DeleteText()" />(FIXME: need equivalent for gtk_signal_emit_stop().)</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextInserted">
      <MemberSignature Language="C#" Value="public event Gtk.TextInsertedHandler TextInserted;" />
      <MemberSignature Language="ILAsm" Value=".event class Gtk.TextInsertedHandler TextInserted" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Gtk.TextInsertedHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Raised whenever the user inserts text.</summary>
        <remarks>The default handler for this signal will normally be responsible for inserting the text, so by connecting to this signal and then stopping the signal with gtk_signal_emit_stop(), it is possible to modify the inserted text, or prevent it from being inserted entirely. (FIXME: Need Gtk# equivalent for gtk_signal_emit_stop().)</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
