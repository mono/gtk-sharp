<Type Name="Global" FullName="Glade.Global">
  <TypeSignature Language="C#" Value="public class Global" Maintainer="auto" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Global extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>glade-sharp</AssemblyName>
    <AssemblyPublicKey>
    </AssemblyPublicKey>
    <AssemblyVersion>2.12.0.0</AssemblyVersion>
  </AssemblyInfo>
  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Global API elements for <see cref="N:Glade" /></summary>
    <remarks>Global class collects certain, commonly used funtions of the underlying libglade API
which is necessary to glade-sharp to load the .glade files.

All members of this class are static functions.

Glade-sharp uses the functions to load

<list type="bullet"><item><term>Register custom properties to a widget </term></item><item><term>Read enums/flags from strings present in .glade files </term></item><item><term>Register widget with XML tree, read widget name from widget pointer</term></item></list></remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Global ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue />
      <Parameters />
      <Docs>
        <summary>Default constructor</summary>
        <remarks>The Global class has only static functions, and no methods,
which make it redundant for us to normally create this object.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumFromString">
      <MemberSignature Language="C#" Value="public static int EnumFromString (GLib.GType type, string str1ng);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 EnumFromString(valuetype GLib.GType type, string str1ng) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="GLib.GType" />
        <Parameter Name="str1ng" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">a <see cref="T:GLib.GType" /></param>
        <param name="str1ng">a <see cref="T:System.String" /></param>
        <summary>This helper routine is designed to be used by widget build routines to convert the string representations of enumeration values found in the XML descriptions to the integer values that can be used to configure the widget.</summary>
        <returns>a <see cref="T:System.Int32" /></returns>
        <remarks>The string is composed of string names or nicknames for various flags separated by '|'. </remarks>
      </Docs>
    </Member>
    <Member MemberName="FlagsFromString">
      <MemberSignature Language="C#" Value="public static uint FlagsFromString (GLib.GType type, string str1ng);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 FlagsFromString(valuetype GLib.GType type, string str1ng) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="GLib.GType" />
        <Parameter Name="str1ng" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">a <see cref="T:GLib.GType" /></param>
        <param name="str1ng">a <see cref="T:System.String" /></param>
        <summary>This helper routine is designed to be used by widget build routines to convert the string representations of flags values found in the XML descriptions to the integer values that can be used to configure the widget.</summary>
        <returns>a <see cref="T:System.UInt32" /></returns>
        <remarks>The string is composed of string names or nicknames for various flags separated by '|'.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetWidgetName">
      <MemberSignature Language="C#" Value="public static string GetWidgetName (Gtk.Widget widget);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetWidgetName(class Gtk.Widget widget) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="widget" Type="Gtk.Widget" />
      </Parameters>
      <Docs>
        <param name="widget">a <see cref="T:Gtk.Widget" /></param>
        <summary>Used to get the name of a widget that was generated by a <see cref="T:Glade.XML" /> object.</summary>
        <returns>a <see cref="T:System.String" /></returns>
        <remarks>Get Widget Name of current widget.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetWidgetTree">
      <MemberSignature Language="C#" Value="public static Glade.XML GetWidgetTree (Gtk.Widget widget);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Glade.XML GetWidgetTree(class Gtk.Widget widget) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Glade.XML</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="widget" Type="Gtk.Widget" />
      </Parameters>
      <Docs>
        <param name="widget">a <see cref="T:Gtk.Widget" /></param>
        <summary>This function is used to get the <see cref="T:Glade.XML" /> object that built this widget.</summary>
        <returns>a <see cref="T:Glade.XML" /></returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ModuleCheckVersion">
      <MemberSignature Language="C#" Value="public static string ModuleCheckVersion (int version);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ModuleCheckVersion(int32 version) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="version" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="version">a <see cref="T:System.Int32" /></param>
        <summary>Checks the version of a module.</summary>
        <returns>a <see cref="T:System.String" /></returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="RegisterCustomProp">
      <MemberSignature Language="C#" Value="public static void RegisterCustomProp (GLib.GType type, string prop_name, Glade.ApplyCustomPropFunc apply_prop);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterCustomProp(valuetype GLib.GType type, string prop_name, class Glade.ApplyCustomPropFunc apply_prop) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="GLib.GType" />
        <Parameter Name="prop_name" Type="System.String" />
        <Parameter Name="apply_prop" Type="Glade.ApplyCustomPropFunc" />
      </Parameters>
      <Docs>
        <param name="type">the  <see cref="T:GLib.GType" /> of the widget.</param>
        <param name="prop_name">the name of the custom property</param>
        <param name="apply_prop">the <see cref="T:Glade.ApplyCustomPropFunc" /> to call when the property is found.</param>
        <summary>This method provides a way to register handlers  for custom properties.</summary>
        <remarks>Some properties are not (yet) handled through the GObject property code, so can not be handled by the generic code. This function provides a way to register handlers for these properties. Such handlers will apply for the GType type and all its descendants.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterWidget">
      <MemberSignature Language="C#" Value="public static void RegisterWidget (GLib.GType type, Glade.NewFunc new_func, Glade.BuildChildrenFunc build_children, Glade.FindInternalChildFunc find_internal_child);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterWidget(valuetype GLib.GType type, class Glade.NewFunc new_func, class Glade.BuildChildrenFunc build_children, class Glade.FindInternalChildFunc find_internal_child) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="GLib.GType" />
        <Parameter Name="new_func" Type="Glade.NewFunc" />
        <Parameter Name="build_children" Type="Glade.BuildChildrenFunc" />
        <Parameter Name="find_internal_child" Type="Glade.FindInternalChildFunc" />
      </Parameters>
      <Docs>
        <param name="type">the <see cref="T:GLib.GType" /> of a widget.</param>
        <param name="new_func">the <see cref="T:Glade.NewFunc" /> used to construct the widget.</param>
        <param name="build_children">the <see cref="T:Glade.BuildChildrenFunc" /> used to construct the children or null.</param>
        <param name="find_internal_child">the <see cref="T:Glade.FindInternalChildFunc" /> to find the internal children or null.</param>
        <summary>This method registers new construction methods for a widget type.</summary>
        <remarks />
        <since version="Gtk# 2.4" />
      </Docs>
    </Member>
    <Member MemberName="SetCustomHandler">
      <MemberSignature Language="C#" Value="public static void SetCustomHandler (Glade.XMLCustomWidgetHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetCustomHandler(class Glade.XMLCustomWidgetHandler handler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.12.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Replaced by Glade.XML.CustomHandler static property.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="Glade.XMLCustomWidgetHandler" />
      </Parameters>
      <Docs>
        <param name="handler">the <see cref="T:Glade.XMLCustomWidgetHandler" /> to use when a custom widget is found.</param>
        <summary>this method allows you to override the default behaviour when a Custom widget is found in an interface.</summary>
        <remarks />
      </Docs>
    </Member>
  </Members>
</Type>
