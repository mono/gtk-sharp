<Type Name="NotifyEventHandler" FullName="GConf.NotifyEventHandler">
  <TypeSignature Language="C#" Maintainer="auto" Value="public delegate void NotifyEventHandler(object sender, NotifyEventArgs args);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed NotifyEventHandler extends System.MulticastDelegate" />
  <AssemblyInfo>
    <AssemblyName>gconf-sharp</AssemblyName>
    <AssemblyPublicKey />
    <AssemblyVersion>2.20.0.0</AssemblyVersion>
    <AssemblyVersion>2.24.0.0</AssemblyVersion>
  </AssemblyInfo>
  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="sender" Type="System.Object" />
    <Parameter Name="args" Type="GConf.NotifyEventArgs" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="sender">To be added.</param>
    <param name="args">To be added.</param>
    <summary>NotifyEventHandler is a delegate object that can be used to notify your program whenever a key's value is changed, either in your program or externally (i.e. via gconf-editor).</summary>
    <remarks>You only have to attach a GConf.NotifyEventHandler delegate to a key, this way:
<example><code lang="C#">gconfClient.AddNotify (key, new GConf.NotifyEventHandler(function));
  </code></example>
This is very important for graphic interfaces, as it is a good practice to make the application react instantly to preference changes.</remarks>
  </Docs>
  <Members />
</Type>
