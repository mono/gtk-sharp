<?xml version="1.0"?>
<api parser_version="2">
  <!--

        This file was automatically generated.
        Please DO NOT MODIFY THIS FILE, modify .metadata files instead.

-->
  <namespace name="G" library="libgio-2.0-0.dll">
    <enum name="AppInfoCreateFlags" cname="GAppInfoCreateFlags" gtype="g_app_info_create_flags_get_type" type="flags">
      <member cname="G_APP_INFO_CREATE_NONE" name="None" />
      <member cname="G_APP_INFO_CREATE_NEEDS_TERMINAL" name="NeedsTerminal" value="1 &lt;&lt; 0" />
      <member cname="G_APP_INFO_CREATE_SUPPORTS_URIS" name="SupportsUris" value="1 &lt;&lt; 1" />
      <member cname="G_APP_INFO_CREATE_SUPPORTS_STARTUP_NOTIFICATION" name="SupportsStartupNotification" value="1 &lt;&lt; 2" />
    </enum>
    <enum name="ApplicationFlags" cname="GApplicationFlags" gtype="g_application_flags_get_type" type="flags">
      <member cname="G_APPLICATION_FLAGS_NONE" name="FlagsNone" />
      <member cname="G_APPLICATION_IS_SERVICE" name="IsService" value="1 &lt;&lt; 0" />
      <member cname="G_APPLICATION_IS_LAUNCHER" name="IsLauncher" value="1 &lt;&lt; 1" />
      <member cname="G_APPLICATION_HANDLES_OPEN" name="HandlesOpen" value="1 &lt;&lt; 2" />
      <member cname="G_APPLICATION_HANDLES_COMMAND_LINE" name="HandlesCommandLine" value="1 &lt;&lt; 3" />
      <member cname="G_APPLICATION_SEND_ENVIRONMENT" name="SendEnvironment" value="1 &lt;&lt; 4" />
    </enum>
    <enum name="AskPasswordFlags" cname="GAskPasswordFlags" gtype="g_ask_password_flags_get_type" type="flags">
      <member cname="G_ASK_PASSWORD_NEED_PASSWORD" name="NeedPassword" value="1 &lt;&lt; 0" />
      <member cname="G_ASK_PASSWORD_NEED_USERNAME" name="NeedUsername" value="1 &lt;&lt; 1" />
      <member cname="G_ASK_PASSWORD_NEED_DOMAIN" name="NeedDomain" value="1 &lt;&lt; 2" />
      <member cname="G_ASK_PASSWORD_SAVING_SUPPORTED" name="SavingSupported" value="1 &lt;&lt; 3" />
      <member cname="G_ASK_PASSWORD_ANONYMOUS_SUPPORTED" name="AnonymousSupported" value="1 &lt;&lt; 4" />
    </enum>
    <enum name="BusNameOwnerFlags" cname="GBusNameOwnerFlags" gtype="g_bus_name_owner_flags_get_type" type="flags">
      <member cname="G_BUS_NAME_OWNER_FLAGS_NONE" name="None" />
      <member cname="G_BUS_NAME_OWNER_FLAGS_ALLOW_REPLACEMENT" name="AllowReplacement" value="1 &lt;&lt; 0" />
      <member cname="G_BUS_NAME_OWNER_FLAGS_REPLACE" name="Replace" value="1 &lt;&lt; 1" />
    </enum>
    <enum name="BusNameWatcherFlags" cname="GBusNameWatcherFlags" gtype="g_bus_name_watcher_flags_get_type" type="flags">
      <member cname="G_BUS_NAME_WATCHER_FLAGS_NONE" name="None" />
      <member cname="G_BUS_NAME_WATCHER_FLAGS_AUTO_START" name="AutoStart" value="1 &lt;&lt; 0" />
    </enum>
    <enum name="BusType" cname="GBusType" gtype="g_bus_type_get_type" type="enum">
      <member cname="G_BUS_TYPE_STARTER" name="Starter" value="-1" />
      <member cname="G_BUS_TYPE_NONE" name="None" />
      <member cname="G_BUS_TYPE_SYSTEM" name="System" value="1" />
      <member cname="G_BUS_TYPE_SESSION" name="Session" value="2" />
    </enum>
    <enum name="ConverterFlags" cname="GConverterFlags" gtype="g_converter_flags_get_type" type="flags">
      <member cname="G_CONVERTER_NO_FLAGS" name="NoFlags" />
      <member cname="G_CONVERTER_INPUT_AT_END" name="InputAtEnd" value="1 &lt;&lt; 0" />
      <member cname="G_CONVERTER_FLUSH" name="Flush" value="1 &lt;&lt; 1" />
    </enum>
    <enum name="ConverterResult" cname="GConverterResult" gtype="g_converter_result_get_type" type="enum">
      <member cname="G_CONVERTER_ERROR" name="Error" />
      <member cname="G_CONVERTER_CONVERTED" name="Converted" value="1" />
      <member cname="G_CONVERTER_FINISHED" name="Finished" value="2" />
      <member cname="G_CONVERTER_FLUSHED" name="Flushed" value="3" />
    </enum>
    <enum name="CredentialsType" cname="GCredentialsType" gtype="g_credentials_type_get_type" type="enum">
      <member cname="G_CREDENTIALS_TYPE_INVALID" name="Invalid" />
      <member cname="G_CREDENTIALS_TYPE_LINUX_UCRED" name="LinuxUcred" />
      <member cname="G_CREDENTIALS_TYPE_FREEBSD_CMSGCRED" name="FreebsdCmsgcred" />
    </enum>
    <enum name="DBusAuthMechanismState" cname="GDBusAuthMechanismState" type="enum">
      <member cname="G_DBUS_AUTH_MECHANISM_STATE_INVALID" name="Invalid" />
      <member cname="G_DBUS_AUTH_MECHANISM_STATE_WAITING_FOR_DATA" name="WaitingForData" />
      <member cname="G_DBUS_AUTH_MECHANISM_STATE_HAVE_DATA_TO_SEND" name="HaveDataToSend" />
      <member cname="G_DBUS_AUTH_MECHANISM_STATE_REJECTED" name="Rejected" />
      <member cname="G_DBUS_AUTH_MECHANISM_STATE_ACCEPTED" name="Accepted" />
    </enum>
    <enum name="DBusCallFlags" cname="GDBusCallFlags" type="flags">
      <member cname="G_DBUS_CALL_FLAGS_NONE" name="None" />
      <member cname="G_DBUS_CALL_FLAGS_NO_AUTO_START" name="NoAutoStart" value="1 &lt;&lt; 0" />
    </enum>
    <enum name="DBusCapabilityFlags" cname="GDBusCapabilityFlags" type="flags">
      <member cname="G_DBUS_CAPABILITY_FLAGS_NONE" name="None" />
      <member cname="G_DBUS_CAPABILITY_FLAGS_UNIX_FD_PASSING" name="UnixFdPassing" value="1 &lt;&lt; 0" />
    </enum>
    <enum name="DBusConnectionFlags" cname="GDBusConnectionFlags" type="flags">
      <member cname="G_DBUS_CONNECTION_FLAGS_NONE" name="None" />
      <member cname="G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_CLIENT" name="AuthenticationClient" value="1 &lt;&lt; 0" />
      <member cname="G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_SERVER" name="AuthenticationServer" value="1 &lt;&lt; 1" />
      <member cname="G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS" name="AuthenticationAllowAnonymous" value="1 &lt;&lt; 2" />
      <member cname="G_DBUS_CONNECTION_FLAGS_MESSAGE_BUS_CONNECTION" name="MessageBusConnection" value="1 &lt;&lt; 3" />
      <member cname="G_DBUS_CONNECTION_FLAGS_DELAY_MESSAGE_PROCESSING" name="DelayMessageProcessing" value="1 &lt;&lt; 4" />
    </enum>
    <enum name="DBusError" cname="GDBusError" type="enum">
      <member cname="G_DBUS_ERROR_FAILED" name="Failed" />
      <member cname="G_DBUS_ERROR_NO_MEMORY" name="NoMemory" />
      <member cname="G_DBUS_ERROR_SERVICE_UNKNOWN" name="ServiceUnknown" />
      <member cname="G_DBUS_ERROR_NAME_HAS_NO_OWNER" name="NameHasNoOwner" />
      <member cname="G_DBUS_ERROR_NO_REPLY" name="NoReply" />
      <member cname="G_DBUS_ERROR_IO_ERROR" name="IoError" />
      <member cname="G_DBUS_ERROR_BAD_ADDRESS" name="BadAddress" />
      <member cname="G_DBUS_ERROR_NOT_SUPPORTED" name="NotSupported" />
      <member cname="G_DBUS_ERROR_LIMITS_EXCEEDED" name="LimitsExceeded" />
      <member cname="G_DBUS_ERROR_ACCESS_DENIED" name="AccessDenied" />
      <member cname="G_DBUS_ERROR_AUTH_FAILED" name="AuthFailed" />
      <member cname="G_DBUS_ERROR_NO_SERVER" name="NoServer" />
      <member cname="G_DBUS_ERROR_TIMEOUT" name="Timeout" />
      <member cname="G_DBUS_ERROR_NO_NETWORK" name="NoNetwork" />
      <member cname="G_DBUS_ERROR_ADDRESS_IN_USE" name="AddressInUse" />
      <member cname="G_DBUS_ERROR_DISCONNECTED" name="Disconnected" />
      <member cname="G_DBUS_ERROR_INVALID_ARGS" name="InvalidArgs" />
      <member cname="G_DBUS_ERROR_FILE_NOT_FOUND" name="FileNotFound" />
      <member cname="G_DBUS_ERROR_FILE_EXISTS" name="FileExists" />
      <member cname="G_DBUS_ERROR_UNKNOWN_METHOD" name="UnknownMethod" />
      <member cname="G_DBUS_ERROR_TIMED_OUT" name="TimedOut" />
      <member cname="G_DBUS_ERROR_MATCH_RULE_NOT_FOUND" name="MatchRuleNotFound" />
      <member cname="G_DBUS_ERROR_MATCH_RULE_INVALID" name="MatchRuleInvalid" />
      <member cname="G_DBUS_ERROR_SPAWN_EXEC_FAILED" name="SpawnExecFailed" />
      <member cname="G_DBUS_ERROR_SPAWN_FORK_FAILED" name="SpawnForkFailed" />
      <member cname="G_DBUS_ERROR_SPAWN_CHILD_EXITED" name="SpawnChildExited" />
      <member cname="G_DBUS_ERROR_SPAWN_CHILD_SIGNALED" name="SpawnChildSignaled" />
      <member cname="G_DBUS_ERROR_SPAWN_FAILED" name="SpawnFailed" />
      <member cname="G_DBUS_ERROR_SPAWN_SETUP_FAILED" name="SpawnSetupFailed" />
      <member cname="G_DBUS_ERROR_SPAWN_CONFIG_INVALID" name="SpawnConfigInvalid" />
      <member cname="G_DBUS_ERROR_SPAWN_SERVICE_INVALID" name="SpawnServiceInvalid" />
      <member cname="G_DBUS_ERROR_SPAWN_SERVICE_NOT_FOUND" name="SpawnServiceNotFound" />
      <member cname="G_DBUS_ERROR_SPAWN_PERMISSIONS_INVALID" name="SpawnPermissionsInvalid" />
      <member cname="G_DBUS_ERROR_SPAWN_FILE_INVALID" name="SpawnFileInvalid" />
      <member cname="G_DBUS_ERROR_SPAWN_NO_MEMORY" name="SpawnNoMemory" />
      <member cname="G_DBUS_ERROR_UNIX_PROCESS_ID_UNKNOWN" name="UnixProcessIdUnknown" />
      <member cname="G_DBUS_ERROR_INVALID_SIGNATURE" name="InvalidSignature" />
      <member cname="G_DBUS_ERROR_INVALID_FILE_CONTENT" name="InvalidFileContent" />
      <member cname="G_DBUS_ERROR_SELINUX_SECURITY_CONTEXT_UNKNOWN" name="SelinuxSecurityContextUnknown" />
      <member cname="G_DBUS_ERROR_ADT_AUDIT_DATA_UNKNOWN" name="AdtAuditDataUnknown" />
      <member cname="G_DBUS_ERROR_OBJECT_PATH_IN_USE" name="ObjectPathInUse" />
    </enum>
    <enum name="DBusMessageByteOrder" cname="GDBusMessageByteOrder" type="enum">
      <member cname="G_DBUS_MESSAGE_BYTE_ORDER_BIG_ENDIAN" name="BigEndian" value="'B'" />
      <member cname="G_DBUS_MESSAGE_BYTE_ORDER_LITTLE_ENDIAN" name="LittleEndian" value="'l'" />
    </enum>
    <enum name="DBusMessageFlags" cname="GDBusMessageFlags" type="flags">
      <member cname="G_DBUS_MESSAGE_FLAGS_NONE" name="None" />
      <member cname="G_DBUS_MESSAGE_FLAGS_NO_REPLY_EXPECTED" name="NoReplyExpected" value="1 &lt;&lt; 0" />
      <member cname="G_DBUS_MESSAGE_FLAGS_NO_AUTO_START" name="NoAutoStart" value="1 &lt;&lt; 1" />
    </enum>
    <enum name="DBusMessageHeaderField" cname="GDBusMessageHeaderField" type="enum">
      <member cname="G_DBUS_MESSAGE_HEADER_FIELD_INVALID" name="Invalid" />
      <member cname="G_DBUS_MESSAGE_HEADER_FIELD_PATH" name="Path" />
      <member cname="G_DBUS_MESSAGE_HEADER_FIELD_INTERFACE" name="Interface" />
      <member cname="G_DBUS_MESSAGE_HEADER_FIELD_MEMBER" name="Member" />
      <member cname="G_DBUS_MESSAGE_HEADER_FIELD_ERROR_NAME" name="ErrorName" />
      <member cname="G_DBUS_MESSAGE_HEADER_FIELD_REPLY_SERIAL" name="ReplySerial" />
      <member cname="G_DBUS_MESSAGE_HEADER_FIELD_DESTINATION" name="Destination" />
      <member cname="G_DBUS_MESSAGE_HEADER_FIELD_SENDER" name="Sender" />
      <member cname="G_DBUS_MESSAGE_HEADER_FIELD_SIGNATURE" name="Signature" />
      <member cname="G_DBUS_MESSAGE_HEADER_FIELD_NUM_UNIX_FDS" name="NumUnixFds" />
    </enum>
    <enum name="DBusMessageType" cname="GDBusMessageType" type="enum">
      <member cname="G_DBUS_MESSAGE_TYPE_INVALID" name="Invalid" />
      <member cname="G_DBUS_MESSAGE_TYPE_METHOD_CALL" name="MethodCall" />
      <member cname="G_DBUS_MESSAGE_TYPE_METHOD_RETURN" name="MethodReturn" />
      <member cname="G_DBUS_MESSAGE_TYPE_ERROR" name="Error" />
      <member cname="G_DBUS_MESSAGE_TYPE_SIGNAL" name="Signal" />
    </enum>
    <enum name="DBusPropertyInfoFlags" cname="GDBusPropertyInfoFlags" type="flags">
      <member cname="G_DBUS_PROPERTY_INFO_FLAGS_NONE" name="None" />
      <member cname="G_DBUS_PROPERTY_INFO_FLAGS_READABLE" name="Readable" value="1 &lt;&lt; 0" />
      <member cname="G_DBUS_PROPERTY_INFO_FLAGS_WRITABLE" name="Writable" value="1 &lt;&lt; 1" />
    </enum>
    <enum name="DBusProxyFlags" cname="GDBusProxyFlags" type="flags">
      <member cname="G_DBUS_PROXY_FLAGS_NONE" name="None" />
      <member cname="G_DBUS_PROXY_FLAGS_DO_NOT_LOAD_PROPERTIES" name="DoNotLoadProperties" value="1 &lt;&lt; 0" />
      <member cname="G_DBUS_PROXY_FLAGS_DO_NOT_CONNECT_SIGNALS" name="DoNotConnectSignals" value="1 &lt;&lt; 1" />
      <member cname="G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START" name="DoNotAutoStart" value="1 &lt;&lt; 2" />
    </enum>
    <enum name="DBusSendMessageFlags" cname="GDBusSendMessageFlags" type="flags">
      <member cname="G_DBUS_SEND_MESSAGE_FLAGS_NONE" name="None" />
      <member cname="G_DBUS_SEND_MESSAGE_FLAGS_PRESERVE_SERIAL" name="PreserveSerial" value="1 &lt;&lt; 0" />
    </enum>
    <enum name="DBusServerFlags" cname="GDBusServerFlags" type="flags">
      <member cname="G_DBUS_SERVER_FLAGS_NONE" name="None" />
      <member cname="G_DBUS_SERVER_FLAGS_RUN_IN_THREAD" name="RunInThread" value="1 &lt;&lt; 0" />
      <member cname="G_DBUS_SERVER_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS" name="AuthenticationAllowAnonymous" value="1 &lt;&lt; 1" />
    </enum>
    <enum name="DBusSignalFlags" cname="GDBusSignalFlags" type="flags">
      <member cname="G_DBUS_SIGNAL_FLAGS_NONE" name="None" />
      <member cname="G_DBUS_SIGNAL_FLAGS_NO_MATCH_RULE" name="NoMatchRule" value="1 &lt;&lt; 0" />
    </enum>
    <enum name="DBusSubtreeFlags" cname="GDBusSubtreeFlags" type="flags">
      <member cname="G_DBUS_SUBTREE_FLAGS_NONE" name="None" />
      <member cname="G_DBUS_SUBTREE_FLAGS_DISPATCH_TO_UNENUMERATED_NODES" name="DispatchToUnenumeratedNodes" value="1 &lt;&lt; 0" />
    </enum>
    <enum name="DataStreamByteOrder" cname="GDataStreamByteOrder" gtype="g_data_stream_byte_order_get_type" type="enum">
      <member cname="G_DATA_STREAM_BYTE_ORDER_BIG_ENDIAN" name="BigEndian" />
      <member cname="G_DATA_STREAM_BYTE_ORDER_LITTLE_ENDIAN" name="LittleEndian" />
      <member cname="G_DATA_STREAM_BYTE_ORDER_HOST_ENDIAN" name="HostEndian" />
    </enum>
    <enum name="DataStreamNewlineType" cname="GDataStreamNewlineType" gtype="g_data_stream_newline_type_get_type" type="enum">
      <member cname="G_DATA_STREAM_NEWLINE_TYPE_LF" name="Lf" />
      <member cname="G_DATA_STREAM_NEWLINE_TYPE_CR" name="Cr" />
      <member cname="G_DATA_STREAM_NEWLINE_TYPE_CR_LF" name="CrLf" />
      <member cname="G_DATA_STREAM_NEWLINE_TYPE_ANY" name="Any" />
    </enum>
    <enum name="DriveStartFlags" cname="GDriveStartFlags" gtype="g_drive_start_flags_get_type" type="enum">
      <member cname="G_DRIVE_START_NONE" name="None" />
    </enum>
    <enum name="DriveStartStopType" cname="GDriveStartStopType" gtype="g_drive_start_stop_type_get_type" type="enum">
      <member cname="G_DRIVE_START_STOP_TYPE_UNKNOWN" name="Unknown" />
      <member cname="G_DRIVE_START_STOP_TYPE_SHUTDOWN" name="Shutdown" />
      <member cname="G_DRIVE_START_STOP_TYPE_NETWORK" name="Network" />
      <member cname="G_DRIVE_START_STOP_TYPE_MULTIDISK" name="Multidisk" />
      <member cname="G_DRIVE_START_STOP_TYPE_PASSWORD" name="Password" />
    </enum>
    <enum name="EmblemOrigin" cname="GEmblemOrigin" gtype="g_emblem_origin_get_type" type="enum">
      <member cname="G_EMBLEM_ORIGIN_UNKNOWN" name="Unknown" />
      <member cname="G_EMBLEM_ORIGIN_DEVICE" name="Device" />
      <member cname="G_EMBLEM_ORIGIN_LIVEMETADATA" name="Livemetadata" />
      <member cname="G_EMBLEM_ORIGIN_TAG" name="Tag" />
    </enum>
    <enum name="FileAttributeInfoFlags" cname="GFileAttributeInfoFlags" gtype="g_file_attribute_info_flags_get_type" type="flags">
      <member cname="G_FILE_ATTRIBUTE_INFO_NONE" name="None" />
      <member cname="G_FILE_ATTRIBUTE_INFO_COPY_WITH_FILE" name="CopyWithFile" value="1 &lt;&lt; 0" />
      <member cname="G_FILE_ATTRIBUTE_INFO_COPY_WHEN_MOVED" name="CopyWhenMoved" value="1 &lt;&lt; 1" />
    </enum>
    <enum name="FileAttributeStatus" cname="GFileAttributeStatus" gtype="g_file_attribute_status_get_type" type="enum">
      <member cname="G_FILE_ATTRIBUTE_STATUS_UNSET" name="Unset" />
      <member cname="G_FILE_ATTRIBUTE_STATUS_SET" name="Set" />
      <member cname="G_FILE_ATTRIBUTE_STATUS_ERROR_SETTING" name="ErrorSetting" />
    </enum>
    <enum name="FileAttributeType" cname="GFileAttributeType" gtype="g_file_attribute_type_get_type" type="enum">
      <member cname="G_FILE_ATTRIBUTE_TYPE_INVALID" name="Invalid" />
      <member cname="G_FILE_ATTRIBUTE_TYPE_STRING" name="String" />
      <member cname="G_FILE_ATTRIBUTE_TYPE_BYTE_STRING" name="ByteString" />
      <member cname="G_FILE_ATTRIBUTE_TYPE_BOOLEAN" name="Boolean" />
      <member cname="G_FILE_ATTRIBUTE_TYPE_UINT32" name="Uint32" />
      <member cname="G_FILE_ATTRIBUTE_TYPE_INT32" name="Int32" />
      <member cname="G_FILE_ATTRIBUTE_TYPE_UINT64" name="Uint64" />
      <member cname="G_FILE_ATTRIBUTE_TYPE_INT64" name="Int64" />
      <member cname="G_FILE_ATTRIBUTE_TYPE_OBJECT" name="Object" />
      <member cname="G_FILE_ATTRIBUTE_TYPE_STRINGV" name="Stringv" />
    </enum>
    <enum name="FileCopyFlags" cname="GFileCopyFlags" gtype="g_file_copy_flags_get_type" type="flags">
      <member cname="G_FILE_COPY_NONE" name="None" />
      <member cname="G_FILE_COPY_OVERWRITE" name="Overwrite" value="1 &lt;&lt; 0" />
      <member cname="G_FILE_COPY_BACKUP" name="Backup" value="1 &lt;&lt; 1" />
      <member cname="G_FILE_COPY_NOFOLLOW_SYMLINKS" name="NofollowSymlinks" value="1 &lt;&lt; 2" />
      <member cname="G_FILE_COPY_ALL_METADATA" name="AllMetadata" value="1 &lt;&lt; 3" />
      <member cname="G_FILE_COPY_NO_FALLBACK_FOR_MOVE" name="NoFallbackForMove" value="1 &lt;&lt; 4" />
      <member cname="G_FILE_COPY_TARGET_DEFAULT_PERMS" name="TargetDefaultPerms" value="1 &lt;&lt; 5" />
    </enum>
    <enum name="FileCreateFlags" cname="GFileCreateFlags" gtype="g_file_create_flags_get_type" type="flags">
      <member cname="G_FILE_CREATE_NONE" name="None" />
      <member cname="G_FILE_CREATE_PRIVATE" name="Private" value="1 &lt;&lt; 0" />
      <member cname="G_FILE_CREATE_REPLACE_DESTINATION" name="ReplaceDestination" value="1 &lt;&lt; 1" />
    </enum>
    <enum name="FileMonitorEvent" cname="GFileMonitorEvent" gtype="g_file_monitor_event_get_type" type="enum">
      <member cname="G_FILE_MONITOR_EVENT_CHANGED" name="Changed" />
      <member cname="G_FILE_MONITOR_EVENT_CHANGES_DONE_HINT" name="ChangesDoneHint" />
      <member cname="G_FILE_MONITOR_EVENT_DELETED" name="Deleted" />
      <member cname="G_FILE_MONITOR_EVENT_CREATED" name="Created" />
      <member cname="G_FILE_MONITOR_EVENT_ATTRIBUTE_CHANGED" name="AttributeChanged" />
      <member cname="G_FILE_MONITOR_EVENT_PRE_UNMOUNT" name="PreUnmount" />
      <member cname="G_FILE_MONITOR_EVENT_UNMOUNTED" name="Unmounted" />
      <member cname="G_FILE_MONITOR_EVENT_MOVED" name="Moved" />
    </enum>
    <enum name="FileMonitorFlags" cname="GFileMonitorFlags" gtype="g_file_monitor_flags_get_type" type="flags">
      <member cname="G_FILE_MONITOR_NONE" name="None" />
      <member cname="G_FILE_MONITOR_WATCH_MOUNTS" name="WatchMounts" value="1 &lt;&lt; 0" />
      <member cname="G_FILE_MONITOR_SEND_MOVED" name="SendMoved" value="1 &lt;&lt; 1" />
    </enum>
    <enum name="FileQueryInfoFlags" cname="GFileQueryInfoFlags" gtype="g_file_query_info_flags_get_type" type="flags">
      <member cname="G_FILE_QUERY_INFO_NONE" name="None" />
      <member cname="G_FILE_QUERY_INFO_NOFOLLOW_SYMLINKS" name="NofollowSymlinks" value="1 &lt;&lt; 0" />
    </enum>
    <enum name="FileType" cname="GFileType" gtype="g_file_type_get_type" type="enum">
      <member cname="G_FILE_TYPE_UNKNOWN" name="Unknown" />
      <member cname="G_FILE_TYPE_REGULAR" name="Regular" />
      <member cname="G_FILE_TYPE_DIRECTORY" name="Directory" />
      <member cname="G_FILE_TYPE_SYMBOLIC_LINK" name="SymbolicLink" />
      <member cname="G_FILE_TYPE_SPECIAL" name="Special" />
      <member cname="G_FILE_TYPE_SHORTCUT" name="Shortcut" />
      <member cname="G_FILE_TYPE_MOUNTABLE" name="Mountable" />
    </enum>
    <enum name="FilesystemPreviewType" cname="GFilesystemPreviewType" gtype="g_filesystem_preview_type_get_type" type="enum">
      <member cname="G_FILESYSTEM_PREVIEW_TYPE_IF_ALWAYS" name="IfAlways" />
      <member cname="G_FILESYSTEM_PREVIEW_TYPE_IF_LOCAL" name="IfLocal" />
      <member cname="G_FILESYSTEM_PREVIEW_TYPE_NEVER" name="Never" />
    </enum>
    <enum name="IOErrorEnum" cname="GIOErrorEnum" type="enum">
      <member cname="G_IO_ERROR_FAILED" name="Failed" />
      <member cname="G_IO_ERROR_NOT_FOUND" name="NotFound" />
      <member cname="G_IO_ERROR_EXISTS" name="Exists" />
      <member cname="G_IO_ERROR_IS_DIRECTORY" name="IsDirectory" />
      <member cname="G_IO_ERROR_NOT_DIRECTORY" name="NotDirectory" />
      <member cname="G_IO_ERROR_NOT_EMPTY" name="NotEmpty" />
      <member cname="G_IO_ERROR_NOT_REGULAR_FILE" name="NotRegularFile" />
      <member cname="G_IO_ERROR_NOT_SYMBOLIC_LINK" name="NotSymbolicLink" />
      <member cname="G_IO_ERROR_NOT_MOUNTABLE_FILE" name="NotMountableFile" />
      <member cname="G_IO_ERROR_FILENAME_TOO_LONG" name="FilenameTooLong" />
      <member cname="G_IO_ERROR_INVALID_FILENAME" name="InvalidFilename" />
      <member cname="G_IO_ERROR_TOO_MANY_LINKS" name="TooManyLinks" />
      <member cname="G_IO_ERROR_NO_SPACE" name="NoSpace" />
      <member cname="G_IO_ERROR_INVALID_ARGUMENT" name="InvalidArgument" />
      <member cname="G_IO_ERROR_PERMISSION_DENIED" name="PermissionDenied" />
      <member cname="G_IO_ERROR_NOT_SUPPORTED" name="NotSupported" />
      <member cname="G_IO_ERROR_NOT_MOUNTED" name="NotMounted" />
      <member cname="G_IO_ERROR_ALREADY_MOUNTED" name="AlreadyMounted" />
      <member cname="G_IO_ERROR_CLOSED" name="Closed" />
      <member cname="G_IO_ERROR_CANCELLED" name="Cancelled" />
      <member cname="G_IO_ERROR_PENDING" name="Pending" />
      <member cname="G_IO_ERROR_READ_ONLY" name="ReadOnly" />
      <member cname="G_IO_ERROR_CANT_CREATE_BACKUP" name="CantCreateBackup" />
      <member cname="G_IO_ERROR_WRONG_ETAG" name="WrongEtag" />
      <member cname="G_IO_ERROR_TIMED_OUT" name="TimedOut" />
      <member cname="G_IO_ERROR_WOULD_RECURSE" name="WouldRecurse" />
      <member cname="G_IO_ERROR_BUSY" name="Busy" />
      <member cname="G_IO_ERROR_WOULD_BLOCK" name="WouldBlock" />
      <member cname="G_IO_ERROR_HOST_NOT_FOUND" name="HostNotFound" />
      <member cname="G_IO_ERROR_WOULD_MERGE" name="WouldMerge" />
      <member cname="G_IO_ERROR_FAILED_HANDLED" name="FailedHandled" />
      <member cname="G_IO_ERROR_TOO_MANY_OPEN_FILES" name="TooManyOpenFiles" />
      <member cname="G_IO_ERROR_NOT_INITIALIZED" name="NotInitialized" />
      <member cname="G_IO_ERROR_ADDRESS_IN_USE" name="AddressInUse" />
      <member cname="G_IO_ERROR_PARTIAL_INPUT" name="PartialInput" />
      <member cname="G_IO_ERROR_INVALID_DATA" name="InvalidData" />
      <member cname="G_IO_ERROR_DBUS_ERROR" name="DbusError" />
      <member cname="G_IO_ERROR_HOST_UNREACHABLE" name="HostUnreachable" />
      <member cname="G_IO_ERROR_NETWORK_UNREACHABLE" name="NetworkUnreachable" />
      <member cname="G_IO_ERROR_CONNECTION_REFUSED" name="ConnectionRefused" />
      <member cname="G_IO_ERROR_PROXY_FAILED" name="ProxyFailed" />
      <member cname="G_IO_ERROR_PROXY_AUTH_FAILED" name="ProxyAuthFailed" />
      <member cname="G_IO_ERROR_PROXY_NEED_AUTH" name="ProxyNeedAuth" />
      <member cname="G_IO_ERROR_PROXY_NOT_ALLOWED" name="ProxyNotAllowed" />
    </enum>
    <enum name="IOStreamSpliceFlags" cname="GIOStreamSpliceFlags" type="flags">
      <member cname="G_IO_STREAM_SPLICE_NONE" name="None" />
      <member cname="G_IO_STREAM_SPLICE_CLOSE_STREAM1" name="CloseStream1" value="1 &lt;&lt; 0" />
      <member cname="G_IO_STREAM_SPLICE_CLOSE_STREAM2" name="CloseStream2" value="1 &lt;&lt; 1" />
      <member cname="G_IO_STREAM_SPLICE_WAIT_FOR_BOTH" name="WaitForBoth" value="1 &lt;&lt; 2" />
    </enum>
    <enum name="MountMountFlags" cname="GMountMountFlags" gtype="g_mount_mount_flags_get_type" type="enum">
      <member cname="G_MOUNT_MOUNT_NONE" name="None" />
    </enum>
    <enum name="MountOperationResult" cname="GMountOperationResult" gtype="g_mount_operation_result_get_type" type="enum">
      <member cname="G_MOUNT_OPERATION_HANDLED" name="Handled" />
      <member cname="G_MOUNT_OPERATION_ABORTED" name="Aborted" />
      <member cname="G_MOUNT_OPERATION_UNHANDLED" name="Unhandled" />
    </enum>
    <enum name="MountUnmountFlags" cname="GMountUnmountFlags" gtype="g_mount_unmount_flags_get_type" type="flags">
      <member cname="G_MOUNT_UNMOUNT_NONE" name="None" />
      <member cname="G_MOUNT_UNMOUNT_FORCE" name="Force" value="1 &lt;&lt; 0" />
    </enum>
    <enum name="OutputStreamSpliceFlags" cname="GOutputStreamSpliceFlags" gtype="g_output_stream_splice_flags_get_type" type="flags">
      <member cname="G_OUTPUT_STREAM_SPLICE_NONE" name="None" />
      <member cname="G_OUTPUT_STREAM_SPLICE_CLOSE_SOURCE" name="CloseSource" value="1 &lt;&lt; 0" />
      <member cname="G_OUTPUT_STREAM_SPLICE_CLOSE_TARGET" name="CloseTarget" value="1 &lt;&lt; 1" />
    </enum>
    <enum name="PasswordSave" cname="GPasswordSave" gtype="g_password_save_get_type" type="enum">
      <member cname="G_PASSWORD_SAVE_NEVER" name="Never" />
      <member cname="G_PASSWORD_SAVE_FOR_SESSION" name="ForSession" />
      <member cname="G_PASSWORD_SAVE_PERMANENTLY" name="Permanently" />
    </enum>
    <enum name="ResolverError" cname="GResolverError" gtype="g_resolver_error_get_type" type="enum">
      <member cname="G_RESOLVER_ERROR_NOT_FOUND" name="NotFound" />
      <member cname="G_RESOLVER_ERROR_TEMPORARY_FAILURE" name="TemporaryFailure" />
      <member cname="G_RESOLVER_ERROR_INTERNAL" name="Internal" />
    </enum>
    <enum name="SettingsBindFlags" cname="GSettingsBindFlags" gtype="g_settings_bind_flags_get_type" type="flags">
      <member cname="G_SETTINGS_BIND_DEFAULT" name="Default" />
      <member cname="G_SETTINGS_BIND_GET" name="Get" value="1 &lt;&lt; 0" />
      <member cname="G_SETTINGS_BIND_SET" name="Set" value="1 &lt;&lt; 1" />
      <member cname="G_SETTINGS_BIND_NO_SENSITIVITY" name="NoSensitivity" value="1 &lt;&lt; 2" />
      <member cname="G_SETTINGS_BIND_GET_NO_CHANGES" name="GetNoChanges" value="1 &lt;&lt; 3" />
      <member cname="G_SETTINGS_BIND_INVERT_BOOLEAN" name="InvertBoolean" value="1 &lt;&lt; 4" />
    </enum>
    <enum name="SocketFamily" cname="GSocketFamily" gtype="g_socket_family_get_type" type="enum">
      <member cname="G_SOCKET_FAMILY_INVALID" name="Invalid" />
      <member cname="G_SOCKET_FAMILY_UNIX" name="Unix" value="GLIB_SYSDEF_AF_UNIX" />
      <member cname="G_SOCKET_FAMILY_IPV4" name="Ipv4" value="GLIB_SYSDEF_AF_INET" />
      <member cname="G_SOCKET_FAMILY_IPV6" name="Ipv6" value="GLIB_SYSDEF_AF_INET6" />
    </enum>
    <enum name="SocketMsgFlags" cname="GSocketMsgFlags" gtype="g_socket_msg_flags_get_type" type="enum">
      <member cname="G_SOCKET_MSG_NONE" name="None" />
      <member cname="G_SOCKET_MSG_OOB" name="Oob" value="GLIB_SYSDEF_MSG_OOB" />
      <member cname="G_SOCKET_MSG_PEEK" name="Peek" value="GLIB_SYSDEF_MSG_PEEK" />
      <member cname="G_SOCKET_MSG_DONTROUTE" name="Dontroute" value="GLIB_SYSDEF_MSG_DONTROUTE" />
    </enum>
    <enum name="SocketProtocol" cname="GSocketProtocol" gtype="g_socket_protocol_get_type" type="enum">
      <member cname="G_SOCKET_PROTOCOL_UNKNOWN" name="Unknown" value="-1" />
      <member cname="G_SOCKET_PROTOCOL_DEFAULT" name="Default" />
      <member cname="G_SOCKET_PROTOCOL_TCP" name="Tcp" value="6" />
      <member cname="G_SOCKET_PROTOCOL_UDP" name="Udp" value="17" />
      <member cname="G_SOCKET_PROTOCOL_SCTP" name="Sctp" value="132" />
    </enum>
    <enum name="SocketType" cname="GSocketType" gtype="g_socket_type_get_type" type="enum">
      <member cname="G_SOCKET_TYPE_INVALID" name="Invalid" />
      <member cname="G_SOCKET_TYPE_STREAM" name="Stream" />
      <member cname="G_SOCKET_TYPE_DATAGRAM" name="Datagram" />
      <member cname="G_SOCKET_TYPE_SEQPACKET" name="Seqpacket" />
    </enum>
    <enum name="TlsAuthenticationMode" cname="GTlsAuthenticationMode" gtype="g_tls_authentication_mode_get_type" type="enum">
      <member cname="G_TLS_AUTHENTICATION_NONE" name="None" />
      <member cname="G_TLS_AUTHENTICATION_REQUESTED" name="Requested" />
      <member cname="G_TLS_AUTHENTICATION_REQUIRED" name="Required" />
    </enum>
    <enum name="TlsCertificateFlags" cname="GTlsCertificateFlags" gtype="g_tls_certificate_flags_get_type" type="flags">
      <member cname="G_TLS_CERTIFICATE_UNKNOWN_CA" name="UnknownCa" value="1 &lt;&lt; 0" />
      <member cname="G_TLS_CERTIFICATE_BAD_IDENTITY" name="BadIdentity" value="1 &lt;&lt; 1" />
      <member cname="G_TLS_CERTIFICATE_NOT_ACTIVATED" name="NotActivated" value="1 &lt;&lt; 2" />
      <member cname="G_TLS_CERTIFICATE_EXPIRED" name="Expired" value="1 &lt;&lt; 3" />
      <member cname="G_TLS_CERTIFICATE_REVOKED" name="Revoked" value="1 &lt;&lt; 4" />
      <member cname="G_TLS_CERTIFICATE_INSECURE" name="Insecure" value="1 &lt;&lt; 5" />
      <member cname="G_TLS_CERTIFICATE_GENERIC_ERROR" name="GenericError" value="1 &lt;&lt; 6" />
      <member cname="G_TLS_CERTIFICATE_VALIDATE_ALL" name="ValidateAll" value="0x007f" />
    </enum>
    <enum name="TlsError" cname="GTlsError" gtype="g_tls_error_get_type" type="enum">
      <member cname="G_TLS_ERROR_UNAVAILABLE" name="Unavailable" />
      <member cname="G_TLS_ERROR_MISC" name="Misc" />
      <member cname="G_TLS_ERROR_BAD_CERTIFICATE" name="BadCertificate" />
      <member cname="G_TLS_ERROR_NOT_TLS" name="NotTls" />
      <member cname="G_TLS_ERROR_HANDSHAKE" name="Handshake" />
      <member cname="G_TLS_ERROR_CERTIFICATE_REQUIRED" name="CertificateRequired" />
      <member cname="G_TLS_ERROR_EOF" name="Eof" />
    </enum>
    <enum name="TlsRehandshakeMode" cname="GTlsRehandshakeMode" gtype="g_tls_rehandshake_mode_get_type" type="enum">
      <member cname="G_TLS_REHANDSHAKE_NEVER" name="Never" />
      <member cname="G_TLS_REHANDSHAKE_SAFELY" name="Safely" />
      <member cname="G_TLS_REHANDSHAKE_UNSAFELY" name="Unsafely" />
    </enum>
    <enum name="UnixSocketAddressType" cname="GUnixSocketAddressType" gtype="g_unix_socket_address_type_get_type" type="enum">
      <member cname="G_UNIX_SOCKET_ADDRESS_INVALID" name="Invalid" />
      <member cname="G_UNIX_SOCKET_ADDRESS_ANONYMOUS" name="Anonymous" />
      <member cname="G_UNIX_SOCKET_ADDRESS_PATH" name="Path" />
      <member cname="G_UNIX_SOCKET_ADDRESS_ABSTRACT" name="Abstract" />
      <member cname="G_UNIX_SOCKET_ADDRESS_ABSTRACT_PADDED" name="AbstractPadded" />
    </enum>
    <enum name="ZlibCompressorFormat" cname="GZlibCompressorFormat" gtype="g_zlib_compressor_format_get_type" type="enum">
      <member cname="G_ZLIB_COMPRESSOR_FORMAT_ZLIB" name="Zlib" />
      <member cname="G_ZLIB_COMPRESSOR_FORMAT_GZIP" name="Gzip" />
      <member cname="G_ZLIB_COMPRESSOR_FORMAT_RAW" name="Raw" />
    </enum>
    <callback name="AsyncReadyCallback" cname="GAsyncReadyCallback">
      <return-type type="void" />
      <parameters>
        <parameter type="GObject*" name="source_object" />
        <parameter type="GAsyncResult*" name="res" />
        <parameter type="gpointer" name="user_data" />
      </parameters>
    </callback>
    <callback name="BusAcquiredCallback" cname="GBusAcquiredCallback">
      <return-type type="void" />
      <parameters>
        <parameter type="GDBusConnection*" name="connection" />
        <parameter type="const-gchar*" name="name" />
        <parameter type="gpointer" name="user_data" />
      </parameters>
    </callback>
    <callback name="BusNameAcquiredCallback" cname="GBusNameAcquiredCallback">
      <return-type type="void" />
      <parameters>
        <parameter type="GDBusConnection*" name="connection" />
        <parameter type="const-gchar*" name="name" />
        <parameter type="gpointer" name="user_data" />
      </parameters>
    </callback>
    <callback name="BusNameAppearedCallback" cname="GBusNameAppearedCallback">
      <return-type type="void" />
      <parameters>
        <parameter type="GDBusConnection*" name="connection" />
        <parameter type="const-gchar*" name="name" />
        <parameter type="const-gchar*" name="name_owner" />
        <parameter type="gpointer" name="user_data" />
      </parameters>
    </callback>
    <callback name="BusNameLostCallback" cname="GBusNameLostCallback">
      <return-type type="void" />
      <parameters>
        <parameter type="GDBusConnection*" name="connection" />
        <parameter type="const-gchar*" name="name" />
        <parameter type="gpointer" name="user_data" />
      </parameters>
    </callback>
    <callback name="BusNameVanishedCallback" cname="GBusNameVanishedCallback">
      <return-type type="void" />
      <parameters>
        <parameter type="GDBusConnection*" name="connection" />
        <parameter type="const-gchar*" name="name" />
        <parameter type="gpointer" name="user_data" />
      </parameters>
    </callback>
    <callback name="CancellableSourceFunc" cname="GCancellableSourceFunc">
      <return-type type="gboolean" />
      <parameters>
        <parameter type="GCancellable*" name="cancellable" />
        <parameter type="gpointer" name="user_data" />
      </parameters>
    </callback>
    <callback name="DBusInterfaceGetPropertyFunc" cname="GDBusInterfaceGetPropertyFunc">
      <return-type type="GVariant*" />
      <parameters>
        <parameter type="GDBusConnection*" name="connection" />
        <parameter type="const-gchar*" name="sender" />
        <parameter type="const-gchar*" name="object_path" />
        <parameter type="const-gchar*" name="interface_name" />
        <parameter type="const-gchar*" name="property_name" />
        <parameter type="GError**" name="error" />
        <parameter type="gpointer" name="user_data" />
      </parameters>
    </callback>
    <callback name="DBusInterfaceMethodCallFunc" cname="GDBusInterfaceMethodCallFunc">
      <return-type type="void" />
      <parameters>
        <parameter type="GDBusConnection*" name="connection" />
        <parameter type="const-gchar*" name="sender" />
        <parameter type="const-gchar*" name="object_path" />
        <parameter type="const-gchar*" name="interface_name" />
        <parameter type="const-gchar*" name="method_name" />
        <parameter type="GVariant*" name="parameters" />
        <parameter type="GDBusMethodInvocation*" name="invocation" />
        <parameter type="gpointer" name="user_data" />
      </parameters>
    </callback>
    <callback name="DBusInterfaceSetPropertyFunc" cname="GDBusInterfaceSetPropertyFunc">
      <return-type type="gboolean" />
      <parameters>
        <parameter type="GDBusConnection*" name="connection" />
        <parameter type="const-gchar*" name="sender" />
        <parameter type="const-gchar*" name="object_path" />
        <parameter type="const-gchar*" name="interface_name" />
        <parameter type="const-gchar*" name="property_name" />
        <parameter type="GVariant*" name="value" />
        <parameter type="GError**" name="error" />
        <parameter type="gpointer" name="user_data" />
      </parameters>
    </callback>
    <callback name="DBusMessageFilterFunction" cname="GDBusMessageFilterFunction">
      <return-type type="GDBusMessage*" />
      <parameters>
        <parameter type="GDBusConnection*" name="connection" />
        <parameter type="GDBusMessage*" name="message" />
        <parameter type="gboolean" name="incoming" />
        <parameter type="gpointer" name="user_data" />
      </parameters>
    </callback>
    <callback name="DBusSignalCallback" cname="GDBusSignalCallback">
      <return-type type="void" />
      <parameters>
        <parameter type="GDBusConnection*" name="connection" />
        <parameter type="const-gchar*" name="sender_name" />
        <parameter type="const-gchar*" name="object_path" />
        <parameter type="const-gchar*" name="interface_name" />
        <parameter type="const-gchar*" name="signal_name" />
        <parameter type="GVariant*" name="parameters" />
        <parameter type="gpointer" name="user_data" />
      </parameters>
    </callback>
    <callback name="DBusSubtreeDispatchFunc" cname="GDBusSubtreeDispatchFunc">
      <return-type type="const-GDBusInterfaceVTable*" />
      <parameters>
        <parameter type="GDBusConnection*" name="connection" />
        <parameter type="const-gchar*" name="sender" />
        <parameter type="const-gchar*" name="object_path" />
        <parameter type="const-gchar*" name="interface_name" />
        <parameter type="const-gchar*" name="node" />
        <parameter type="gpointer*" name="out_user_data" />
        <parameter type="gpointer" name="user_data" />
      </parameters>
    </callback>
    <callback name="DBusSubtreeEnumerateFunc" cname="GDBusSubtreeEnumerateFunc">
      <return-type type="gchar**" />
      <parameters>
        <parameter type="GDBusConnection*" name="connection" />
        <parameter type="const-gchar*" name="sender" />
        <parameter type="const-gchar*" name="object_path" />
        <parameter type="gpointer" name="user_data" />
      </parameters>
    </callback>
    <callback name="DBusSubtreeIntrospectFunc" cname="GDBusSubtreeIntrospectFunc">
      <return-type type="GDBusInterfaceInfo**" />
      <parameters>
        <parameter type="GDBusConnection*" name="connection" />
        <parameter type="const-gchar*" name="sender" />
        <parameter type="const-gchar*" name="object_path" />
        <parameter type="const-gchar*" name="node" />
        <parameter type="gpointer" name="user_data" />
      </parameters>
    </callback>
    <callback name="DesktopAppLaunchCallback" cname="GDesktopAppLaunchCallback">
      <return-type type="void" />
      <parameters>
        <parameter type="GDesktopAppInfo*" name="appinfo" />
        <parameter type="GPid" name="pid" />
        <parameter type="gpointer" name="user_data" />
      </parameters>
    </callback>
    <callback name="FileProgressCallback" cname="GFileProgressCallback">
      <return-type type="void" />
      <parameters>
        <parameter type="goffset" name="current_num_bytes" />
        <parameter type="goffset" name="total_num_bytes" />
        <parameter type="gpointer" name="user_data" />
      </parameters>
    </callback>
    <callback name="FileReadMoreCallback" cname="GFileReadMoreCallback">
      <return-type type="gboolean" />
      <parameters>
        <parameter type="const-char*" name="file_contents" />
        <parameter type="goffset" name="file_size" />
        <parameter type="gpointer" name="callback_data" />
      </parameters>
    </callback>
    <callback name="IOSchedulerJobFunc" cname="GIOSchedulerJobFunc">
      <return-type type="gboolean" />
      <parameters>
        <parameter type="GIOSchedulerJob*" name="job" />
        <parameter type="GCancellable*" name="cancellable" />
        <parameter type="gpointer" name="user_data" />
      </parameters>
    </callback>
    <callback name="PollableSourceFunc" cname="GPollableSourceFunc">
      <return-type type="gboolean" />
      <parameters>
        <parameter type="GObject*" name="pollable_stream" />
        <parameter type="gpointer" name="user_data" />
      </parameters>
    </callback>
    <callback name="ReallocFunc" cname="GReallocFunc">
      <return-type type="gpointer" />
      <parameters>
        <parameter type="gpointer" name="data" />
        <parameter type="gsize" name="size" />
      </parameters>
    </callback>
    <callback name="SettingsBindGetMapping" cname="GSettingsBindGetMapping">
      <return-type type="gboolean" />
      <parameters>
        <parameter type="GValue*" name="value" />
        <parameter type="GVariant*" name="variant" />
        <parameter type="gpointer" name="user_data" />
      </parameters>
    </callback>
    <callback name="SettingsBindSetMapping" cname="GSettingsBindSetMapping">
      <return-type type="GVariant*" />
      <parameters>
        <parameter type="const-GValue*" name="value" />
        <parameter type="const-GVariantType*" name="expected_type" />
        <parameter type="gpointer" name="user_data" />
      </parameters>
    </callback>
    <callback name="SettingsGetMapping" cname="GSettingsGetMapping">
      <return-type type="gboolean" />
      <parameters>
        <parameter type="GVariant*" name="value" />
        <parameter type="gpointer*" name="result" />
        <parameter type="gpointer" name="user_data" />
      </parameters>
    </callback>
    <callback name="SimpleAsyncThreadFunc" cname="GSimpleAsyncThreadFunc">
      <return-type type="void" />
      <parameters>
        <parameter type="GSimpleAsyncResult*" name="res" />
        <parameter type="GObject*" name="object" />
        <parameter type="GCancellable*" name="cancellable" />
      </parameters>
    </callback>
    <callback name="SocketSourceFunc" cname="GSocketSourceFunc">
      <return-type type="gboolean" />
      <parameters>
        <parameter type="GSocket*" name="socket" />
        <parameter type="GIOCondition" name="condition" />
        <parameter type="gpointer" name="user_data" />
      </parameters>
    </callback>
    <interface name="Action" cname="GAction">
      <class_struct cname="GActionInterface">
        <field name="GIface" cname="g_iface" type="GTypeInterface" />
        <method vm="get_name" />
        <method vm="get_parameter_type" />
        <method vm="get_state_type" />
        <method vm="get_state_hint" />
        <method vm="get_enabled" />
        <method vm="get_state" />
        <method vm="set_state" />
        <method vm="activate" />
      </class_struct>
      <property name="Name" cname="name" type="gchar*" readable="true" writeable="true" construct-only="true" />
      <property name="ParameterType" cname="parameter-type" type="GVariantType" readable="true" writeable="true" construct-only="true" />
      <property name="Enabled" cname="enabled" type="gboolean" readable="true" writeable="true" construct="true" />
      <property name="StateType" cname="state-type" type="GVariantType" readable="true" />
      <property name="State" cname="state" type="variant" readable="true" writeable="true" construct="true" />
      <virtual_method name="GetName" cname="get_name">
        <return-type type="gchar*" />
        <parameters />
      </virtual_method>
      <virtual_method name="GetParameterType" cname="get_parameter_type">
        <return-type type="GVariantType*" />
        <parameters />
      </virtual_method>
      <virtual_method name="GetStateType" cname="get_state_type">
        <return-type type="GVariantType*" />
        <parameters />
      </virtual_method>
      <virtual_method name="GetStateHint" cname="get_state_hint">
        <return-type type="GVariant*" />
        <parameters />
      </virtual_method>
      <virtual_method name="GetEnabled" cname="get_enabled">
        <return-type type="gboolean" />
        <parameters />
      </virtual_method>
      <virtual_method name="GetState" cname="get_state">
        <return-type type="GVariant*" />
        <parameters />
      </virtual_method>
      <virtual_method name="SetState" cname="set_state">
        <return-type type="void" />
        <parameters>
          <parameter type="GVariant*" name="value" />
        </parameters>
      </virtual_method>
      <virtual_method name="Activate" cname="activate">
        <return-type type="void" />
        <parameters>
          <parameter type="GVariant*" name="parameter" />
        </parameters>
      </virtual_method>
      <method name="Activate" cname="g_action_activate">
        <return-type type="void" />
        <parameters>
          <parameter type="GVariant*" name="parameter" />
        </parameters>
      </method>
      <method name="GetEnabled" cname="g_action_get_enabled">
        <return-type type="gboolean" />
      </method>
      <method name="GetName" cname="g_action_get_name">
        <return-type type="const-gchar*" />
      </method>
      <method name="GetParameterType" cname="g_action_get_parameter_type">
        <return-type type="const-GVariantType*" />
      </method>
      <method name="GetState" cname="g_action_get_state">
        <return-type type="GVariant*" />
      </method>
      <method name="GetStateHint" cname="g_action_get_state_hint">
        <return-type type="GVariant*" />
      </method>
      <method name="GetStateType" cname="g_action_get_state_type">
        <return-type type="const-GVariantType*" />
      </method>
      <method name="GetType" cname="g_action_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="SetState" cname="g_action_set_state">
        <return-type type="void" />
        <parameters>
          <parameter type="GVariant*" name="value" />
        </parameters>
      </method>
    </interface>
    <interface name="ActionGroup" cname="GActionGroup">
      <class_struct cname="GActionGroupInterface">
        <field name="GIface" cname="g_iface" type="GTypeInterface" />
        <method vm="has_action" />
        <method vm="list_actions" />
        <method vm="get_action_enabled" />
        <method vm="get_action_parameter_type" />
        <method vm="get_action_state_type" />
        <method vm="get_action_state_hint" />
        <method vm="get_action_state" />
        <method vm="change_action_state" />
        <method vm="activate_action" />
        <method signal_vm="action_added" />
        <method signal_vm="action_removed" />
        <method signal_vm="action_enabled_changed" />
        <method signal_vm="action_state_changed" />
      </class_struct>
      <signal name="ActionAdded" cname="action-added" when="LAST" field_name="action_added">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="action_name" />
        </parameters>
      </signal>
      <signal name="ActionRemoved" cname="action-removed" when="LAST" field_name="action_removed">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="action_name" />
        </parameters>
      </signal>
      <signal name="ActionEnabledChanged" cname="action-enabled-changed" when="LAST" field_name="action_enabled_changed">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="action_name" />
          <parameter type="gboolean" name="enabled" />
        </parameters>
      </signal>
      <signal name="ActionStateChanged" cname="action-state-changed" when="LAST" field_name="action_state_changed">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="action_name" />
          <parameter type="GVariant*" name="value" />
        </parameters>
      </signal>
      <virtual_method name="HasAction" cname="has_action">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-gchar*" name="action_name" />
        </parameters>
      </virtual_method>
      <virtual_method name="ListActions" cname="list_actions">
        <return-type type="gchar**" />
        <parameters />
      </virtual_method>
      <virtual_method name="GetActionEnabled" cname="get_action_enabled">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-gchar*" name="action_name" />
        </parameters>
      </virtual_method>
      <virtual_method name="GetActionParameterType" cname="get_action_parameter_type">
        <return-type type="GVariantType*" />
        <parameters>
          <parameter type="const-gchar*" name="action_name" />
        </parameters>
      </virtual_method>
      <virtual_method name="GetActionStateType" cname="get_action_state_type">
        <return-type type="GVariantType*" />
        <parameters>
          <parameter type="const-gchar*" name="action_name" />
        </parameters>
      </virtual_method>
      <virtual_method name="GetActionStateHint" cname="get_action_state_hint">
        <return-type type="GVariant*" />
        <parameters>
          <parameter type="const-gchar*" name="action_name" />
        </parameters>
      </virtual_method>
      <virtual_method name="GetActionState" cname="get_action_state">
        <return-type type="GVariant*" />
        <parameters>
          <parameter type="const-gchar*" name="action_name" />
        </parameters>
      </virtual_method>
      <virtual_method name="ChangeActionState" cname="change_action_state">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="action_name" />
          <parameter type="GVariant*" name="value" />
        </parameters>
      </virtual_method>
      <virtual_method name="ActivateAction" cname="activate_action">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="action_name" />
          <parameter type="GVariant*" name="parameter" />
        </parameters>
      </virtual_method>
      <method name="ActionAdded" cname="g_action_group_action_added">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="action_name" />
        </parameters>
      </method>
      <method name="ActionEnabledChanged" cname="g_action_group_action_enabled_changed">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="action_name" />
          <parameter type="gboolean" name="enabled" />
        </parameters>
      </method>
      <method name="ActionRemoved" cname="g_action_group_action_removed">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="action_name" />
        </parameters>
      </method>
      <method name="ActionStateChanged" cname="g_action_group_action_state_changed">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="action_name" />
          <parameter type="GVariant*" name="state" />
        </parameters>
      </method>
      <method name="ActivateAction" cname="g_action_group_activate_action">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="action_name" />
          <parameter type="GVariant*" name="parameter" />
        </parameters>
      </method>
      <method name="ChangeActionState" cname="g_action_group_change_action_state">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="action_name" />
          <parameter type="GVariant*" name="value" />
        </parameters>
      </method>
      <method name="GetActionEnabled" cname="g_action_group_get_action_enabled">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-gchar*" name="action_name" />
        </parameters>
      </method>
      <method name="GetActionParameterType" cname="g_action_group_get_action_parameter_type">
        <return-type type="const-GVariantType*" />
        <parameters>
          <parameter type="const-gchar*" name="action_name" />
        </parameters>
      </method>
      <method name="GetActionState" cname="g_action_group_get_action_state">
        <return-type type="GVariant*" />
        <parameters>
          <parameter type="const-gchar*" name="action_name" />
        </parameters>
      </method>
      <method name="GetActionStateHint" cname="g_action_group_get_action_state_hint">
        <return-type type="GVariant*" />
        <parameters>
          <parameter type="const-gchar*" name="action_name" />
        </parameters>
      </method>
      <method name="GetActionStateType" cname="g_action_group_get_action_state_type">
        <return-type type="const-GVariantType*" />
        <parameters>
          <parameter type="const-gchar*" name="action_name" />
        </parameters>
      </method>
      <method name="GetType" cname="g_action_group_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="HasAction" cname="g_action_group_has_action">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-gchar*" name="action_name" />
        </parameters>
      </method>
      <method name="ListActions" cname="g_action_group_list_actions">
        <return-type type="gchar**" />
      </method>
    </interface>
    <interface name="AppInfo" cname="GAppInfo">
      <class_struct cname="GAppInfoIface">
        <field name="GIface" cname="g_iface" type="GTypeInterface" />
        <method vm="dup" />
        <method vm="equal" />
        <method vm="get_id" />
        <method vm="get_name" />
        <method vm="get_description" />
        <method vm="get_executable" />
        <method vm="get_icon" />
        <method vm="launch" />
        <method vm="supports_uris" />
        <method vm="supports_files" />
        <method vm="launch_uris" />
        <method vm="should_show" />
        <method vm="set_as_default_for_type" />
        <method vm="set_as_default_for_extension" />
        <method vm="add_supports_type" />
        <method vm="can_remove_supports_type" />
        <method vm="remove_supports_type" />
        <method vm="can_delete" />
        <method vm="do_delete" />
        <method vm="get_commandline" />
        <method vm="get_display_name" />
        <method vm="set_as_last_used_for_type" />
      </class_struct>
      <virtual_method name="Dup" cname="dup">
        <return-type type="GAppInfo*" />
        <parameters />
      </virtual_method>
      <virtual_method name="Equal" cname="equal">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAppInfo*" name="appinfo2" />
        </parameters>
      </virtual_method>
      <virtual_method name="GetId" cname="get_id">
        <return-type type="char*" />
        <parameters />
      </virtual_method>
      <virtual_method name="GetName" cname="get_name">
        <return-type type="char*" />
        <parameters />
      </virtual_method>
      <virtual_method name="GetDescription" cname="get_description">
        <return-type type="char*" />
        <parameters />
      </virtual_method>
      <virtual_method name="GetExecutable" cname="get_executable">
        <return-type type="char*" />
        <parameters />
      </virtual_method>
      <virtual_method name="GetIcon" cname="get_icon">
        <return-type type="GIcon*" />
        <parameters />
      </virtual_method>
      <virtual_method name="Launch" cname="launch">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GList*" name="files" />
          <parameter type="GAppLaunchContext*" name="launch_context" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="SupportsUris" cname="supports_uris">
        <return-type type="gboolean" />
        <parameters />
      </virtual_method>
      <virtual_method name="SupportsFiles" cname="supports_files">
        <return-type type="gboolean" />
        <parameters />
      </virtual_method>
      <virtual_method name="LaunchUris" cname="launch_uris">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GList*" name="uris" />
          <parameter type="GAppLaunchContext*" name="launch_context" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="ShouldShow" cname="should_show">
        <return-type type="gboolean" />
        <parameters />
      </virtual_method>
      <virtual_method name="SetAsDefaultForType" cname="set_as_default_for_type">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-char*" name="content_type" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="SetAsDefaultForExtension" cname="set_as_default_for_extension">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-char*" name="extension" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="AddSupportsType" cname="add_supports_type">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-char*" name="content_type" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="CanRemoveSupportsType" cname="can_remove_supports_type">
        <return-type type="gboolean" />
        <parameters />
      </virtual_method>
      <virtual_method name="RemoveSupportsType" cname="remove_supports_type">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-char*" name="content_type" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="CanDelete" cname="can_delete">
        <return-type type="gboolean" />
        <parameters />
      </virtual_method>
      <virtual_method name="DoDelete" cname="do_delete">
        <return-type type="gboolean" />
        <parameters />
      </virtual_method>
      <virtual_method name="GetCommandline" cname="get_commandline">
        <return-type type="char*" />
        <parameters />
      </virtual_method>
      <virtual_method name="GetDisplayName" cname="get_display_name">
        <return-type type="char*" />
        <parameters />
      </virtual_method>
      <virtual_method name="SetAsLastUsedForType" cname="set_as_last_used_for_type">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-char*" name="content_type" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <method name="AddSupportsType" cname="g_app_info_add_supports_type">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-char*" name="content_type" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="CanDelete" cname="g_app_info_can_delete">
        <return-type type="gboolean" />
      </method>
      <method name="CanRemoveSupportsType" cname="g_app_info_can_remove_supports_type">
        <return-type type="gboolean" />
      </method>
      <method name="CreateFromCommandline" cname="g_app_info_create_from_commandline" shared="true">
        <return-type type="GAppInfo*" />
        <parameters>
          <parameter type="const-char*" name="commandline" />
          <parameter type="const-char*" name="application_name" />
          <parameter type="GAppInfoCreateFlags" name="flags" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="Delete" cname="g_app_info_delete">
        <return-type type="gboolean" />
      </method>
      <method name="Dup" cname="g_app_info_dup">
        <return-type type="GAppInfo*" />
      </method>
      <method name="Equal" cname="g_app_info_equal">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAppInfo*" name="appinfo2" />
        </parameters>
      </method>
      <method name="GetAll" cname="g_app_info_get_all" shared="true">
        <return-type type="GList*" />
      </method>
      <method name="GetAllForType" cname="g_app_info_get_all_for_type" shared="true">
        <return-type type="GList*" />
        <parameters>
          <parameter type="const-char*" name="content_type" />
        </parameters>
      </method>
      <method name="GetCommandline" cname="g_app_info_get_commandline">
        <return-type type="const-char*" />
      </method>
      <method name="GetDefaultForType" cname="g_app_info_get_default_for_type" shared="true">
        <return-type type="GAppInfo*" />
        <parameters>
          <parameter type="const-char*" name="content_type" />
          <parameter type="gboolean" name="must_support_uris" />
        </parameters>
      </method>
      <method name="GetDefaultForUriScheme" cname="g_app_info_get_default_for_uri_scheme" shared="true">
        <return-type type="GAppInfo*" />
        <parameters>
          <parameter type="const-char*" name="uri_scheme" />
        </parameters>
      </method>
      <method name="GetDescription" cname="g_app_info_get_description">
        <return-type type="const-char*" />
      </method>
      <method name="GetDisplayName" cname="g_app_info_get_display_name">
        <return-type type="const-char*" />
      </method>
      <method name="GetExecutable" cname="g_app_info_get_executable">
        <return-type type="const-char*" />
      </method>
      <method name="GetFallbackForType" cname="g_app_info_get_fallback_for_type" shared="true">
        <return-type type="GList*" />
        <parameters>
          <parameter type="const-gchar*" name="content_type" />
        </parameters>
      </method>
      <method name="GetIcon" cname="g_app_info_get_icon">
        <return-type type="GIcon*" />
      </method>
      <method name="GetId" cname="g_app_info_get_id">
        <return-type type="const-char*" />
      </method>
      <method name="GetName" cname="g_app_info_get_name">
        <return-type type="const-char*" />
      </method>
      <method name="GetRecommendedForType" cname="g_app_info_get_recommended_for_type" shared="true">
        <return-type type="GList*" />
        <parameters>
          <parameter type="const-gchar*" name="content_type" />
        </parameters>
      </method>
      <method name="GetType" cname="g_app_info_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="Launch" cname="g_app_info_launch">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GList*" name="files" />
          <parameter type="GAppLaunchContext*" name="launch_context" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="LaunchDefaultForUri" cname="g_app_info_launch_default_for_uri" shared="true">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-char*" name="uri" />
          <parameter type="GAppLaunchContext*" name="launch_context" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="LaunchUris" cname="g_app_info_launch_uris">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GList*" name="uris" />
          <parameter type="GAppLaunchContext*" name="launch_context" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="RemoveSupportsType" cname="g_app_info_remove_supports_type">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-char*" name="content_type" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="ResetTypeAssociations" cname="g_app_info_reset_type_associations" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="content_type" />
        </parameters>
      </method>
      <method name="SetAsDefaultForExtension" cname="g_app_info_set_as_default_for_extension">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-char*" name="extension" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="SetAsDefaultForType" cname="g_app_info_set_as_default_for_type">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-char*" name="content_type" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="SetAsLastUsedForType" cname="g_app_info_set_as_last_used_for_type">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-char*" name="content_type" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="ShouldShow" cname="g_app_info_should_show">
        <return-type type="gboolean" />
      </method>
      <method name="SupportsFiles" cname="g_app_info_supports_files">
        <return-type type="gboolean" />
      </method>
      <method name="SupportsUris" cname="g_app_info_supports_uris">
        <return-type type="gboolean" />
      </method>
    </interface>
    <interface name="AsyncInitable" cname="GAsyncInitable">
      <class_struct cname="GAsyncInitableIface">
        <field name="GIface" cname="g_iface" type="GTypeInterface" />
        <method vm="init_async" />
        <method vm="init_finish" />
      </class_struct>
      <virtual_method name="InitAsync" cname="init_async">
        <return-type type="void" />
        <parameters>
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="InitFinish" cname="init_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="res" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <method name="GetType" cname="g_async_initable_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="InitAsync" cname="g_async_initable_init_async">
        <return-type type="void" />
        <parameters>
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="InitFinish" cname="g_async_initable_init_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="res" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <constructor cname="g_async_initable_new_async">
        <parameters>
          <parameter type="GType" name="object_type" />
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
          <parameter type="const-gchar*" name="first_property_name" />
          <parameter ellipsis="true" />
        </parameters>
      </constructor>
      <constructor cname="g_async_initable_new_finish">
        <parameters>
          <parameter type="GAsyncInitable*" name="initable" />
          <parameter type="GAsyncResult*" name="res" />
          <parameter type="GError**" name="error" />
        </parameters>
      </constructor>
      <constructor cname="g_async_initable_new_valist_async">
        <parameters>
          <parameter type="GType" name="object_type" />
          <parameter type="const-gchar*" name="first_property_name" />
          <parameter type="va_list" name="var_args" />
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </constructor>
      <constructor cname="g_async_initable_newv_async">
        <parameters>
          <parameter type="GType" name="object_type" />
          <parameter type="guint" name="n_parameters" />
          <parameter type="GParameter*" name="parameters" />
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </constructor>
    </interface>
    <interface name="AsyncResult" cname="GAsyncResult">
      <class_struct cname="GAsyncResultIface">
        <field name="GIface" cname="g_iface" type="GTypeInterface" />
        <method vm="get_user_data" />
        <method vm="get_source_object" />
      </class_struct>
      <virtual_method name="GetUserData" cname="get_user_data">
        <return-type type="gpointer" />
        <parameters />
      </virtual_method>
      <virtual_method name="GetSourceObject" cname="get_source_object">
        <return-type type="GObject*" />
        <parameters />
      </virtual_method>
      <method name="GetSourceObject" cname="g_async_result_get_source_object">
        <return-type type="GObject*" />
      </method>
      <method name="GetType" cname="g_async_result_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="GetUserData" cname="g_async_result_get_user_data">
        <return-type type="gpointer" />
      </method>
    </interface>
    <interface name="Converter" cname="GConverter">
      <class_struct cname="GConverterIface">
        <field name="GIface" cname="g_iface" type="GTypeInterface" />
        <method vm="convert" />
        <method vm="reset" />
      </class_struct>
      <virtual_method name="Convert" cname="convert">
        <return-type type="GConverterResult" />
        <parameters>
          <parameter type="const-void*" name="inbuf" />
          <parameter type="gsize" name="inbuf_size" />
          <parameter type="void*" name="outbuf" />
          <parameter type="gsize" name="outbuf_size" />
          <parameter type="GConverterFlags" name="flags" />
          <parameter type="gsize*" name="bytes_read" />
          <parameter type="gsize*" name="bytes_written" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="Reset" cname="reset">
        <return-type type="void" />
        <parameters />
      </virtual_method>
      <method name="Convert" cname="g_converter_convert">
        <return-type type="GConverterResult" />
        <parameters>
          <parameter type="const-void*" name="inbuf" />
          <parameter type="gsize" name="inbuf_size" />
          <parameter type="void*" name="outbuf" />
          <parameter type="gsize" name="outbuf_size" />
          <parameter type="GConverterFlags" name="flags" />
          <parameter type="gsize*" name="bytes_read" />
          <parameter type="gsize*" name="bytes_written" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="GetType" cname="g_converter_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="Reset" cname="g_converter_reset">
        <return-type type="void" />
      </method>
    </interface>
    <interface name="DesktopAppInfoLookup" cname="GDesktopAppInfoLookup">
      <class_struct cname="GDesktopAppInfoLookupIface">
        <field name="GTypeInterface" cname="GTypeInterface" type="deprecated" />
        <method vm="get_default_for_uri_scheme" />
      </class_struct>
      <virtual_method name="GetDefaultForUriScheme" cname="get_default_for_uri_scheme">
        <return-type type="GAppInfo*" />
        <parameters>
          <parameter type="deprecated" name="const-char*" />
        </parameters>
      </virtual_method>
      <method name="GetDefaultForUriScheme" cname="g_desktop_app_info_lookup_get_default_for_uri_scheme" deprecated="1">
        <return-type type="GAppInfo*" />
        <parameters>
          <parameter type="const-char*" name="uri_scheme" />
        </parameters>
      </method>
      <method name="GetType" cname="g_desktop_app_info_lookup_get_type" deprecated="1" shared="true">
        <return-type type="GType" />
      </method>
    </interface>
    <interface name="Drive" cname="GDrive">
      <class_struct cname="GDriveIface">
        <field name="GIface" cname="g_iface" type="GTypeInterface" />
        <method signal_vm="changed" />
        <method signal_vm="disconnected" />
        <method signal_vm="eject_button" />
        <method vm="get_name" />
        <method vm="get_icon" />
        <method vm="has_volumes" />
        <method vm="get_volumes" />
        <method vm="is_media_removable" />
        <method vm="has_media" />
        <method vm="is_media_check_automatic" />
        <method vm="can_eject" />
        <method vm="can_poll_for_media" />
        <method vm="eject" />
        <method vm="eject_finish" />
        <method vm="poll_for_media" />
        <method vm="poll_for_media_finish" />
        <method vm="get_identifier" />
        <method vm="enumerate_identifiers" />
        <method vm="get_start_stop_type" />
        <method vm="can_start" />
        <method vm="can_start_degraded" />
        <method vm="start" />
        <method vm="start_finish" />
        <method vm="can_stop" />
        <method vm="stop" />
        <method vm="stop_finish" />
        <method signal_vm="stop_button" />
        <method vm="eject_with_operation" />
        <method vm="eject_with_operation_finish" />
      </class_struct>
      <signal name="Changed" cname="changed" when="LAST" field_name="changed">
        <return-type type="void" />
        <parameters />
      </signal>
      <signal name="Disconnected" cname="disconnected" when="LAST" field_name="disconnected">
        <return-type type="void" />
        <parameters />
      </signal>
      <signal name="EjectButton" cname="eject-button" when="LAST" field_name="eject_button">
        <return-type type="void" />
        <parameters />
      </signal>
      <signal name="StopButton" cname="stop-button" when="LAST" field_name="stop_button">
        <return-type type="void" />
        <parameters />
      </signal>
      <virtual_method name="GetName" cname="get_name">
        <return-type type="char*" />
        <parameters />
      </virtual_method>
      <virtual_method name="GetIcon" cname="get_icon">
        <return-type type="GIcon*" />
        <parameters />
      </virtual_method>
      <virtual_method name="HasVolumes" cname="has_volumes">
        <return-type type="gboolean" />
        <parameters />
      </virtual_method>
      <virtual_method name="GetVolumes" cname="get_volumes">
        <return-type type="GList*" />
        <parameters />
      </virtual_method>
      <virtual_method name="IsMediaRemovable" cname="is_media_removable">
        <return-type type="gboolean" />
        <parameters />
      </virtual_method>
      <virtual_method name="HasMedia" cname="has_media">
        <return-type type="gboolean" />
        <parameters />
      </virtual_method>
      <virtual_method name="IsMediaCheckAutomatic" cname="is_media_check_automatic">
        <return-type type="gboolean" />
        <parameters />
      </virtual_method>
      <virtual_method name="CanEject" cname="can_eject">
        <return-type type="gboolean" />
        <parameters />
      </virtual_method>
      <virtual_method name="CanPollForMedia" cname="can_poll_for_media">
        <return-type type="gboolean" />
        <parameters />
      </virtual_method>
      <virtual_method name="Eject" cname="eject">
        <return-type type="void" />
        <parameters>
          <parameter type="GMountUnmountFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="EjectFinish" cname="eject_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="PollForMedia" cname="poll_for_media">
        <return-type type="void" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="PollForMediaFinish" cname="poll_for_media_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="GetIdentifier" cname="get_identifier">
        <return-type type="char*" />
        <parameters>
          <parameter type="const-char*" name="kind" />
        </parameters>
      </virtual_method>
      <virtual_method name="EnumerateIdentifiers" cname="enumerate_identifiers">
        <return-type type="char**" />
        <parameters />
      </virtual_method>
      <virtual_method name="GetStartStopType" cname="get_start_stop_type">
        <return-type type="GDriveStartStopType" />
        <parameters />
      </virtual_method>
      <virtual_method name="CanStart" cname="can_start">
        <return-type type="gboolean" />
        <parameters />
      </virtual_method>
      <virtual_method name="CanStartDegraded" cname="can_start_degraded">
        <return-type type="gboolean" />
        <parameters />
      </virtual_method>
      <virtual_method name="Start" cname="start">
        <return-type type="void" />
        <parameters>
          <parameter type="GDriveStartFlags" name="flags" />
          <parameter type="GMountOperation*" name="mount_operation" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="StartFinish" cname="start_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="CanStop" cname="can_stop">
        <return-type type="gboolean" />
        <parameters />
      </virtual_method>
      <virtual_method name="Stop" cname="stop">
        <return-type type="void" />
        <parameters>
          <parameter type="GMountUnmountFlags" name="flags" />
          <parameter type="GMountOperation*" name="mount_operation" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="StopFinish" cname="stop_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="EjectWithOperation" cname="eject_with_operation">
        <return-type type="void" />
        <parameters>
          <parameter type="GMountUnmountFlags" name="flags" />
          <parameter type="GMountOperation*" name="mount_operation" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="EjectWithOperationFinish" cname="eject_with_operation_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <method name="CanEject" cname="g_drive_can_eject">
        <return-type type="gboolean" />
      </method>
      <method name="CanPollForMedia" cname="g_drive_can_poll_for_media">
        <return-type type="gboolean" />
      </method>
      <method name="CanStart" cname="g_drive_can_start">
        <return-type type="gboolean" />
      </method>
      <method name="CanStartDegraded" cname="g_drive_can_start_degraded">
        <return-type type="gboolean" />
      </method>
      <method name="CanStop" cname="g_drive_can_stop">
        <return-type type="gboolean" />
      </method>
      <method name="Eject" cname="g_drive_eject" deprecated="1">
        <return-type type="void" />
        <parameters>
          <parameter type="GMountUnmountFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="EjectFinish" cname="g_drive_eject_finish" deprecated="1">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="EjectWithOperation" cname="g_drive_eject_with_operation">
        <return-type type="void" />
        <parameters>
          <parameter type="GMountUnmountFlags" name="flags" />
          <parameter type="GMountOperation*" name="mount_operation" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="EjectWithOperationFinish" cname="g_drive_eject_with_operation_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="EnumerateIdentifiers" cname="g_drive_enumerate_identifiers">
        <return-type type="char**" />
      </method>
      <method name="GetIcon" cname="g_drive_get_icon">
        <return-type type="GIcon*" />
      </method>
      <method name="GetIdentifier" cname="g_drive_get_identifier">
        <return-type type="char*" />
        <parameters>
          <parameter type="const-char*" name="kind" />
        </parameters>
      </method>
      <method name="GetName" cname="g_drive_get_name">
        <return-type type="char*" />
      </method>
      <method name="GetStartStopType" cname="g_drive_get_start_stop_type">
        <return-type type="GDriveStartStopType" />
      </method>
      <method name="GetType" cname="g_drive_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="GetVolumes" cname="g_drive_get_volumes">
        <return-type type="GList*" />
      </method>
      <method name="HasMedia" cname="g_drive_has_media">
        <return-type type="gboolean" />
      </method>
      <method name="HasVolumes" cname="g_drive_has_volumes">
        <return-type type="gboolean" />
      </method>
      <method name="IsMediaCheckAutomatic" cname="g_drive_is_media_check_automatic">
        <return-type type="gboolean" />
      </method>
      <method name="IsMediaRemovable" cname="g_drive_is_media_removable">
        <return-type type="gboolean" />
      </method>
      <method name="PollForMedia" cname="g_drive_poll_for_media">
        <return-type type="void" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="PollForMediaFinish" cname="g_drive_poll_for_media_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="Start" cname="g_drive_start">
        <return-type type="void" />
        <parameters>
          <parameter type="GDriveStartFlags" name="flags" />
          <parameter type="GMountOperation*" name="mount_operation" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="StartFinish" cname="g_drive_start_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="Stop" cname="g_drive_stop">
        <return-type type="void" />
        <parameters>
          <parameter type="GMountUnmountFlags" name="flags" />
          <parameter type="GMountOperation*" name="mount_operation" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="StopFinish" cname="g_drive_stop_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
    </interface>
    <interface name="File" cname="GFile">
      <class_struct cname="GFileIface">
        <field name="GIface" cname="g_iface" type="GTypeInterface" />
        <method vm="dup" />
        <method vm="hash" />
        <method vm="equal" />
        <method vm="is_native" />
        <method vm="has_uri_scheme" />
        <method vm="get_uri_scheme" />
        <method vm="get_basename" />
        <method vm="get_path" />
        <method vm="get_uri" />
        <method vm="get_parse_name" />
        <method vm="get_parent" />
        <method vm="prefix_matches" />
        <method vm="get_relative_path" />
        <method vm="resolve_relative_path" />
        <method vm="get_child_for_display_name" />
        <method vm="enumerate_children" />
        <method vm="enumerate_children_async" />
        <method vm="enumerate_children_finish" />
        <method vm="query_info" />
        <method vm="query_info_async" />
        <method vm="query_info_finish" />
        <method vm="query_filesystem_info" />
        <method vm="query_filesystem_info_async" />
        <method vm="query_filesystem_info_finish" />
        <method vm="find_enclosing_mount" />
        <method vm="find_enclosing_mount_async" />
        <method vm="find_enclosing_mount_finish" />
        <method vm="set_display_name" />
        <method vm="set_display_name_async" />
        <method vm="set_display_name_finish" />
        <method vm="query_settable_attributes" />
        <method vm="_query_settable_attributes_async" />
        <method vm="_query_settable_attributes_finish" />
        <method vm="query_writable_namespaces" />
        <method vm="_query_writable_namespaces_async" />
        <method vm="_query_writable_namespaces_finish" />
        <method vm="set_attribute" />
        <method vm="set_attributes_from_info" />
        <method vm="set_attributes_async" />
        <method vm="set_attributes_finish" />
        <method vm="read_fn" />
        <method vm="read_async" />
        <method vm="read_finish" />
        <method vm="append_to" />
        <method vm="append_to_async" />
        <method vm="append_to_finish" />
        <method vm="create" />
        <method vm="create_async" />
        <method vm="create_finish" />
        <method vm="replace" />
        <method vm="replace_async" />
        <method vm="replace_finish" />
        <method vm="delete_file" />
        <method vm="_delete_file_async" />
        <method vm="_delete_file_finish" />
        <method vm="trash" />
        <method vm="_trash_async" />
        <method vm="_trash_finish" />
        <method vm="make_directory" />
        <method vm="_make_directory_async" />
        <method vm="_make_directory_finish" />
        <method vm="make_symbolic_link" />
        <method vm="_make_symbolic_link_async" />
        <method vm="_make_symbolic_link_finish" />
        <method vm="copy" />
        <method vm="copy_async" />
        <method vm="copy_finish" />
        <method vm="move" />
        <method vm="_move_async" />
        <method vm="_move_finish" />
        <method vm="mount_mountable" />
        <method vm="mount_mountable_finish" />
        <method vm="unmount_mountable" />
        <method vm="unmount_mountable_finish" />
        <method vm="eject_mountable" />
        <method vm="eject_mountable_finish" />
        <method vm="mount_enclosing_volume" />
        <method vm="mount_enclosing_volume_finish" />
        <method vm="monitor_dir" />
        <method vm="monitor_file" />
        <method vm="open_readwrite" />
        <method vm="open_readwrite_async" />
        <method vm="open_readwrite_finish" />
        <method vm="create_readwrite" />
        <method vm="create_readwrite_async" />
        <method vm="create_readwrite_finish" />
        <method vm="replace_readwrite" />
        <method vm="replace_readwrite_async" />
        <method vm="replace_readwrite_finish" />
        <method vm="start_mountable" />
        <method vm="start_mountable_finish" />
        <method vm="stop_mountable" />
        <method vm="stop_mountable_finish" />
        <field name="SupportsThreadContexts" cname="supports_thread_contexts" type="gboolean" />
        <method vm="unmount_mountable_with_operation" />
        <method vm="unmount_mountable_with_operation_finish" />
        <method vm="eject_mountable_with_operation" />
        <method vm="eject_mountable_with_operation_finish" />
        <method vm="poll_mountable" />
        <method vm="poll_mountable_finish" />
      </class_struct>
      <virtual_method name="Dup" cname="dup">
        <return-type type="GFile*" />
        <parameters />
      </virtual_method>
      <virtual_method name="Hash" cname="hash">
        <return-type type="guint" />
        <parameters />
      </virtual_method>
      <virtual_method name="Equal" cname="equal">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GFile*" name="file2" />
        </parameters>
      </virtual_method>
      <virtual_method name="IsNative" cname="is_native">
        <return-type type="gboolean" />
        <parameters />
      </virtual_method>
      <virtual_method name="HasUriScheme" cname="has_uri_scheme">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-char*" name="uri_scheme" />
        </parameters>
      </virtual_method>
      <virtual_method name="GetUriScheme" cname="get_uri_scheme">
        <return-type type="char*" />
        <parameters />
      </virtual_method>
      <virtual_method name="GetBasename" cname="get_basename">
        <return-type type="char*" />
        <parameters />
      </virtual_method>
      <virtual_method name="GetPath" cname="get_path">
        <return-type type="char*" />
        <parameters />
      </virtual_method>
      <virtual_method name="GetUri" cname="get_uri">
        <return-type type="char*" />
        <parameters />
      </virtual_method>
      <virtual_method name="GetParseName" cname="get_parse_name">
        <return-type type="char*" />
        <parameters />
      </virtual_method>
      <virtual_method name="GetParent" cname="get_parent">
        <return-type type="GFile*" />
        <parameters />
      </virtual_method>
      <virtual_method name="PrefixMatches" cname="prefix_matches">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GFile*" name="file" />
        </parameters>
      </virtual_method>
      <virtual_method name="GetRelativePath" cname="get_relative_path">
        <return-type type="char*" />
        <parameters>
          <parameter type="GFile*" name="descendant" />
        </parameters>
      </virtual_method>
      <virtual_method name="ResolveRelativePath" cname="resolve_relative_path">
        <return-type type="GFile*" />
        <parameters>
          <parameter type="const-char*" name="relative_path" />
        </parameters>
      </virtual_method>
      <virtual_method name="GetChildForDisplayName" cname="get_child_for_display_name">
        <return-type type="GFile*" />
        <parameters>
          <parameter type="const-char*" name="display_name" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="EnumerateChildren" cname="enumerate_children">
        <return-type type="GFileEnumerator*" />
        <parameters>
          <parameter type="const-char*" name="attributes" />
          <parameter type="GFileQueryInfoFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="EnumerateChildrenAsync" cname="enumerate_children_async">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="attributes" />
          <parameter type="GFileQueryInfoFlags" name="flags" />
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="EnumerateChildrenFinish" cname="enumerate_children_finish">
        <return-type type="GFileEnumerator*" />
        <parameters>
          <parameter type="GAsyncResult*" name="res" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="QueryInfo" cname="query_info">
        <return-type type="GFileInfo*" />
        <parameters>
          <parameter type="const-char*" name="attributes" />
          <parameter type="GFileQueryInfoFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="QueryInfoAsync" cname="query_info_async">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="attributes" />
          <parameter type="GFileQueryInfoFlags" name="flags" />
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="QueryInfoFinish" cname="query_info_finish">
        <return-type type="GFileInfo*" />
        <parameters>
          <parameter type="GAsyncResult*" name="res" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="QueryFilesystemInfo" cname="query_filesystem_info">
        <return-type type="GFileInfo*" />
        <parameters>
          <parameter type="const-char*" name="attributes" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="QueryFilesystemInfoAsync" cname="query_filesystem_info_async">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="attributes" />
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="QueryFilesystemInfoFinish" cname="query_filesystem_info_finish">
        <return-type type="GFileInfo*" />
        <parameters>
          <parameter type="GAsyncResult*" name="res" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="FindEnclosingMount" cname="find_enclosing_mount">
        <return-type type="GMount*" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="FindEnclosingMountAsync" cname="find_enclosing_mount_async">
        <return-type type="void" />
        <parameters>
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="FindEnclosingMountFinish" cname="find_enclosing_mount_finish">
        <return-type type="GMount*" />
        <parameters>
          <parameter type="GAsyncResult*" name="res" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="SetDisplayName" cname="set_display_name">
        <return-type type="GFile*" />
        <parameters>
          <parameter type="const-char*" name="display_name" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="SetDisplayNameAsync" cname="set_display_name_async">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="display_name" />
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="SetDisplayNameFinish" cname="set_display_name_finish">
        <return-type type="GFile*" />
        <parameters>
          <parameter type="GAsyncResult*" name="res" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="QuerySettableAttributes" cname="query_settable_attributes">
        <return-type type="GFileAttributeInfoList*" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="QuerySettableAttributesAsync" cname="_query_settable_attributes_async" shared="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="QuerySettableAttributesFinish" cname="_query_settable_attributes_finish" shared="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="QueryWritableNamespaces" cname="query_writable_namespaces">
        <return-type type="GFileAttributeInfoList*" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="QueryWritableNamespacesAsync" cname="_query_writable_namespaces_async" shared="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="QueryWritableNamespacesFinish" cname="_query_writable_namespaces_finish" shared="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="SetAttribute" cname="set_attribute">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-char*" name="attribute" />
          <parameter type="GFileAttributeType" name="type" />
          <parameter type="gpointer" name="value_p" />
          <parameter type="GFileQueryInfoFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="SetAttributesFromInfo" cname="set_attributes_from_info">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GFileInfo*" name="info" />
          <parameter type="GFileQueryInfoFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="SetAttributesAsync" cname="set_attributes_async">
        <return-type type="void" />
        <parameters>
          <parameter type="GFileInfo*" name="info" />
          <parameter type="GFileQueryInfoFlags" name="flags" />
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="SetAttributesFinish" cname="set_attributes_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GFileInfo**" name="info" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="ReadFn" cname="read_fn">
        <return-type type="GFileInputStream*" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="ReadAsync" cname="read_async">
        <return-type type="void" />
        <parameters>
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="ReadFinish" cname="read_finish">
        <return-type type="GFileInputStream*" />
        <parameters>
          <parameter type="GAsyncResult*" name="res" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="AppendTo" cname="append_to">
        <return-type type="GFileOutputStream*" />
        <parameters>
          <parameter type="GFileCreateFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="AppendToAsync" cname="append_to_async">
        <return-type type="void" />
        <parameters>
          <parameter type="GFileCreateFlags" name="flags" />
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="AppendToFinish" cname="append_to_finish">
        <return-type type="GFileOutputStream*" />
        <parameters>
          <parameter type="GAsyncResult*" name="res" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="Create" cname="create">
        <return-type type="GFileOutputStream*" />
        <parameters>
          <parameter type="GFileCreateFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="CreateAsync" cname="create_async">
        <return-type type="void" />
        <parameters>
          <parameter type="GFileCreateFlags" name="flags" />
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="CreateFinish" cname="create_finish">
        <return-type type="GFileOutputStream*" />
        <parameters>
          <parameter type="GAsyncResult*" name="res" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="Replace" cname="replace">
        <return-type type="GFileOutputStream*" />
        <parameters>
          <parameter type="const-char*" name="etag" />
          <parameter type="gboolean" name="make_backup" />
          <parameter type="GFileCreateFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="ReplaceAsync" cname="replace_async">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="etag" />
          <parameter type="gboolean" name="make_backup" />
          <parameter type="GFileCreateFlags" name="flags" />
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="ReplaceFinish" cname="replace_finish">
        <return-type type="GFileOutputStream*" />
        <parameters>
          <parameter type="GAsyncResult*" name="res" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="DeleteFile" cname="delete_file">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="DeleteFileAsync" cname="_delete_file_async" shared="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="DeleteFileFinish" cname="_delete_file_finish" shared="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="Trash" cname="trash">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="TrashAsync" cname="_trash_async" shared="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="TrashFinish" cname="_trash_finish" shared="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="MakeDirectory" cname="make_directory">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="MakeDirectoryAsync" cname="_make_directory_async" shared="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="MakeDirectoryFinish" cname="_make_directory_finish" shared="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="MakeSymbolicLink" cname="make_symbolic_link">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-char*" name="symlink_value" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="MakeSymbolicLinkAsync" cname="_make_symbolic_link_async" shared="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="MakeSymbolicLinkFinish" cname="_make_symbolic_link_finish" shared="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="Copy" cname="copy">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GFile*" name="destination" />
          <parameter type="GFileCopyFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GFileProgressCallback" name="progress_callback" />
          <parameter type="gpointer" name="progress_callback_data" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="CopyAsync" cname="copy_async">
        <return-type type="void" />
        <parameters>
          <parameter type="GFile*" name="destination" />
          <parameter type="GFileCopyFlags" name="flags" />
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GFileProgressCallback" name="progress_callback" />
          <parameter type="gpointer" name="progress_callback_data" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="CopyFinish" cname="copy_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="res" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="Move" cname="move">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GFile*" name="destination" />
          <parameter type="GFileCopyFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GFileProgressCallback" name="progress_callback" />
          <parameter type="gpointer" name="progress_callback_data" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="MoveAsync" cname="_move_async" shared="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="MoveFinish" cname="_move_finish" shared="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="MountMountable" cname="mount_mountable">
        <return-type type="void" />
        <parameters>
          <parameter type="GMountMountFlags" name="flags" />
          <parameter type="GMountOperation*" name="mount_operation" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="MountMountableFinish" cname="mount_mountable_finish">
        <return-type type="GFile*" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="UnmountMountable" cname="unmount_mountable">
        <return-type type="void" />
        <parameters>
          <parameter type="GMountUnmountFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="UnmountMountableFinish" cname="unmount_mountable_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="EjectMountable" cname="eject_mountable">
        <return-type type="void" />
        <parameters>
          <parameter type="GMountUnmountFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="EjectMountableFinish" cname="eject_mountable_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="MountEnclosingVolume" cname="mount_enclosing_volume">
        <return-type type="void" />
        <parameters>
          <parameter type="GMountMountFlags" name="flags" />
          <parameter type="GMountOperation*" name="mount_operation" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="MountEnclosingVolumeFinish" cname="mount_enclosing_volume_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="MonitorDir" cname="monitor_dir">
        <return-type type="GFileMonitor*" />
        <parameters>
          <parameter type="GFileMonitorFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="MonitorFile" cname="monitor_file">
        <return-type type="GFileMonitor*" />
        <parameters>
          <parameter type="GFileMonitorFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="OpenReadwrite" cname="open_readwrite">
        <return-type type="GFileIOStream*" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="OpenReadwriteAsync" cname="open_readwrite_async">
        <return-type type="void" />
        <parameters>
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="OpenReadwriteFinish" cname="open_readwrite_finish">
        <return-type type="GFileIOStream*" />
        <parameters>
          <parameter type="GAsyncResult*" name="res" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="CreateReadwrite" cname="create_readwrite">
        <return-type type="GFileIOStream*" />
        <parameters>
          <parameter type="GFileCreateFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="CreateReadwriteAsync" cname="create_readwrite_async">
        <return-type type="void" />
        <parameters>
          <parameter type="GFileCreateFlags" name="flags" />
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="CreateReadwriteFinish" cname="create_readwrite_finish">
        <return-type type="GFileIOStream*" />
        <parameters>
          <parameter type="GAsyncResult*" name="res" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="ReplaceReadwrite" cname="replace_readwrite">
        <return-type type="GFileIOStream*" />
        <parameters>
          <parameter type="const-char*" name="etag" />
          <parameter type="gboolean" name="make_backup" />
          <parameter type="GFileCreateFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="ReplaceReadwriteAsync" cname="replace_readwrite_async">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="etag" />
          <parameter type="gboolean" name="make_backup" />
          <parameter type="GFileCreateFlags" name="flags" />
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="ReplaceReadwriteFinish" cname="replace_readwrite_finish">
        <return-type type="GFileIOStream*" />
        <parameters>
          <parameter type="GAsyncResult*" name="res" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="StartMountable" cname="start_mountable">
        <return-type type="void" />
        <parameters>
          <parameter type="GDriveStartFlags" name="flags" />
          <parameter type="GMountOperation*" name="start_operation" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="StartMountableFinish" cname="start_mountable_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="StopMountable" cname="stop_mountable">
        <return-type type="void" />
        <parameters>
          <parameter type="GMountUnmountFlags" name="flags" />
          <parameter type="GMountOperation*" name="mount_operation" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="StopMountableFinish" cname="stop_mountable_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="UnmountMountableWithOperation" cname="unmount_mountable_with_operation">
        <return-type type="void" />
        <parameters>
          <parameter type="GMountUnmountFlags" name="flags" />
          <parameter type="GMountOperation*" name="mount_operation" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="UnmountMountableWithOperationFinish" cname="unmount_mountable_with_operation_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="EjectMountableWithOperation" cname="eject_mountable_with_operation">
        <return-type type="void" />
        <parameters>
          <parameter type="GMountUnmountFlags" name="flags" />
          <parameter type="GMountOperation*" name="mount_operation" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="EjectMountableWithOperationFinish" cname="eject_mountable_with_operation_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="PollMountable" cname="poll_mountable">
        <return-type type="void" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="PollMountableFinish" cname="poll_mountable_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <method name="AppendTo" cname="g_file_append_to">
        <return-type type="GFileOutputStream*" />
        <parameters>
          <parameter type="GFileCreateFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="AppendToAsync" cname="g_file_append_to_async">
        <return-type type="void" />
        <parameters>
          <parameter type="GFileCreateFlags" name="flags" />
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="AppendToFinish" cname="g_file_append_to_finish">
        <return-type type="GFileOutputStream*" />
        <parameters>
          <parameter type="GAsyncResult*" name="res" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="Copy" cname="g_file_copy">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GFile*" name="destination" />
          <parameter type="GFileCopyFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GFileProgressCallback" name="progress_callback" />
          <parameter type="gpointer" name="progress_callback_data" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="CopyAsync" cname="g_file_copy_async">
        <return-type type="void" />
        <parameters>
          <parameter type="GFile*" name="destination" />
          <parameter type="GFileCopyFlags" name="flags" />
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GFileProgressCallback" name="progress_callback" />
          <parameter type="gpointer" name="progress_callback_data" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="CopyAttributes" cname="g_file_copy_attributes">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GFile*" name="destination" />
          <parameter type="GFileCopyFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="CopyFinish" cname="g_file_copy_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="res" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="Create" cname="g_file_create">
        <return-type type="GFileOutputStream*" />
        <parameters>
          <parameter type="GFileCreateFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="CreateAsync" cname="g_file_create_async">
        <return-type type="void" />
        <parameters>
          <parameter type="GFileCreateFlags" name="flags" />
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="CreateFinish" cname="g_file_create_finish">
        <return-type type="GFileOutputStream*" />
        <parameters>
          <parameter type="GAsyncResult*" name="res" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="CreateReadwrite" cname="g_file_create_readwrite">
        <return-type type="GFileIOStream*" />
        <parameters>
          <parameter type="GFileCreateFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="CreateReadwriteAsync" cname="g_file_create_readwrite_async">
        <return-type type="void" />
        <parameters>
          <parameter type="GFileCreateFlags" name="flags" />
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="CreateReadwriteFinish" cname="g_file_create_readwrite_finish">
        <return-type type="GFileIOStream*" />
        <parameters>
          <parameter type="GAsyncResult*" name="res" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="Delete" cname="g_file_delete">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="Dup" cname="g_file_dup">
        <return-type type="GFile*" />
      </method>
      <method name="EjectMountable" cname="g_file_eject_mountable" deprecated="1">
        <return-type type="void" />
        <parameters>
          <parameter type="GMountUnmountFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="EjectMountableFinish" cname="g_file_eject_mountable_finish" deprecated="1">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="EjectMountableWithOperation" cname="g_file_eject_mountable_with_operation">
        <return-type type="void" />
        <parameters>
          <parameter type="GMountUnmountFlags" name="flags" />
          <parameter type="GMountOperation*" name="mount_operation" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="EjectMountableWithOperationFinish" cname="g_file_eject_mountable_with_operation_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="EnumerateChildren" cname="g_file_enumerate_children">
        <return-type type="GFileEnumerator*" />
        <parameters>
          <parameter type="const-char*" name="attributes" />
          <parameter type="GFileQueryInfoFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="EnumerateChildrenAsync" cname="g_file_enumerate_children_async">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="attributes" />
          <parameter type="GFileQueryInfoFlags" name="flags" />
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="EnumerateChildrenFinish" cname="g_file_enumerate_children_finish">
        <return-type type="GFileEnumerator*" />
        <parameters>
          <parameter type="GAsyncResult*" name="res" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="Equal" cname="g_file_equal">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GFile*" name="file2" />
        </parameters>
      </method>
      <method name="FindEnclosingMount" cname="g_file_find_enclosing_mount">
        <return-type type="GMount*" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="FindEnclosingMountAsync" cname="g_file_find_enclosing_mount_async">
        <return-type type="void" />
        <parameters>
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="FindEnclosingMountFinish" cname="g_file_find_enclosing_mount_finish">
        <return-type type="GMount*" />
        <parameters>
          <parameter type="GAsyncResult*" name="res" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="GetBasename" cname="g_file_get_basename">
        <return-type type="char*" />
      </method>
      <method name="GetChild" cname="g_file_get_child">
        <return-type type="GFile*" />
        <parameters>
          <parameter type="const-char*" name="name" />
        </parameters>
      </method>
      <method name="GetChildForDisplayName" cname="g_file_get_child_for_display_name">
        <return-type type="GFile*" />
        <parameters>
          <parameter type="const-char*" name="display_name" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="GetParent" cname="g_file_get_parent">
        <return-type type="GFile*" />
      </method>
      <method name="GetParseName" cname="g_file_get_parse_name">
        <return-type type="char*" />
      </method>
      <method name="GetPath" cname="g_file_get_path">
        <return-type type="char*" />
      </method>
      <method name="GetRelativePath" cname="g_file_get_relative_path">
        <return-type type="char*" />
        <parameters>
          <parameter type="GFile*" name="descendant" />
        </parameters>
      </method>
      <method name="GetType" cname="g_file_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="GetUri" cname="g_file_get_uri">
        <return-type type="char*" />
      </method>
      <method name="GetUriScheme" cname="g_file_get_uri_scheme">
        <return-type type="char*" />
      </method>
      <method name="HasParent" cname="g_file_has_parent">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GFile*" name="parent" />
        </parameters>
      </method>
      <method name="HasPrefix" cname="g_file_has_prefix">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GFile*" name="prefix" />
        </parameters>
      </method>
      <method name="HasUriScheme" cname="g_file_has_uri_scheme">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-char*" name="uri_scheme" />
        </parameters>
      </method>
      <method name="Hash" cname="g_file_hash" shared="true">
        <return-type type="guint" />
        <parameters>
          <parameter type="gconstpointer" name="file" />
        </parameters>
      </method>
      <method name="IsNative" cname="g_file_is_native">
        <return-type type="gboolean" />
      </method>
      <method name="LoadContents" cname="g_file_load_contents">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="char**" name="contents" />
          <parameter type="gsize*" name="length" />
          <parameter type="char**" name="etag_out" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="LoadContentsAsync" cname="g_file_load_contents_async">
        <return-type type="void" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="LoadContentsFinish" cname="g_file_load_contents_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="res" />
          <parameter type="char**" name="contents" />
          <parameter type="gsize*" name="length" />
          <parameter type="char**" name="etag_out" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="LoadPartialContentsAsync" cname="g_file_load_partial_contents_async">
        <return-type type="void" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GFileReadMoreCallback" name="read_more_callback" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="LoadPartialContentsFinish" cname="g_file_load_partial_contents_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="res" />
          <parameter type="char**" name="contents" />
          <parameter type="gsize*" name="length" />
          <parameter type="char**" name="etag_out" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="MakeDirectory" cname="g_file_make_directory">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="MakeDirectoryWithParents" cname="g_file_make_directory_with_parents">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="MakeSymbolicLink" cname="g_file_make_symbolic_link">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-char*" name="symlink_value" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="Monitor" cname="g_file_monitor">
        <return-type type="GFileMonitor*" />
        <parameters>
          <parameter type="GFileMonitorFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="MountEnclosingVolume" cname="g_file_mount_enclosing_volume">
        <return-type type="void" />
        <parameters>
          <parameter type="GMountMountFlags" name="flags" />
          <parameter type="GMountOperation*" name="mount_operation" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="MountEnclosingVolumeFinish" cname="g_file_mount_enclosing_volume_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="MountMountable" cname="g_file_mount_mountable">
        <return-type type="void" />
        <parameters>
          <parameter type="GMountMountFlags" name="flags" />
          <parameter type="GMountOperation*" name="mount_operation" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="MountMountableFinish" cname="g_file_mount_mountable_finish">
        <return-type type="GFile*" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="Move" cname="g_file_move">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GFile*" name="destination" />
          <parameter type="GFileCopyFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GFileProgressCallback" name="progress_callback" />
          <parameter type="gpointer" name="progress_callback_data" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <constructor cname="g_file_new_for_commandline_arg">
        <parameters>
          <parameter type="const-char*" name="arg" />
        </parameters>
      </constructor>
      <constructor cname="g_file_new_for_path">
        <parameters>
          <parameter type="const-char*" name="path" />
        </parameters>
      </constructor>
      <constructor cname="g_file_new_for_uri">
        <parameters>
          <parameter type="const-char*" name="uri" />
        </parameters>
      </constructor>
      <method name="OpenReadwrite" cname="g_file_open_readwrite">
        <return-type type="GFileIOStream*" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="OpenReadwriteAsync" cname="g_file_open_readwrite_async">
        <return-type type="void" />
        <parameters>
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="OpenReadwriteFinish" cname="g_file_open_readwrite_finish">
        <return-type type="GFileIOStream*" />
        <parameters>
          <parameter type="GAsyncResult*" name="res" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="ParseName" cname="g_file_parse_name" shared="true">
        <return-type type="GFile*" />
        <parameters>
          <parameter type="const-char*" name="parse_name" />
        </parameters>
      </method>
      <method name="PollMountable" cname="g_file_poll_mountable">
        <return-type type="void" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="PollMountableFinish" cname="g_file_poll_mountable_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="QueryDefaultHandler" cname="g_file_query_default_handler">
        <return-type type="GAppInfo*" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="QueryExists" cname="g_file_query_exists">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
        </parameters>
      </method>
      <method name="QueryFileType" cname="g_file_query_file_type">
        <return-type type="GFileType" />
        <parameters>
          <parameter type="GFileQueryInfoFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
        </parameters>
      </method>
      <method name="QueryFilesystemInfo" cname="g_file_query_filesystem_info">
        <return-type type="GFileInfo*" />
        <parameters>
          <parameter type="const-char*" name="attributes" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="QueryFilesystemInfoAsync" cname="g_file_query_filesystem_info_async">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="attributes" />
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="QueryFilesystemInfoFinish" cname="g_file_query_filesystem_info_finish">
        <return-type type="GFileInfo*" />
        <parameters>
          <parameter type="GAsyncResult*" name="res" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="QueryInfo" cname="g_file_query_info">
        <return-type type="GFileInfo*" />
        <parameters>
          <parameter type="const-char*" name="attributes" />
          <parameter type="GFileQueryInfoFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="QueryInfoAsync" cname="g_file_query_info_async">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="attributes" />
          <parameter type="GFileQueryInfoFlags" name="flags" />
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="QueryInfoFinish" cname="g_file_query_info_finish">
        <return-type type="GFileInfo*" />
        <parameters>
          <parameter type="GAsyncResult*" name="res" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="QuerySettableAttributes" cname="g_file_query_settable_attributes">
        <return-type type="GFileAttributeInfoList*" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="QueryWritableNamespaces" cname="g_file_query_writable_namespaces">
        <return-type type="GFileAttributeInfoList*" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="Read" cname="g_file_read">
        <return-type type="GFileInputStream*" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="ReadAsync" cname="g_file_read_async">
        <return-type type="void" />
        <parameters>
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="ReadFinish" cname="g_file_read_finish">
        <return-type type="GFileInputStream*" />
        <parameters>
          <parameter type="GAsyncResult*" name="res" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="Replace" cname="g_file_replace">
        <return-type type="GFileOutputStream*" />
        <parameters>
          <parameter type="const-char*" name="etag" />
          <parameter type="gboolean" name="make_backup" />
          <parameter type="GFileCreateFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="ReplaceAsync" cname="g_file_replace_async">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="etag" />
          <parameter type="gboolean" name="make_backup" />
          <parameter type="GFileCreateFlags" name="flags" />
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="ReplaceContents" cname="g_file_replace_contents">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-char*" name="contents" />
          <parameter type="gsize" name="length" />
          <parameter type="const-char*" name="etag" />
          <parameter type="gboolean" name="make_backup" />
          <parameter type="GFileCreateFlags" name="flags" />
          <parameter type="char**" name="new_etag" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="ReplaceContentsAsync" cname="g_file_replace_contents_async">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="contents" />
          <parameter type="gsize" name="length" />
          <parameter type="const-char*" name="etag" />
          <parameter type="gboolean" name="make_backup" />
          <parameter type="GFileCreateFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="ReplaceContentsFinish" cname="g_file_replace_contents_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="res" />
          <parameter type="char**" name="new_etag" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="ReplaceFinish" cname="g_file_replace_finish">
        <return-type type="GFileOutputStream*" />
        <parameters>
          <parameter type="GAsyncResult*" name="res" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="ReplaceReadwrite" cname="g_file_replace_readwrite">
        <return-type type="GFileIOStream*" />
        <parameters>
          <parameter type="const-char*" name="etag" />
          <parameter type="gboolean" name="make_backup" />
          <parameter type="GFileCreateFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="ReplaceReadwriteAsync" cname="g_file_replace_readwrite_async">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="etag" />
          <parameter type="gboolean" name="make_backup" />
          <parameter type="GFileCreateFlags" name="flags" />
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="ReplaceReadwriteFinish" cname="g_file_replace_readwrite_finish">
        <return-type type="GFileIOStream*" />
        <parameters>
          <parameter type="GAsyncResult*" name="res" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="ResolveRelativePath" cname="g_file_resolve_relative_path">
        <return-type type="GFile*" />
        <parameters>
          <parameter type="const-char*" name="relative_path" />
        </parameters>
      </method>
      <method name="SetAttribute" cname="g_file_set_attribute">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-char*" name="attribute" />
          <parameter type="GFileAttributeType" name="type" />
          <parameter type="gpointer" name="value_p" />
          <parameter type="GFileQueryInfoFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="SetAttributeByteString" cname="g_file_set_attribute_byte_string">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-char*" name="attribute" />
          <parameter type="const-char*" name="value" />
          <parameter type="GFileQueryInfoFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="SetAttributeInt32" cname="g_file_set_attribute_int32">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-char*" name="attribute" />
          <parameter type="gint32" name="value" />
          <parameter type="GFileQueryInfoFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="SetAttributeInt64" cname="g_file_set_attribute_int64">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-char*" name="attribute" />
          <parameter type="gint64" name="value" />
          <parameter type="GFileQueryInfoFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="SetAttributeString" cname="g_file_set_attribute_string">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-char*" name="attribute" />
          <parameter type="const-char*" name="value" />
          <parameter type="GFileQueryInfoFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="SetAttributeUint32" cname="g_file_set_attribute_uint32">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-char*" name="attribute" />
          <parameter type="guint32" name="value" />
          <parameter type="GFileQueryInfoFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="SetAttributeUint64" cname="g_file_set_attribute_uint64">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-char*" name="attribute" />
          <parameter type="guint64" name="value" />
          <parameter type="GFileQueryInfoFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="SetAttributesAsync" cname="g_file_set_attributes_async">
        <return-type type="void" />
        <parameters>
          <parameter type="GFileInfo*" name="info" />
          <parameter type="GFileQueryInfoFlags" name="flags" />
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="SetAttributesFinish" cname="g_file_set_attributes_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GFileInfo**" name="info" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="SetAttributesFromInfo" cname="g_file_set_attributes_from_info">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GFileInfo*" name="info" />
          <parameter type="GFileQueryInfoFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="SetDisplayName" cname="g_file_set_display_name">
        <return-type type="GFile*" />
        <parameters>
          <parameter type="const-char*" name="display_name" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="SetDisplayNameAsync" cname="g_file_set_display_name_async">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="display_name" />
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="SetDisplayNameFinish" cname="g_file_set_display_name_finish">
        <return-type type="GFile*" />
        <parameters>
          <parameter type="GAsyncResult*" name="res" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="StartMountable" cname="g_file_start_mountable">
        <return-type type="void" />
        <parameters>
          <parameter type="GDriveStartFlags" name="flags" />
          <parameter type="GMountOperation*" name="start_operation" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="StartMountableFinish" cname="g_file_start_mountable_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="StopMountable" cname="g_file_stop_mountable">
        <return-type type="void" />
        <parameters>
          <parameter type="GMountUnmountFlags" name="flags" />
          <parameter type="GMountOperation*" name="mount_operation" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="StopMountableFinish" cname="g_file_stop_mountable_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="SupportsThreadContexts" cname="g_file_supports_thread_contexts">
        <return-type type="gboolean" />
      </method>
      <method name="Trash" cname="g_file_trash">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="UnmountMountable" cname="g_file_unmount_mountable" deprecated="1">
        <return-type type="void" />
        <parameters>
          <parameter type="GMountUnmountFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="UnmountMountableFinish" cname="g_file_unmount_mountable_finish" deprecated="1">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="UnmountMountableWithOperation" cname="g_file_unmount_mountable_with_operation">
        <return-type type="void" />
        <parameters>
          <parameter type="GMountUnmountFlags" name="flags" />
          <parameter type="GMountOperation*" name="mount_operation" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="UnmountMountableWithOperationFinish" cname="g_file_unmount_mountable_with_operation_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
    </interface>
    <interface name="FileDescriptorBased" cname="GFileDescriptorBased">
      <class_struct cname="GFileDescriptorBasedIface">
        <field name="GIface" cname="g_iface" type="GTypeInterface" />
        <method vm="get_fd" />
      </class_struct>
      <virtual_method name="GetFd" cname="get_fd">
        <return-type type="int" />
        <parameters />
      </virtual_method>
      <method name="GetFd" cname="g_file_descriptor_based_get_fd">
        <return-type type="int" />
      </method>
      <method name="GetType" cname="g_file_descriptor_based_get_type" shared="true">
        <return-type type="GType" />
      </method>
    </interface>
    <interface name="Icon" cname="GIcon">
      <class_struct cname="GIconIface">
        <field name="GIface" cname="g_iface" type="GTypeInterface" />
        <method vm="hash" />
        <method vm="equal" />
        <method vm="to_tokens" />
        <method vm="from_tokens" />
      </class_struct>
      <virtual_method name="Hash" cname="hash">
        <return-type type="guint" />
        <parameters />
      </virtual_method>
      <virtual_method name="Equal" cname="equal">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GIcon*" name="icon2" />
        </parameters>
      </virtual_method>
      <virtual_method name="ToTokens" cname="to_tokens">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GPtrArray*" name="tokens" />
          <parameter type="gint*" name="out_version" />
        </parameters>
      </virtual_method>
      <virtual_method name="FromTokens" cname="from_tokens" shared="true">
        <return-type type="GIcon*" />
        <parameters>
          <parameter type="gchar**" name="tokens" />
          <parameter type="gint" name="num_tokens" />
          <parameter type="gint" name="version" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <method name="Equal" cname="g_icon_equal">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GIcon*" name="icon2" />
        </parameters>
      </method>
      <method name="GetType" cname="g_icon_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="Hash" cname="g_icon_hash" shared="true">
        <return-type type="guint" />
        <parameters>
          <parameter type="gconstpointer" name="icon" />
        </parameters>
      </method>
      <constructor cname="g_icon_new_for_string">
        <parameters>
          <parameter type="const-gchar*" name="str" />
          <parameter type="GError**" name="error" />
        </parameters>
      </constructor>
      <method name="ToString" cname="g_icon_to_string">
        <return-type type="gchar*" />
      </method>
    </interface>
    <interface name="Initable" cname="GInitable">
      <class_struct cname="GInitableIface">
        <field name="GIface" cname="g_iface" type="GTypeInterface" />
        <method vm="init" />
      </class_struct>
      <virtual_method name="Init" cname="init">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <method name="GetType" cname="g_initable_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="Init" cname="g_initable_init">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <constructor cname="g_initable_new">
        <parameters>
          <parameter type="GType" name="object_type" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
          <parameter type="const-gchar*" name="first_property_name" />
          <parameter ellipsis="true" />
        </parameters>
      </constructor>
      <constructor cname="g_initable_new_valist">
        <parameters>
          <parameter type="GType" name="object_type" />
          <parameter type="const-gchar*" name="first_property_name" />
          <parameter type="va_list" name="var_args" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </constructor>
      <constructor cname="g_initable_newv">
        <parameters>
          <parameter type="GType" name="object_type" />
          <parameter type="guint" name="n_parameters" />
          <parameter type="GParameter*" name="parameters" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </constructor>
    </interface>
    <interface name="LoadableIcon" cname="GLoadableIcon">
      <class_struct cname="GLoadableIconIface">
        <field name="GIface" cname="g_iface" type="GTypeInterface" />
        <method vm="load" />
        <method vm="load_async" />
        <method vm="load_finish" />
      </class_struct>
      <virtual_method name="Load" cname="load">
        <return-type type="GInputStream*" />
        <parameters>
          <parameter type="int" name="size" />
          <parameter type="char**" name="type" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="LoadAsync" cname="load_async">
        <return-type type="void" />
        <parameters>
          <parameter type="int" name="size" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="LoadFinish" cname="load_finish">
        <return-type type="GInputStream*" />
        <parameters>
          <parameter type="GAsyncResult*" name="res" />
          <parameter type="char**" name="type" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <method name="GetType" cname="g_loadable_icon_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="Load" cname="g_loadable_icon_load">
        <return-type type="GInputStream*" />
        <parameters>
          <parameter type="int" name="size" />
          <parameter type="char**" name="type" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="LoadAsync" cname="g_loadable_icon_load_async">
        <return-type type="void" />
        <parameters>
          <parameter type="int" name="size" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="LoadFinish" cname="g_loadable_icon_load_finish">
        <return-type type="GInputStream*" />
        <parameters>
          <parameter type="GAsyncResult*" name="res" />
          <parameter type="char**" name="type" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
    </interface>
    <interface name="Mount" cname="GMount">
      <class_struct cname="GMountIface">
        <field name="GIface" cname="g_iface" type="GTypeInterface" />
        <method signal_vm="changed" />
        <method signal_vm="unmounted" />
        <method vm="get_root" />
        <method vm="get_name" />
        <method vm="get_icon" />
        <method vm="get_uuid" />
        <method vm="get_volume" />
        <method vm="get_drive" />
        <method vm="can_unmount" />
        <method vm="can_eject" />
        <method vm="unmount" />
        <method vm="unmount_finish" />
        <method vm="eject" />
        <method vm="eject_finish" />
        <method vm="remount" />
        <method vm="remount_finish" />
        <method vm="guess_content_type" />
        <method vm="guess_content_type_finish" />
        <method vm="guess_content_type_sync" />
        <method signal_vm="pre_unmount" />
        <method vm="unmount_with_operation" />
        <method vm="unmount_with_operation_finish" />
        <method vm="eject_with_operation" />
        <method vm="eject_with_operation_finish" />
        <method vm="get_default_location" />
      </class_struct>
      <signal name="Changed" cname="changed" when="LAST" field_name="changed">
        <return-type type="void" />
        <parameters />
      </signal>
      <signal name="Unmounted" cname="unmounted" when="LAST" field_name="unmounted">
        <return-type type="void" />
        <parameters />
      </signal>
      <signal name="PreUnmount" cname="pre-unmount" when="LAST" field_name="pre_unmount">
        <return-type type="void" />
        <parameters />
      </signal>
      <virtual_method name="GetRoot" cname="get_root">
        <return-type type="GFile*" />
        <parameters />
      </virtual_method>
      <virtual_method name="GetName" cname="get_name">
        <return-type type="char*" />
        <parameters />
      </virtual_method>
      <virtual_method name="GetIcon" cname="get_icon">
        <return-type type="GIcon*" />
        <parameters />
      </virtual_method>
      <virtual_method name="GetUuid" cname="get_uuid">
        <return-type type="char*" />
        <parameters />
      </virtual_method>
      <virtual_method name="GetVolume" cname="get_volume">
        <return-type type="GVolume*" />
        <parameters />
      </virtual_method>
      <virtual_method name="GetDrive" cname="get_drive">
        <return-type type="GDrive*" />
        <parameters />
      </virtual_method>
      <virtual_method name="CanUnmount" cname="can_unmount">
        <return-type type="gboolean" />
        <parameters />
      </virtual_method>
      <virtual_method name="CanEject" cname="can_eject">
        <return-type type="gboolean" />
        <parameters />
      </virtual_method>
      <virtual_method name="Unmount" cname="unmount">
        <return-type type="void" />
        <parameters>
          <parameter type="GMountUnmountFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="UnmountFinish" cname="unmount_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="Eject" cname="eject">
        <return-type type="void" />
        <parameters>
          <parameter type="GMountUnmountFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="EjectFinish" cname="eject_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="Remount" cname="remount">
        <return-type type="void" />
        <parameters>
          <parameter type="GMountMountFlags" name="flags" />
          <parameter type="GMountOperation*" name="mount_operation" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="RemountFinish" cname="remount_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="GuessContentType" cname="guess_content_type">
        <return-type type="void" />
        <parameters>
          <parameter type="gboolean" name="force_rescan" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="GuessContentTypeFinish" cname="guess_content_type_finish">
        <return-type type="gchar**" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="GuessContentTypeSync" cname="guess_content_type_sync">
        <return-type type="gchar**" />
        <parameters>
          <parameter type="gboolean" name="force_rescan" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="UnmountWithOperation" cname="unmount_with_operation">
        <return-type type="void" />
        <parameters>
          <parameter type="GMountUnmountFlags" name="flags" />
          <parameter type="GMountOperation*" name="mount_operation" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="UnmountWithOperationFinish" cname="unmount_with_operation_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="EjectWithOperation" cname="eject_with_operation">
        <return-type type="void" />
        <parameters>
          <parameter type="GMountUnmountFlags" name="flags" />
          <parameter type="GMountOperation*" name="mount_operation" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="EjectWithOperationFinish" cname="eject_with_operation_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="GetDefaultLocation" cname="get_default_location">
        <return-type type="GFile*" />
        <parameters />
      </virtual_method>
      <method name="CanEject" cname="g_mount_can_eject">
        <return-type type="gboolean" />
      </method>
      <method name="CanUnmount" cname="g_mount_can_unmount">
        <return-type type="gboolean" />
      </method>
      <method name="Eject" cname="g_mount_eject" deprecated="1">
        <return-type type="void" />
        <parameters>
          <parameter type="GMountUnmountFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="EjectFinish" cname="g_mount_eject_finish" deprecated="1">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="EjectWithOperation" cname="g_mount_eject_with_operation">
        <return-type type="void" />
        <parameters>
          <parameter type="GMountUnmountFlags" name="flags" />
          <parameter type="GMountOperation*" name="mount_operation" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="EjectWithOperationFinish" cname="g_mount_eject_with_operation_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="GetDefaultLocation" cname="g_mount_get_default_location">
        <return-type type="GFile*" />
      </method>
      <method name="GetDrive" cname="g_mount_get_drive">
        <return-type type="GDrive*" />
      </method>
      <method name="GetIcon" cname="g_mount_get_icon">
        <return-type type="GIcon*" />
      </method>
      <method name="GetName" cname="g_mount_get_name">
        <return-type type="char*" />
      </method>
      <method name="GetRoot" cname="g_mount_get_root">
        <return-type type="GFile*" />
      </method>
      <method name="GetType" cname="g_mount_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="GetUuid" cname="g_mount_get_uuid">
        <return-type type="char*" />
      </method>
      <method name="GetVolume" cname="g_mount_get_volume">
        <return-type type="GVolume*" />
      </method>
      <method name="GuessContentType" cname="g_mount_guess_content_type">
        <return-type type="void" />
        <parameters>
          <parameter type="gboolean" name="force_rescan" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="GuessContentTypeFinish" cname="g_mount_guess_content_type_finish">
        <return-type type="gchar**" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="GuessContentTypeSync" cname="g_mount_guess_content_type_sync">
        <return-type type="gchar**" />
        <parameters>
          <parameter type="gboolean" name="force_rescan" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="IsShadowed" cname="g_mount_is_shadowed">
        <return-type type="gboolean" />
      </method>
      <method name="Remount" cname="g_mount_remount">
        <return-type type="void" />
        <parameters>
          <parameter type="GMountMountFlags" name="flags" />
          <parameter type="GMountOperation*" name="mount_operation" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="RemountFinish" cname="g_mount_remount_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="Shadow" cname="g_mount_shadow">
        <return-type type="void" />
      </method>
      <method name="Unmount" cname="g_mount_unmount" deprecated="1">
        <return-type type="void" />
        <parameters>
          <parameter type="GMountUnmountFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="UnmountFinish" cname="g_mount_unmount_finish" deprecated="1">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="UnmountWithOperation" cname="g_mount_unmount_with_operation">
        <return-type type="void" />
        <parameters>
          <parameter type="GMountUnmountFlags" name="flags" />
          <parameter type="GMountOperation*" name="mount_operation" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="UnmountWithOperationFinish" cname="g_mount_unmount_with_operation_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="Unshadow" cname="g_mount_unshadow">
        <return-type type="void" />
      </method>
    </interface>
    <interface name="PollableInputStream" cname="GPollableInputStream">
      <class_struct cname="GPollableInputStreamInterface">
        <field name="GIface" cname="g_iface" type="GTypeInterface" />
        <method vm="can_poll" />
        <method vm="is_readable" />
        <method vm="create_source" />
        <method vm="read_nonblocking" />
      </class_struct>
      <virtual_method name="CanPoll" cname="can_poll">
        <return-type type="gboolean" />
        <parameters />
      </virtual_method>
      <virtual_method name="IsReadable" cname="is_readable">
        <return-type type="gboolean" />
        <parameters />
      </virtual_method>
      <virtual_method name="CreateSource" cname="create_source">
        <return-type type="GSource*" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
        </parameters>
      </virtual_method>
      <virtual_method name="ReadNonblocking" cname="read_nonblocking">
        <return-type type="gssize" />
        <parameters>
          <parameter type="void*" name="buffer" />
          <parameter type="gsize" name="size" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <method name="CanPoll" cname="g_pollable_input_stream_can_poll">
        <return-type type="gboolean" />
      </method>
      <method name="CreateSource" cname="g_pollable_input_stream_create_source">
        <return-type type="GSource*" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
        </parameters>
      </method>
      <method name="GetType" cname="g_pollable_input_stream_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="IsReadable" cname="g_pollable_input_stream_is_readable">
        <return-type type="gboolean" />
      </method>
      <method name="ReadNonblocking" cname="g_pollable_input_stream_read_nonblocking">
        <return-type type="gssize" />
        <parameters>
          <parameter type="void*" name="buffer" />
          <parameter type="gsize" name="size" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
    </interface>
    <interface name="PollableOutputStream" cname="GPollableOutputStream">
      <class_struct cname="GPollableOutputStreamInterface">
        <field name="GIface" cname="g_iface" type="GTypeInterface" />
        <method vm="can_poll" />
        <method vm="is_writable" />
        <method vm="create_source" />
        <method vm="write_nonblocking" />
      </class_struct>
      <virtual_method name="CanPoll" cname="can_poll">
        <return-type type="gboolean" />
        <parameters />
      </virtual_method>
      <virtual_method name="IsWritable" cname="is_writable">
        <return-type type="gboolean" />
        <parameters />
      </virtual_method>
      <virtual_method name="CreateSource" cname="create_source">
        <return-type type="GSource*" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
        </parameters>
      </virtual_method>
      <virtual_method name="WriteNonblocking" cname="write_nonblocking">
        <return-type type="gssize" />
        <parameters>
          <parameter type="const-void*" name="buffer" />
          <parameter type="gsize" name="size" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <method name="CanPoll" cname="g_pollable_output_stream_can_poll">
        <return-type type="gboolean" />
      </method>
      <method name="CreateSource" cname="g_pollable_output_stream_create_source">
        <return-type type="GSource*" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
        </parameters>
      </method>
      <method name="GetType" cname="g_pollable_output_stream_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="IsWritable" cname="g_pollable_output_stream_is_writable">
        <return-type type="gboolean" />
      </method>
      <method name="WriteNonblocking" cname="g_pollable_output_stream_write_nonblocking">
        <return-type type="gssize" />
        <parameters>
          <parameter type="const-void*" name="buffer" />
          <parameter type="gsize" name="size" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
    </interface>
    <interface name="Proxy" cname="GProxy">
      <class_struct cname="GProxyInterface">
        <field name="GIface" cname="g_iface" type="GTypeInterface" />
        <method vm="connect" />
        <method vm="connect_async" />
        <method vm="connect_finish" />
        <method vm="supports_hostname" />
      </class_struct>
      <virtual_method name="Connect" cname="connect">
        <return-type type="GIOStream*" />
        <parameters>
          <parameter type="GIOStream*" name="connection" />
          <parameter type="GProxyAddress*" name="proxy_address" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="ConnectAsync" cname="connect_async">
        <return-type type="void" />
        <parameters>
          <parameter type="GIOStream*" name="connection" />
          <parameter type="GProxyAddress*" name="proxy_address" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="ConnectFinish" cname="connect_finish">
        <return-type type="GIOStream*" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="SupportsHostname" cname="supports_hostname">
        <return-type type="gboolean" />
        <parameters />
      </virtual_method>
      <method name="Connect" cname="g_proxy_connect">
        <return-type type="GIOStream*" />
        <parameters>
          <parameter type="GIOStream*" name="connection" />
          <parameter type="GProxyAddress*" name="proxy_address" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="ConnectAsync" cname="g_proxy_connect_async">
        <return-type type="void" />
        <parameters>
          <parameter type="GIOStream*" name="connection" />
          <parameter type="GProxyAddress*" name="proxy_address" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="ConnectFinish" cname="g_proxy_connect_finish">
        <return-type type="GIOStream*" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="GetDefaultForProtocol" cname="g_proxy_get_default_for_protocol" shared="true">
        <return-type type="GProxy*" />
        <parameters>
          <parameter type="const-gchar*" name="protocol" />
        </parameters>
      </method>
      <method name="GetType" cname="g_proxy_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="SupportsHostname" cname="g_proxy_supports_hostname">
        <return-type type="gboolean" />
      </method>
    </interface>
    <interface name="ProxyResolver" cname="GProxyResolver">
      <class_struct cname="GProxyResolverInterface">
        <field name="GIface" cname="g_iface" type="GTypeInterface" />
        <method vm="is_supported" />
        <method vm="lookup" />
        <method vm="lookup_async" />
        <method vm="lookup_finish" />
      </class_struct>
      <virtual_method name="IsSupported" cname="is_supported">
        <return-type type="gboolean" />
        <parameters />
      </virtual_method>
      <virtual_method name="Lookup" cname="lookup">
        <return-type type="gchar**" />
        <parameters>
          <parameter type="const-gchar*" name="uri" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="LookupAsync" cname="lookup_async">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="uri" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="LookupFinish" cname="lookup_finish">
        <return-type type="gchar**" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <method name="GetDefault" cname="g_proxy_resolver_get_default" shared="true">
        <return-type type="GProxyResolver*" />
      </method>
      <method name="GetType" cname="g_proxy_resolver_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="IsSupported" cname="g_proxy_resolver_is_supported">
        <return-type type="gboolean" />
      </method>
      <method name="Lookup" cname="g_proxy_resolver_lookup">
        <return-type type="gchar**" />
        <parameters>
          <parameter type="const-gchar*" name="uri" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="LookupAsync" cname="g_proxy_resolver_lookup_async">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="uri" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="LookupFinish" cname="g_proxy_resolver_lookup_finish">
        <return-type type="gchar**" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
    </interface>
    <interface name="Seekable" cname="GSeekable">
      <class_struct cname="GSeekableIface">
        <field name="GIface" cname="g_iface" type="GTypeInterface" />
        <method vm="tell" />
        <method vm="can_seek" />
        <method vm="seek" />
        <method vm="can_truncate" />
        <method vm="truncate_fn" />
      </class_struct>
      <virtual_method name="Tell" cname="tell">
        <return-type type="goffset" />
        <parameters />
      </virtual_method>
      <virtual_method name="CanSeek" cname="can_seek">
        <return-type type="gboolean" />
        <parameters />
      </virtual_method>
      <virtual_method name="Seek" cname="seek">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="goffset" name="offset" />
          <parameter type="GSeekType" name="type" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="CanTruncate" cname="can_truncate">
        <return-type type="gboolean" />
        <parameters />
      </virtual_method>
      <virtual_method name="TruncateFn" cname="truncate_fn">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="goffset" name="offset" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <method name="CanSeek" cname="g_seekable_can_seek">
        <return-type type="gboolean" />
      </method>
      <method name="CanTruncate" cname="g_seekable_can_truncate">
        <return-type type="gboolean" />
      </method>
      <method name="GetType" cname="g_seekable_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="Seek" cname="g_seekable_seek">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="goffset" name="offset" />
          <parameter type="GSeekType" name="type" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="Tell" cname="g_seekable_tell">
        <return-type type="goffset" />
      </method>
      <method name="Truncate" cname="g_seekable_truncate">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="goffset" name="offset" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
    </interface>
    <interface name="SocketConnectable" cname="GSocketConnectable">
      <class_struct cname="GSocketConnectableIface">
        <field name="GIface" cname="g_iface" type="GTypeInterface" />
        <method vm="enumerate" />
        <method vm="proxy_enumerate" />
      </class_struct>
      <virtual_method name="Enumerate" cname="enumerate">
        <return-type type="GSocketAddressEnumerator*" />
        <parameters />
      </virtual_method>
      <virtual_method name="ProxyEnumerate" cname="proxy_enumerate">
        <return-type type="GSocketAddressEnumerator*" />
        <parameters />
      </virtual_method>
      <method name="Enumerate" cname="g_socket_connectable_enumerate">
        <return-type type="GSocketAddressEnumerator*" />
      </method>
      <method name="GetType" cname="g_socket_connectable_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="ProxyEnumerate" cname="g_socket_connectable_proxy_enumerate">
        <return-type type="GSocketAddressEnumerator*" />
      </method>
    </interface>
    <interface name="TlsBackend" cname="GTlsBackend">
      <class_struct cname="GTlsBackendInterface">
        <field name="GIface" cname="g_iface" type="GTypeInterface" />
        <method vm="supports_tls" />
        <method vm="get_certificate_type" />
        <method vm="get_client_connection_type" />
        <method vm="get_server_connection_type" />
      </class_struct>
      <virtual_method name="SupportsTls" cname="supports_tls">
        <return-type type="gboolean" />
        <parameters />
      </virtual_method>
      <virtual_method name="GetCertificateType" cname="get_certificate_type" shared="true">
        <return-type type="GType" />
      </virtual_method>
      <virtual_method name="GetClientConnectionType" cname="get_client_connection_type" shared="true">
        <return-type type="GType" />
      </virtual_method>
      <virtual_method name="GetServerConnectionType" cname="get_server_connection_type" shared="true">
        <return-type type="GType" />
      </virtual_method>
      <method name="GetCertificateType" cname="g_tls_backend_get_certificate_type">
        <return-type type="GType" />
      </method>
      <method name="GetClientConnectionType" cname="g_tls_backend_get_client_connection_type">
        <return-type type="GType" />
      </method>
      <method name="GetDefault" cname="g_tls_backend_get_default" shared="true">
        <return-type type="GTlsBackend*" />
      </method>
      <method name="GetServerConnectionType" cname="g_tls_backend_get_server_connection_type">
        <return-type type="GType" />
      </method>
      <method name="GetType" cname="g_tls_backend_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="SupportsTls" cname="g_tls_backend_supports_tls">
        <return-type type="gboolean" />
      </method>
    </interface>
    <interface name="TlsClientConnection" cname="GTlsClientConnection">
      <class_struct cname="GTlsClientConnectionInterface">
        <field name="GIface" cname="g_iface" type="GTypeInterface" />
      </class_struct>
      <property name="ValidationFlags" cname="validation-flags" type="GTlsCertificateFlags" readable="true" writeable="true" construct="true" />
      <property name="ServerIdentity" cname="server-identity" type="GSocketConnectable" readable="true" writeable="true" construct="true" />
      <property name="UseSsl3" cname="use-ssl3" type="gboolean" readable="true" writeable="true" construct="true" />
      <property name="AcceptedCas" cname="accepted-cas" type="gpointer" readable="true" />
      <method name="GetAcceptedCas" cname="g_tls_client_connection_get_accepted_cas">
        <return-type type="GList*" />
      </method>
      <method name="GetServerIdentity" cname="g_tls_client_connection_get_server_identity">
        <return-type type="GSocketConnectable*" />
      </method>
      <method name="GetType" cname="g_tls_client_connection_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="GetUseSsl3" cname="g_tls_client_connection_get_use_ssl3">
        <return-type type="gboolean" />
      </method>
      <method name="GetValidationFlags" cname="g_tls_client_connection_get_validation_flags">
        <return-type type="GTlsCertificateFlags" />
      </method>
      <constructor cname="g_tls_client_connection_new">
        <parameters>
          <parameter type="GIOStream*" name="base_io_stream" />
          <parameter type="GSocketConnectable*" name="server_identity" />
          <parameter type="GError**" name="error" />
        </parameters>
      </constructor>
      <method name="SetServerIdentity" cname="g_tls_client_connection_set_server_identity">
        <return-type type="void" />
        <parameters>
          <parameter type="GSocketConnectable*" name="identity" />
        </parameters>
      </method>
      <method name="SetUseSsl3" cname="g_tls_client_connection_set_use_ssl3">
        <return-type type="void" />
        <parameters>
          <parameter type="gboolean" name="use_ssl3" />
        </parameters>
      </method>
      <method name="SetValidationFlags" cname="g_tls_client_connection_set_validation_flags">
        <return-type type="void" />
        <parameters>
          <parameter type="GTlsCertificateFlags" name="flags" />
        </parameters>
      </method>
    </interface>
    <interface name="TlsServerConnection" cname="GTlsServerConnection">
      <class_struct cname="GTlsServerConnectionInterface">
        <field name="GIface" cname="g_iface" type="GTypeInterface" />
      </class_struct>
      <property name="AuthenticationMode" cname="authentication-mode" type="GTlsAuthenticationMode" readable="true" writeable="true" />
      <method name="GetType" cname="g_tls_server_connection_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="g_tls_server_connection_new">
        <parameters>
          <parameter type="GIOStream*" name="base_io_stream" />
          <parameter type="GTlsCertificate*" name="certificate" />
          <parameter type="GError**" name="error" />
        </parameters>
      </constructor>
    </interface>
    <interface name="Volume" cname="GVolume">
      <class_struct cname="GVolumeIface">
        <field name="GIface" cname="g_iface" type="GTypeInterface" />
        <method signal_vm="changed" />
        <method signal_vm="removed" />
        <method vm="get_name" />
        <method vm="get_icon" />
        <method vm="get_uuid" />
        <method vm="get_drive" />
        <method vm="get_mount" />
        <method vm="can_mount" />
        <method vm="can_eject" />
        <method vm="mount_fn" />
        <method vm="mount_finish" />
        <method vm="eject" />
        <method vm="eject_finish" />
        <method vm="get_identifier" />
        <method vm="enumerate_identifiers" />
        <method vm="should_automount" />
        <method vm="get_activation_root" />
        <method vm="eject_with_operation" />
        <method vm="eject_with_operation_finish" />
      </class_struct>
      <signal name="Changed" cname="changed" when="LAST" field_name="changed">
        <return-type type="void" />
        <parameters />
      </signal>
      <signal name="Removed" cname="removed" when="LAST" field_name="removed">
        <return-type type="void" />
        <parameters />
      </signal>
      <virtual_method name="GetName" cname="get_name">
        <return-type type="char*" />
        <parameters />
      </virtual_method>
      <virtual_method name="GetIcon" cname="get_icon">
        <return-type type="GIcon*" />
        <parameters />
      </virtual_method>
      <virtual_method name="GetUuid" cname="get_uuid">
        <return-type type="char*" />
        <parameters />
      </virtual_method>
      <virtual_method name="GetDrive" cname="get_drive">
        <return-type type="GDrive*" />
        <parameters />
      </virtual_method>
      <virtual_method name="GetMount" cname="get_mount">
        <return-type type="GMount*" />
        <parameters />
      </virtual_method>
      <virtual_method name="CanMount" cname="can_mount">
        <return-type type="gboolean" />
        <parameters />
      </virtual_method>
      <virtual_method name="CanEject" cname="can_eject">
        <return-type type="gboolean" />
        <parameters />
      </virtual_method>
      <virtual_method name="MountFn" cname="mount_fn">
        <return-type type="void" />
        <parameters>
          <parameter type="GMountMountFlags" name="flags" />
          <parameter type="GMountOperation*" name="mount_operation" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="MountFinish" cname="mount_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="Eject" cname="eject">
        <return-type type="void" />
        <parameters>
          <parameter type="GMountUnmountFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="EjectFinish" cname="eject_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="GetIdentifier" cname="get_identifier">
        <return-type type="char*" />
        <parameters>
          <parameter type="const-char*" name="kind" />
        </parameters>
      </virtual_method>
      <virtual_method name="EnumerateIdentifiers" cname="enumerate_identifiers">
        <return-type type="char**" />
        <parameters />
      </virtual_method>
      <virtual_method name="ShouldAutomount" cname="should_automount">
        <return-type type="gboolean" />
        <parameters />
      </virtual_method>
      <virtual_method name="GetActivationRoot" cname="get_activation_root">
        <return-type type="GFile*" />
        <parameters />
      </virtual_method>
      <virtual_method name="EjectWithOperation" cname="eject_with_operation">
        <return-type type="void" />
        <parameters>
          <parameter type="GMountUnmountFlags" name="flags" />
          <parameter type="GMountOperation*" name="mount_operation" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="EjectWithOperationFinish" cname="eject_with_operation_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <method name="CanEject" cname="g_volume_can_eject">
        <return-type type="gboolean" />
      </method>
      <method name="CanMount" cname="g_volume_can_mount">
        <return-type type="gboolean" />
      </method>
      <method name="Eject" cname="g_volume_eject" deprecated="1">
        <return-type type="void" />
        <parameters>
          <parameter type="GMountUnmountFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="EjectFinish" cname="g_volume_eject_finish" deprecated="1">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="EjectWithOperation" cname="g_volume_eject_with_operation">
        <return-type type="void" />
        <parameters>
          <parameter type="GMountUnmountFlags" name="flags" />
          <parameter type="GMountOperation*" name="mount_operation" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="EjectWithOperationFinish" cname="g_volume_eject_with_operation_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="EnumerateIdentifiers" cname="g_volume_enumerate_identifiers">
        <return-type type="char**" />
      </method>
      <method name="GetActivationRoot" cname="g_volume_get_activation_root">
        <return-type type="GFile*" />
      </method>
      <method name="GetDrive" cname="g_volume_get_drive">
        <return-type type="GDrive*" />
      </method>
      <method name="GetIcon" cname="g_volume_get_icon">
        <return-type type="GIcon*" />
      </method>
      <method name="GetIdentifier" cname="g_volume_get_identifier">
        <return-type type="char*" />
        <parameters>
          <parameter type="const-char*" name="kind" />
        </parameters>
      </method>
      <method name="GetMount" cname="g_volume_get_mount">
        <return-type type="GMount*" />
      </method>
      <method name="GetName" cname="g_volume_get_name">
        <return-type type="char*" />
      </method>
      <method name="GetType" cname="g_volume_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="GetUuid" cname="g_volume_get_uuid">
        <return-type type="char*" />
      </method>
      <method name="Mount" cname="g_volume_mount">
        <return-type type="void" />
        <parameters>
          <parameter type="GMountMountFlags" name="flags" />
          <parameter type="GMountOperation*" name="mount_operation" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="MountFinish" cname="g_volume_mount_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="ShouldAutomount" cname="g_volume_should_automount">
        <return-type type="gboolean" />
      </method>
    </interface>
    <object name="IOModule" cname="GIOModule" parent="GTypeModule">
      <class_struct cname="GIOModuleClass">
        <field name="ParentClass" cname="parent_class" type="GTypeModuleClass" />
      </class_struct>
      <method name="GetType" cname="g_io_module_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="Load" cname="g_io_module_load">
        <return-type type="void" />
      </method>
      <constructor cname="g_io_module_new">
        <parameters>
          <parameter type="const-gchar*" name="filename" />
        </parameters>
      </constructor>
      <method name="Query" cname="g_io_module_query" shared="true">
        <return-type type="char**" />
      </method>
      <method name="Unload" cname="g_io_module_unload">
        <return-type type="void" />
      </method>
    </object>
    <object name="Application" cname="GApplication" parent="GObject">
      <class_struct cname="GApplicationClass">
        <field name="ParentClass" cname="parent_class" type="GObjectClass" />
        <method signal_vm="startup" />
        <method signal_vm="activate" />
        <method signal_vm="open" />
        <method signal_vm="command_line" />
        <method vm="local_command_line" />
        <method vm="before_emit" />
        <method vm="after_emit" />
        <method vm="add_platform_data" />
        <method vm="quit_mainloop" />
        <method vm="run_mainloop" />
        <field name="Padding" cname="padding" type="gpointer" array_len="12" />
      </class_struct>
      <field name="Priv" cname="priv" type="GApplicationPrivate*" />
      <property name="ApplicationId" cname="application-id" type="gchar*" readable="true" writeable="true" construct="true" />
      <property name="Flags" cname="flags" type="GApplicationFlags" readable="true" writeable="true" />
      <property name="IsRegistered" cname="is-registered" type="gboolean" readable="true" />
      <property name="IsRemote" cname="is-remote" type="gboolean" readable="true" />
      <property name="InactivityTimeout" cname="inactivity-timeout" type="guint" readable="true" writeable="true" />
      <property name="ActionGroup" cname="action-group" type="GActionGroup" writeable="true" />
      <signal name="Startup" cname="startup" when="LAST" field_name="startup">
        <return-type type="void" />
        <parameters />
      </signal>
      <signal name="Activate" cname="activate" when="LAST" field_name="activate">
        <return-type type="void" />
        <parameters />
      </signal>
      <signal name="Open" cname="open" when="LAST" manual="true" field_name="open">
        <return-type type="void" />
        <parameters>
          <parameter type="GFile**" name="files" />
          <parameter type="gint" name="n_files" />
          <parameter type="const-gchar*" name="hint" />
        </parameters>
      </signal>
      <signal name="CommandLine" cname="command-line" when="LAST" field_name="command_line">
        <return-type type="int" />
        <parameters>
          <parameter type="GApplicationCommandLine*" name="command_line" />
        </parameters>
      </signal>
      <virtual_method name="LocalCommandLine" cname="local_command_line">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="gchar***" name="arguments" />
          <parameter type="int*" name="exit_status" />
        </parameters>
      </virtual_method>
      <virtual_method name="BeforeEmit" cname="before_emit">
        <return-type type="void" />
        <parameters>
          <parameter type="GVariant*" name="platform_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="AfterEmit" cname="after_emit">
        <return-type type="void" />
        <parameters>
          <parameter type="GVariant*" name="platform_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="AddPlatformData" cname="add_platform_data">
        <return-type type="void" />
        <parameters>
          <parameter type="GVariantBuilder*" name="builder" />
        </parameters>
      </virtual_method>
      <virtual_method name="QuitMainloop" cname="quit_mainloop">
        <return-type type="void" />
        <parameters />
      </virtual_method>
      <virtual_method name="RunMainloop" cname="run_mainloop">
        <return-type type="void" />
        <parameters />
      </virtual_method>
      <implements>
        <interface cname="GActionGroup" />
      </implements>
      <method name="Activate" cname="g_application_activate">
        <return-type type="void" />
      </method>
      <method name="GetApplicationId" cname="g_application_get_application_id">
        <return-type type="const-gchar*" />
      </method>
      <method name="GetFlags" cname="g_application_get_flags">
        <return-type type="GApplicationFlags" />
      </method>
      <method name="GetInactivityTimeout" cname="g_application_get_inactivity_timeout">
        <return-type type="guint" />
      </method>
      <method name="GetIsRegistered" cname="g_application_get_is_registered">
        <return-type type="gboolean" />
      </method>
      <method name="GetIsRemote" cname="g_application_get_is_remote">
        <return-type type="gboolean" />
      </method>
      <method name="GetType" cname="g_application_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="Hold" cname="g_application_hold">
        <return-type type="void" />
      </method>
      <method name="IdIsValid" cname="g_application_id_is_valid" shared="true">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-gchar*" name="application_id" />
        </parameters>
      </method>
      <constructor cname="g_application_new">
        <parameters>
          <parameter type="const-gchar*" name="application_id" />
          <parameter type="GApplicationFlags" name="flags" />
        </parameters>
      </constructor>
      <method name="Open" cname="g_application_open">
        <return-type type="void" />
        <parameters>
          <parameter type="GFile**" name="files" />
          <parameter type="gint" name="n_files" />
          <parameter type="const-gchar*" name="hint" />
        </parameters>
      </method>
      <method name="Register" cname="g_application_register">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="Release" cname="g_application_release">
        <return-type type="void" />
      </method>
      <method name="Run" cname="g_application_run">
        <return-type type="int" />
        <parameters>
          <parameter type="int" name="argc" />
          <parameter type="char**" name="argv" />
        </parameters>
      </method>
      <method name="SetActionGroup" cname="g_application_set_action_group">
        <return-type type="void" />
        <parameters>
          <parameter type="GActionGroup*" name="action_group" />
        </parameters>
      </method>
      <method name="SetApplicationId" cname="g_application_set_application_id">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="application_id" />
        </parameters>
      </method>
      <method name="SetFlags" cname="g_application_set_flags">
        <return-type type="void" />
        <parameters>
          <parameter type="GApplicationFlags" name="flags" />
        </parameters>
      </method>
      <method name="SetInactivityTimeout" cname="g_application_set_inactivity_timeout">
        <return-type type="void" />
        <parameters>
          <parameter type="guint" name="inactivity_timeout" />
        </parameters>
      </method>
    </object>
    <object name="ApplicationCommandLine" cname="GApplicationCommandLine" parent="GObject">
      <class_struct cname="GApplicationCommandLineClass">
        <field name="ParentClass" cname="parent_class" type="GObjectClass" />
        <method vm="print_literal" />
        <method vm="printerr_literal" />
        <field name="Padding" cname="padding" type="gpointer" array_len="12" />
      </class_struct>
      <field name="Priv" cname="priv" type="GApplicationCommandLinePrivate*" />
      <property name="Arguments" cname="arguments" type="variant" writeable="true" construct-only="true" />
      <property name="PlatformData" cname="platform-data" type="variant" writeable="true" construct-only="true" />
      <property name="IsRemote" cname="is-remote" type="gboolean" readable="true" />
      <virtual_method name="PrintLiteral" cname="print_literal">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="message" />
        </parameters>
      </virtual_method>
      <virtual_method name="PrinterrLiteral" cname="printerr_literal">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="message" />
        </parameters>
      </virtual_method>
      <method name="GetArguments" cname="g_application_command_line_get_arguments">
        <return-type type="gchar**" />
        <parameters>
          <parameter type="int*" name="argc" />
        </parameters>
      </method>
      <method name="GetCwd" cname="g_application_command_line_get_cwd">
        <return-type type="const-gchar*" />
      </method>
      <method name="GetEnviron" cname="g_application_command_line_get_environ">
        <return-type type="const-gchar**" />
      </method>
      <method name="GetExitStatus" cname="g_application_command_line_get_exit_status">
        <return-type type="int" />
      </method>
      <method name="GetIsRemote" cname="g_application_command_line_get_is_remote">
        <return-type type="gboolean" />
      </method>
      <method name="GetPlatformData" cname="g_application_command_line_get_platform_data">
        <return-type type="GVariant*" />
      </method>
      <method name="GetType" cname="g_application_command_line_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="Getenv" cname="g_application_command_line_getenv">
        <return-type type="const-gchar*" />
        <parameters>
          <parameter type="const-gchar*" name="name" />
        </parameters>
      </method>
      <method name="Print" cname="g_application_command_line_print">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="format" printf_format="true" />
          <parameter ellipsis="true" printf_format_args="true" />
        </parameters>
      </method>
      <method name="Printerr" cname="g_application_command_line_printerr">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="format" printf_format="true" />
          <parameter ellipsis="true" printf_format_args="true" />
        </parameters>
      </method>
      <method name="SetExitStatus" cname="g_application_command_line_set_exit_status">
        <return-type type="void" />
        <parameters>
          <parameter type="int" name="exit_status" />
        </parameters>
      </method>
    </object>
    <object name="AppLaunchContext" cname="GAppLaunchContext" parent="GObject">
      <class_struct cname="GAppLaunchContextClass">
        <field name="ParentClass" cname="parent_class" type="GObjectClass" />
        <method vm="get_display" />
        <method vm="get_startup_notify_id" />
        <method vm="launch_failed" />
        <method vm="_g_reserved1" />
        <method vm="_g_reserved2" />
        <method vm="_g_reserved3" />
        <method vm="_g_reserved4" />
        <method vm="_g_reserved5" />
      </class_struct>
      <field name="Priv" cname="priv" type="GAppLaunchContextPrivate*" />
      <virtual_method name="GetDisplay" cname="get_display">
        <return-type type="char*" />
        <parameters>
          <parameter type="GAppInfo*" name="info" />
          <parameter type="GList*" name="files" />
        </parameters>
      </virtual_method>
      <virtual_method name="GetStartupNotifyId" cname="get_startup_notify_id">
        <return-type type="char*" />
        <parameters>
          <parameter type="GAppInfo*" name="info" />
          <parameter type="GList*" name="files" />
        </parameters>
      </virtual_method>
      <virtual_method name="LaunchFailed" cname="launch_failed">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="startup_notify_id" />
        </parameters>
      </virtual_method>
      <virtual_method name="GReserved1" cname="_g_reserved1" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved2" cname="_g_reserved2" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved3" cname="_g_reserved3" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved4" cname="_g_reserved4" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved5" cname="_g_reserved5" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <method name="GetDisplay" cname="g_app_launch_context_get_display">
        <return-type type="char*" />
        <parameters>
          <parameter type="GAppInfo*" name="info" />
          <parameter type="GList*" name="files" />
        </parameters>
      </method>
      <method name="GetStartupNotifyId" cname="g_app_launch_context_get_startup_notify_id">
        <return-type type="char*" />
        <parameters>
          <parameter type="GAppInfo*" name="info" />
          <parameter type="GList*" name="files" />
        </parameters>
      </method>
      <method name="GetType" cname="g_app_launch_context_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="LaunchFailed" cname="g_app_launch_context_launch_failed">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="startup_notify_id" />
        </parameters>
      </method>
      <constructor cname="g_app_launch_context_new" />
    </object>
    <object name="BufferedInputStream" cname="GBufferedInputStream" parent="GFilterInputStream">
      <class_struct cname="GBufferedInputStreamClass">
        <field name="ParentClass" cname="parent_class" type="GFilterInputStreamClass" />
        <method vm="fill" />
        <method vm="fill_async" />
        <method vm="fill_finish" />
        <method vm="_g_reserved1" />
        <method vm="_g_reserved2" />
        <method vm="_g_reserved3" />
        <method vm="_g_reserved4" />
        <method vm="_g_reserved5" />
      </class_struct>
      <field name="Priv" cname="priv" type="GBufferedInputStreamPrivate*" />
      <property name="BufferSize" cname="buffer-size" type="guint" readable="true" writeable="true" construct="true" />
      <virtual_method name="Fill" cname="fill">
        <return-type type="gssize" />
        <parameters>
          <parameter type="gssize" name="count" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="FillAsync" cname="fill_async">
        <return-type type="void" />
        <parameters>
          <parameter type="gssize" name="count" />
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="FillFinish" cname="fill_finish">
        <return-type type="gssize" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="GReserved1" cname="_g_reserved1" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved2" cname="_g_reserved2" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved3" cname="_g_reserved3" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved4" cname="_g_reserved4" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved5" cname="_g_reserved5" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <method name="Fill" cname="g_buffered_input_stream_fill">
        <return-type type="gssize" />
        <parameters>
          <parameter type="gssize" name="count" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="FillAsync" cname="g_buffered_input_stream_fill_async">
        <return-type type="void" />
        <parameters>
          <parameter type="gssize" name="count" />
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="FillFinish" cname="g_buffered_input_stream_fill_finish">
        <return-type type="gssize" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="GetAvailable" cname="g_buffered_input_stream_get_available">
        <return-type type="gsize" />
      </method>
      <method name="GetBufferSize" cname="g_buffered_input_stream_get_buffer_size">
        <return-type type="gsize" />
      </method>
      <method name="GetType" cname="g_buffered_input_stream_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="g_buffered_input_stream_new">
        <parameters>
          <parameter type="GInputStream*" name="base_stream" />
        </parameters>
      </constructor>
      <constructor cname="g_buffered_input_stream_new_sized">
        <parameters>
          <parameter type="GInputStream*" name="base_stream" />
          <parameter type="gsize" name="size" />
        </parameters>
      </constructor>
      <method name="Peek" cname="g_buffered_input_stream_peek">
        <return-type type="gsize" />
        <parameters>
          <parameter type="void*" name="buffer" />
          <parameter type="gsize" name="offset" />
          <parameter type="gsize" name="count" />
        </parameters>
      </method>
      <method name="PeekBuffer" cname="g_buffered_input_stream_peek_buffer">
        <return-type type="const-void*" />
        <parameters>
          <parameter type="gsize*" name="count" />
        </parameters>
      </method>
      <method name="ReadByte" cname="g_buffered_input_stream_read_byte">
        <return-type type="int" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="SetBufferSize" cname="g_buffered_input_stream_set_buffer_size">
        <return-type type="void" />
        <parameters>
          <parameter type="gsize" name="size" />
        </parameters>
      </method>
    </object>
    <object name="BufferedOutputStream" cname="GBufferedOutputStream" parent="GFilterOutputStream">
      <class_struct cname="GBufferedOutputStreamClass">
        <field name="ParentClass" cname="parent_class" type="GFilterOutputStreamClass" />
        <method vm="_g_reserved1" />
        <method vm="_g_reserved2" />
      </class_struct>
      <field name="Priv" cname="priv" type="GBufferedOutputStreamPrivate*" />
      <property name="BufferSize" cname="buffer-size" type="guint" readable="true" writeable="true" construct="true" />
      <property name="AutoGrow" cname="auto-grow" type="gboolean" readable="true" writeable="true" />
      <virtual_method name="GReserved1" cname="_g_reserved1" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved2" cname="_g_reserved2" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <method name="GetAutoGrow" cname="g_buffered_output_stream_get_auto_grow">
        <return-type type="gboolean" />
      </method>
      <method name="GetBufferSize" cname="g_buffered_output_stream_get_buffer_size">
        <return-type type="gsize" />
      </method>
      <method name="GetType" cname="g_buffered_output_stream_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="g_buffered_output_stream_new">
        <parameters>
          <parameter type="GOutputStream*" name="base_stream" />
        </parameters>
      </constructor>
      <constructor cname="g_buffered_output_stream_new_sized">
        <parameters>
          <parameter type="GOutputStream*" name="base_stream" />
          <parameter type="gsize" name="size" />
        </parameters>
      </constructor>
      <method name="SetAutoGrow" cname="g_buffered_output_stream_set_auto_grow">
        <return-type type="void" />
        <parameters>
          <parameter type="gboolean" name="auto_grow" />
        </parameters>
      </method>
      <method name="SetBufferSize" cname="g_buffered_output_stream_set_buffer_size">
        <return-type type="void" />
        <parameters>
          <parameter type="gsize" name="size" />
        </parameters>
      </method>
    </object>
    <object name="Cancellable" cname="GCancellable" parent="GObject">
      <class_struct cname="GCancellableClass">
        <field name="ParentClass" cname="parent_class" type="GObjectClass" />
        <method signal_vm="cancelled" />
        <method vm="_g_reserved1" />
        <method vm="_g_reserved2" />
        <method vm="_g_reserved3" />
        <method vm="_g_reserved4" />
        <method vm="_g_reserved5" />
      </class_struct>
      <field name="Priv" cname="priv" type="GCancellablePrivate*" />
      <signal name="Cancelled" cname="cancelled" when="LAST" field_name="cancelled">
        <return-type type="void" />
        <parameters />
      </signal>
      <virtual_method name="GReserved1" cname="_g_reserved1" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved2" cname="_g_reserved2" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved3" cname="_g_reserved3" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved4" cname="_g_reserved4" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved5" cname="_g_reserved5" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <method name="Cancel" cname="g_cancellable_cancel">
        <return-type type="void" />
      </method>
      <method name="Connect" cname="g_cancellable_connect">
        <return-type type="gulong" />
        <parameters>
          <parameter type="GCallback" name="callback" />
          <parameter type="gpointer" name="data" />
          <parameter type="GDestroyNotify" name="data_destroy_func" />
        </parameters>
      </method>
      <method name="Disconnect" cname="g_cancellable_disconnect">
        <return-type type="void" />
        <parameters>
          <parameter type="gulong" name="handler_id" />
        </parameters>
      </method>
      <method name="GetCurrent" cname="g_cancellable_get_current" shared="true">
        <return-type type="GCancellable*" />
      </method>
      <method name="GetFd" cname="g_cancellable_get_fd">
        <return-type type="int" />
      </method>
      <method name="GetType" cname="g_cancellable_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="IsCancelled" cname="g_cancellable_is_cancelled">
        <return-type type="gboolean" />
      </method>
      <method name="MakePollfd" cname="g_cancellable_make_pollfd">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GPollFD*" name="pollfd" />
        </parameters>
      </method>
      <constructor cname="g_cancellable_new" />
      <method name="PopCurrent" cname="g_cancellable_pop_current">
        <return-type type="void" />
      </method>
      <method name="PushCurrent" cname="g_cancellable_push_current">
        <return-type type="void" />
      </method>
      <method name="ReleaseFd" cname="g_cancellable_release_fd">
        <return-type type="void" />
      </method>
      <method name="Reset" cname="g_cancellable_reset">
        <return-type type="void" />
      </method>
      <method name="SetErrorIfCancelled" cname="g_cancellable_set_error_if_cancelled">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="SourceNew" cname="g_cancellable_source_new">
        <return-type type="GSource*" />
      </method>
    </object>
    <object name="CharsetConverter" cname="GCharsetConverter" parent="GObject">
      <class_struct cname="GCharsetConverterClass">
        <field name="ParentClass" cname="parent_class" type="GObjectClass" />
      </class_struct>
      <property name="ToCharset" cname="to-charset" type="gchar*" readable="true" writeable="true" construct-only="true" />
      <property name="FromCharset" cname="from-charset" type="gchar*" readable="true" writeable="true" construct-only="true" />
      <property name="UseFallback" cname="use-fallback" type="gboolean" readable="true" writeable="true" construct="true" />
      <implements>
        <interface cname="GConverter" />
        <interface cname="GInitable" />
      </implements>
      <method name="GetNumFallbacks" cname="g_charset_converter_get_num_fallbacks">
        <return-type type="guint" />
      </method>
      <method name="GetType" cname="g_charset_converter_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="GetUseFallback" cname="g_charset_converter_get_use_fallback">
        <return-type type="gboolean" />
      </method>
      <constructor cname="g_charset_converter_new">
        <parameters>
          <parameter type="const-gchar*" name="to_charset" />
          <parameter type="const-gchar*" name="from_charset" />
          <parameter type="GError**" name="error" />
        </parameters>
      </constructor>
      <method name="SetUseFallback" cname="g_charset_converter_set_use_fallback">
        <return-type type="void" />
        <parameters>
          <parameter type="gboolean" name="use_fallback" />
        </parameters>
      </method>
    </object>
    <object name="ConverterInputStream" cname="GConverterInputStream" parent="GFilterInputStream">
      <class_struct cname="GConverterInputStreamClass">
        <field name="ParentClass" cname="parent_class" type="GFilterInputStreamClass" />
        <method vm="_g_reserved1" />
        <method vm="_g_reserved2" />
        <method vm="_g_reserved3" />
        <method vm="_g_reserved4" />
        <method vm="_g_reserved5" />
      </class_struct>
      <field name="Priv" cname="priv" type="GConverterInputStreamPrivate*" />
      <property name="Converter" cname="converter" type="GConverter" readable="true" writeable="true" construct-only="true" />
      <virtual_method name="GReserved1" cname="_g_reserved1" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved2" cname="_g_reserved2" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved3" cname="_g_reserved3" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved4" cname="_g_reserved4" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved5" cname="_g_reserved5" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <method name="GetConverter" cname="g_converter_input_stream_get_converter">
        <return-type type="GConverter*" />
      </method>
      <method name="GetType" cname="g_converter_input_stream_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="g_converter_input_stream_new">
        <parameters>
          <parameter type="GInputStream*" name="base_stream" />
          <parameter type="GConverter*" name="converter" />
        </parameters>
      </constructor>
    </object>
    <object name="ConverterOutputStream" cname="GConverterOutputStream" parent="GFilterOutputStream">
      <class_struct cname="GConverterOutputStreamClass">
        <field name="ParentClass" cname="parent_class" type="GFilterOutputStreamClass" />
        <method vm="_g_reserved1" />
        <method vm="_g_reserved2" />
        <method vm="_g_reserved3" />
        <method vm="_g_reserved4" />
        <method vm="_g_reserved5" />
      </class_struct>
      <field name="Priv" cname="priv" type="GConverterOutputStreamPrivate*" />
      <property name="Converter" cname="converter" type="GConverter" readable="true" writeable="true" construct-only="true" />
      <virtual_method name="GReserved1" cname="_g_reserved1" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved2" cname="_g_reserved2" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved3" cname="_g_reserved3" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved4" cname="_g_reserved4" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved5" cname="_g_reserved5" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <method name="GetConverter" cname="g_converter_output_stream_get_converter">
        <return-type type="GConverter*" />
      </method>
      <method name="GetType" cname="g_converter_output_stream_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="g_converter_output_stream_new">
        <parameters>
          <parameter type="GOutputStream*" name="base_stream" />
          <parameter type="GConverter*" name="converter" />
        </parameters>
      </constructor>
    </object>
    <object name="Credentials" cname="GCredentials" parent="GObject">
      <class_struct cname="GCredentialsClass">
        <field name="ParentClass" cname="parent_class" type="GObjectClass" />
      </class_struct>
      <method name="GetNative" cname="g_credentials_get_native">
        <return-type type="gpointer" />
        <parameters>
          <parameter type="GCredentialsType" name="native_type" />
        </parameters>
      </method>
      <method name="GetType" cname="g_credentials_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="GetUnixUser" cname="g_credentials_get_unix_user">
        <return-type type="uid_t" />
        <parameters>
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="IsSameUser" cname="g_credentials_is_same_user">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GCredentials*" name="other_credentials" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <constructor cname="g_credentials_new" />
      <method name="SetNative" cname="g_credentials_set_native">
        <return-type type="void" />
        <parameters>
          <parameter type="GCredentialsType" name="native_type" />
          <parameter type="gpointer" name="native" />
        </parameters>
      </method>
      <method name="SetUnixUser" cname="g_credentials_set_unix_user">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="uid_t" name="uid" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="ToString" cname="g_credentials_to_string">
        <return-type type="gchar*" />
      </method>
    </object>
    <object name="DataInputStream" cname="GDataInputStream" parent="GBufferedInputStream">
      <class_struct cname="GDataInputStreamClass">
        <field name="ParentClass" cname="parent_class" type="GBufferedInputStreamClass" />
        <method vm="_g_reserved1" />
        <method vm="_g_reserved2" />
        <method vm="_g_reserved3" />
        <method vm="_g_reserved4" />
        <method vm="_g_reserved5" />
      </class_struct>
      <field name="Priv" cname="priv" type="GDataInputStreamPrivate*" />
      <property name="ByteOrder" cname="byte-order" type="GDataStreamByteOrder" readable="true" writeable="true" />
      <property name="NewlineType" cname="newline-type" type="GDataStreamNewlineType" readable="true" writeable="true" />
      <virtual_method name="GReserved1" cname="_g_reserved1" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved2" cname="_g_reserved2" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved3" cname="_g_reserved3" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved4" cname="_g_reserved4" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved5" cname="_g_reserved5" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <method name="GetByteOrder" cname="g_data_input_stream_get_byte_order">
        <return-type type="GDataStreamByteOrder" />
      </method>
      <method name="GetNewlineType" cname="g_data_input_stream_get_newline_type">
        <return-type type="GDataStreamNewlineType" />
      </method>
      <method name="GetType" cname="g_data_input_stream_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="g_data_input_stream_new">
        <parameters>
          <parameter type="GInputStream*" name="base_stream" />
        </parameters>
      </constructor>
      <method name="ReadByte" cname="g_data_input_stream_read_byte">
        <return-type type="guchar" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="ReadInt16" cname="g_data_input_stream_read_int16">
        <return-type type="gint16" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="ReadInt32" cname="g_data_input_stream_read_int32">
        <return-type type="gint32" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="ReadInt64" cname="g_data_input_stream_read_int64">
        <return-type type="gint64" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="ReadLine" cname="g_data_input_stream_read_line">
        <return-type type="char*" />
        <parameters>
          <parameter type="gsize*" name="length" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="ReadLineAsync" cname="g_data_input_stream_read_line_async">
        <return-type type="void" />
        <parameters>
          <parameter type="gint" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="ReadLineFinish" cname="g_data_input_stream_read_line_finish">
        <return-type type="char*" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="gsize*" name="length" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="ReadUint16" cname="g_data_input_stream_read_uint16">
        <return-type type="guint16" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="ReadUint32" cname="g_data_input_stream_read_uint32">
        <return-type type="guint32" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="ReadUint64" cname="g_data_input_stream_read_uint64">
        <return-type type="guint64" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="ReadUntil" cname="g_data_input_stream_read_until">
        <return-type type="char*" />
        <parameters>
          <parameter type="const-gchar*" name="stop_chars" />
          <parameter type="gsize*" name="length" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="ReadUntilAsync" cname="g_data_input_stream_read_until_async">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="stop_chars" />
          <parameter type="gint" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="ReadUntilFinish" cname="g_data_input_stream_read_until_finish">
        <return-type type="char*" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="gsize*" name="length" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="ReadUpto" cname="g_data_input_stream_read_upto">
        <return-type type="char*" />
        <parameters>
          <parameter type="const-gchar*" name="stop_chars" />
          <parameter type="gssize" name="stop_chars_len" />
          <parameter type="gsize*" name="length" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="ReadUptoAsync" cname="g_data_input_stream_read_upto_async">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="stop_chars" />
          <parameter type="gssize" name="stop_chars_len" />
          <parameter type="gint" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="ReadUptoFinish" cname="g_data_input_stream_read_upto_finish">
        <return-type type="char*" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="gsize*" name="length" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="SetByteOrder" cname="g_data_input_stream_set_byte_order">
        <return-type type="void" />
        <parameters>
          <parameter type="GDataStreamByteOrder" name="order" />
        </parameters>
      </method>
      <method name="SetNewlineType" cname="g_data_input_stream_set_newline_type">
        <return-type type="void" />
        <parameters>
          <parameter type="GDataStreamNewlineType" name="type" />
        </parameters>
      </method>
    </object>
    <object name="DataOutputStream" cname="GDataOutputStream" parent="GFilterOutputStream">
      <class_struct cname="GDataOutputStreamClass">
        <field name="ParentClass" cname="parent_class" type="GFilterOutputStreamClass" />
        <method vm="_g_reserved1" />
        <method vm="_g_reserved2" />
        <method vm="_g_reserved3" />
        <method vm="_g_reserved4" />
        <method vm="_g_reserved5" />
      </class_struct>
      <field name="Priv" cname="priv" type="GDataOutputStreamPrivate*" />
      <property name="ByteOrder" cname="byte-order" type="GDataStreamByteOrder" readable="true" writeable="true" />
      <virtual_method name="GReserved1" cname="_g_reserved1" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved2" cname="_g_reserved2" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved3" cname="_g_reserved3" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved4" cname="_g_reserved4" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved5" cname="_g_reserved5" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <method name="GetByteOrder" cname="g_data_output_stream_get_byte_order">
        <return-type type="GDataStreamByteOrder" />
      </method>
      <method name="GetType" cname="g_data_output_stream_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="g_data_output_stream_new">
        <parameters>
          <parameter type="GOutputStream*" name="base_stream" />
        </parameters>
      </constructor>
      <method name="PutByte" cname="g_data_output_stream_put_byte">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="guchar" name="data" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="PutInt16" cname="g_data_output_stream_put_int16">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="gint16" name="data" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="PutInt32" cname="g_data_output_stream_put_int32">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="gint32" name="data" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="PutInt64" cname="g_data_output_stream_put_int64">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="gint64" name="data" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="PutString" cname="g_data_output_stream_put_string">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-char*" name="str" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="PutUint16" cname="g_data_output_stream_put_uint16">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="guint16" name="data" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="PutUint32" cname="g_data_output_stream_put_uint32">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="guint32" name="data" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="PutUint64" cname="g_data_output_stream_put_uint64">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="guint64" name="data" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="SetByteOrder" cname="g_data_output_stream_set_byte_order">
        <return-type type="void" />
        <parameters>
          <parameter type="GDataStreamByteOrder" name="order" />
        </parameters>
      </method>
    </object>
    <object name="DBusAuth" cname="GDBusAuth" parent="GObject">
      <class_struct cname="GDBusAuthClass">
        <field name="ParentClass" cname="parent_class" type="GObjectClass" />
      </class_struct>
      <field name="Priv" cname="priv" type="GDBusAuthPrivate*" />
      <property name="Stream" cname="stream" type="GIoStream" readable="true" writeable="true" construct-only="true" />
    </object>
    <object name="DBusAuthMechanism" cname="GDBusAuthMechanism" parent="GObject">
      <class_struct cname="GDBusAuthMechanismClass">
        <field name="ParentClass" cname="parent_class" type="GObjectClass" />
        <method vm="get_priority" />
        <method vm="get_name" />
        <method vm="is_supported" />
        <method vm="encode_data" />
        <method vm="decode_data" />
        <method vm="server_get_state" />
        <method vm="server_initiate" />
        <method vm="server_data_receive" />
        <method vm="server_data_send" />
        <method vm="server_get_reject_reason" />
        <method vm="server_shutdown" />
        <method vm="client_get_state" />
        <method vm="client_initiate" />
        <method vm="client_data_receive" />
        <method vm="client_data_send" />
        <method vm="client_shutdown" />
      </class_struct>
      <field name="Priv" cname="priv" type="GDBusAuthMechanismPrivate*" />
      <property name="Stream" cname="stream" type="GIoStream" readable="true" writeable="true" construct-only="true" />
      <property name="Credentials" cname="credentials" type="GCredentials" readable="true" writeable="true" construct-only="true" />
      <virtual_method name="GetPriority" cname="get_priority" shared="true">
        <return-type type="gint" />
      </virtual_method>
      <virtual_method name="GetName" cname="get_name" shared="true">
        <return-type type="gchar*" />
      </virtual_method>
      <virtual_method name="IsSupported" cname="is_supported">
        <return-type type="gboolean" />
        <parameters />
      </virtual_method>
      <virtual_method name="EncodeData" cname="encode_data">
        <return-type type="gchar*" />
        <parameters>
          <parameter type="const-gchar*" name="data" />
          <parameter type="gsize" name="data_len" />
          <parameter type="gsize*" name="out_data_len" />
        </parameters>
      </virtual_method>
      <virtual_method name="DecodeData" cname="decode_data">
        <return-type type="gchar*" />
        <parameters>
          <parameter type="const-gchar*" name="data" />
          <parameter type="gsize" name="data_len" />
          <parameter type="gsize*" name="out_data_len" />
        </parameters>
      </virtual_method>
      <virtual_method name="ServerGetState" cname="server_get_state">
        <return-type type="GDBusAuthMechanismState" />
        <parameters />
      </virtual_method>
      <virtual_method name="ServerInitiate" cname="server_initiate">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="initial_response" />
          <parameter type="gsize" name="initial_response_len" />
        </parameters>
      </virtual_method>
      <virtual_method name="ServerDataReceive" cname="server_data_receive">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="data" />
          <parameter type="gsize" name="data_len" />
        </parameters>
      </virtual_method>
      <virtual_method name="ServerDataSend" cname="server_data_send">
        <return-type type="gchar*" />
        <parameters>
          <parameter type="gsize*" name="out_data_len" />
        </parameters>
      </virtual_method>
      <virtual_method name="ServerGetRejectReason" cname="server_get_reject_reason">
        <return-type type="gchar*" />
        <parameters />
      </virtual_method>
      <virtual_method name="ServerShutdown" cname="server_shutdown">
        <return-type type="void" />
        <parameters />
      </virtual_method>
      <virtual_method name="ClientGetState" cname="client_get_state">
        <return-type type="GDBusAuthMechanismState" />
        <parameters />
      </virtual_method>
      <virtual_method name="ClientInitiate" cname="client_initiate">
        <return-type type="gchar*" />
        <parameters>
          <parameter type="gsize*" name="out_initial_response_len" />
        </parameters>
      </virtual_method>
      <virtual_method name="ClientDataReceive" cname="client_data_receive">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="data" />
          <parameter type="gsize" name="data_len" />
        </parameters>
      </virtual_method>
      <virtual_method name="ClientDataSend" cname="client_data_send">
        <return-type type="gchar*" />
        <parameters>
          <parameter type="gsize*" name="out_data_len" />
        </parameters>
      </virtual_method>
      <virtual_method name="ClientShutdown" cname="client_shutdown">
        <return-type type="void" />
        <parameters />
      </virtual_method>
    </object>
    <object name="DBusAuthMechanismAnon" cname="GDBusAuthMechanismAnon" parent="GDBusAuthMechanism">
      <class_struct cname="GDBusAuthMechanismAnonClass">
        <field name="ParentClass" cname="parent_class" type="GDBusAuthMechanismClass" />
      </class_struct>
      <field name="Priv" cname="priv" type="GDBusAuthMechanismAnonPrivate*" />
    </object>
    <object name="DBusAuthMechanismExternal" cname="GDBusAuthMechanismExternal" parent="GDBusAuthMechanism">
      <class_struct cname="GDBusAuthMechanismExternalClass">
        <field name="ParentClass" cname="parent_class" type="GDBusAuthMechanismClass" />
      </class_struct>
      <field name="Priv" cname="priv" type="GDBusAuthMechanismExternalPrivate*" />
    </object>
    <object name="DBusAuthMechanismSha1" cname="GDBusAuthMechanismSha1" parent="GDBusAuthMechanism">
      <class_struct cname="GDBusAuthMechanismSha1Class">
        <field name="ParentClass" cname="parent_class" type="GDBusAuthMechanismClass" />
      </class_struct>
      <field name="Priv" cname="priv" type="GDBusAuthMechanismSha1Private*" />
    </object>
    <object name="DBusAuthObserver" cname="GDBusAuthObserver" parent="GObject">
      <class_struct cname="GDBusAuthObserverClass">
        <field name="ParentClass" cname="parent_class" type="GObjectClass" />
        <method signal_vm="authorize_authenticated_peer" />
      </class_struct>
      <signal name="AuthorizeAuthenticatedPeer" cname="authorize-authenticated-peer" when="LAST" field_name="authorize_authenticated_peer">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GIOStream*" name="stream" />
          <parameter type="GCredentials*" name="credentials" />
        </parameters>
      </signal>
      <method name="AuthorizeAuthenticatedPeer" cname="g_dbus_auth_observer_authorize_authenticated_peer">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GIOStream*" name="stream" />
          <parameter type="GCredentials*" name="credentials" />
        </parameters>
      </method>
      <method name="GetType" cname="g_dbus_auth_observer_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="g_dbus_auth_observer_new" />
    </object>
    <object name="DBusConnection" cname="GDBusConnection" parent="GObject">
      <class_struct cname="GDBusConnectionClass">
        <field name="ParentClass" cname="parent_class" type="GObjectClass" />
        <method signal_vm="closed" />
      </class_struct>
      <property name="Stream" cname="stream" type="GIoStream" readable="true" writeable="true" construct-only="true" />
      <property name="Address" cname="address" type="gchar*" writeable="true" construct-only="true" />
      <property name="Flags" cname="flags" type="GDbusConnectionFlags" writeable="true" construct-only="true" />
      <property name="Guid" cname="guid" type="gchar*" readable="true" writeable="true" construct-only="true" />
      <property name="UniqueName" cname="unique-name" type="gchar*" readable="true" />
      <property name="Closed" cname="closed" type="gboolean" readable="true" />
      <property name="ExitOnClose" cname="exit-on-close" type="gboolean" readable="true" writeable="true" />
      <property name="Capabilities" cname="capabilities" type="GDbusCapabilityFlags" readable="true" />
      <property name="AuthenticationObserver" cname="authentication-observer" type="GDbusAuthObserver" writeable="true" construct-only="true" />
      <signal name="Closed" cname="closed" when="LAST" field_name="closed">
        <return-type type="void" />
        <parameters>
          <parameter type="gboolean" name="remote_peer_vanished" />
          <parameter type="GError*" name="error" />
        </parameters>
      </signal>
      <implements>
        <interface cname="GInitable" />
        <interface cname="GAsyncInitable" />
      </implements>
      <method name="AddFilter" cname="g_dbus_connection_add_filter">
        <return-type type="guint" />
        <parameters>
          <parameter type="GDBusMessageFilterFunction" name="filter_function" />
          <parameter type="gpointer" name="user_data" />
          <parameter type="GDestroyNotify" name="user_data_free_func" />
        </parameters>
      </method>
      <method name="Call" cname="g_dbus_connection_call">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="bus_name" />
          <parameter type="const-gchar*" name="object_path" />
          <parameter type="const-gchar*" name="interface_name" />
          <parameter type="const-gchar*" name="method_name" />
          <parameter type="GVariant*" name="parameters" />
          <parameter type="const-GVariantType*" name="reply_type" />
          <parameter type="GDBusCallFlags" name="flags" />
          <parameter type="gint" name="timeout_msec" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="CallFinish" cname="g_dbus_connection_call_finish">
        <return-type type="GVariant*" />
        <parameters>
          <parameter type="GAsyncResult*" name="res" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="CallSync" cname="g_dbus_connection_call_sync">
        <return-type type="GVariant*" />
        <parameters>
          <parameter type="const-gchar*" name="bus_name" />
          <parameter type="const-gchar*" name="object_path" />
          <parameter type="const-gchar*" name="interface_name" />
          <parameter type="const-gchar*" name="method_name" />
          <parameter type="GVariant*" name="parameters" />
          <parameter type="const-GVariantType*" name="reply_type" />
          <parameter type="GDBusCallFlags" name="flags" />
          <parameter type="gint" name="timeout_msec" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="Close" cname="g_dbus_connection_close">
        <return-type type="void" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="CloseFinish" cname="g_dbus_connection_close_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="res" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="CloseSync" cname="g_dbus_connection_close_sync">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="EmitSignal" cname="g_dbus_connection_emit_signal">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-gchar*" name="destination_bus_name" />
          <parameter type="const-gchar*" name="object_path" />
          <parameter type="const-gchar*" name="interface_name" />
          <parameter type="const-gchar*" name="signal_name" />
          <parameter type="GVariant*" name="parameters" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="Flush" cname="g_dbus_connection_flush">
        <return-type type="void" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="FlushFinish" cname="g_dbus_connection_flush_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="res" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="FlushSync" cname="g_dbus_connection_flush_sync">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="GetCapabilities" cname="g_dbus_connection_get_capabilities">
        <return-type type="GDBusCapabilityFlags" />
      </method>
      <method name="GetExitOnClose" cname="g_dbus_connection_get_exit_on_close">
        <return-type type="gboolean" />
      </method>
      <method name="GetGuid" cname="g_dbus_connection_get_guid">
        <return-type type="const-gchar*" />
      </method>
      <method name="GetPeerCredentials" cname="g_dbus_connection_get_peer_credentials">
        <return-type type="GCredentials*" />
      </method>
      <method name="GetStream" cname="g_dbus_connection_get_stream">
        <return-type type="GIOStream*" />
      </method>
      <method name="GetType" cname="g_dbus_connection_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="GetUniqueName" cname="g_dbus_connection_get_unique_name">
        <return-type type="const-gchar*" />
      </method>
      <method name="IsClosed" cname="g_dbus_connection_is_closed">
        <return-type type="gboolean" />
      </method>
      <constructor cname="g_dbus_connection_new">
        <parameters>
          <parameter type="GIOStream*" name="stream" />
          <parameter type="const-gchar*" name="guid" />
          <parameter type="GDBusConnectionFlags" name="flags" />
          <parameter type="GDBusAuthObserver*" name="observer" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </constructor>
      <constructor cname="g_dbus_connection_new_finish">
        <parameters>
          <parameter type="GAsyncResult*" name="res" />
          <parameter type="GError**" name="error" />
        </parameters>
      </constructor>
      <constructor cname="g_dbus_connection_new_for_address">
        <parameters>
          <parameter type="const-gchar*" name="address" />
          <parameter type="GDBusConnectionFlags" name="flags" />
          <parameter type="GDBusAuthObserver*" name="observer" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </constructor>
      <constructor cname="g_dbus_connection_new_for_address_finish">
        <parameters>
          <parameter type="GAsyncResult*" name="res" />
          <parameter type="GError**" name="error" />
        </parameters>
      </constructor>
      <constructor cname="g_dbus_connection_new_for_address_sync">
        <parameters>
          <parameter type="const-gchar*" name="address" />
          <parameter type="GDBusConnectionFlags" name="flags" />
          <parameter type="GDBusAuthObserver*" name="observer" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </constructor>
      <constructor cname="g_dbus_connection_new_sync">
        <parameters>
          <parameter type="GIOStream*" name="stream" />
          <parameter type="const-gchar*" name="guid" />
          <parameter type="GDBusConnectionFlags" name="flags" />
          <parameter type="GDBusAuthObserver*" name="observer" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </constructor>
      <method name="RegisterObject" cname="g_dbus_connection_register_object">
        <return-type type="guint" />
        <parameters>
          <parameter type="const-gchar*" name="object_path" />
          <parameter type="GDBusInterfaceInfo*" name="interface_info" />
          <parameter type="const-GDBusInterfaceVTable*" name="vtable" />
          <parameter type="gpointer" name="user_data" />
          <parameter type="GDestroyNotify" name="user_data_free_func" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="RegisterSubtree" cname="g_dbus_connection_register_subtree">
        <return-type type="guint" />
        <parameters>
          <parameter type="const-gchar*" name="object_path" />
          <parameter type="const-GDBusSubtreeVTable*" name="vtable" />
          <parameter type="GDBusSubtreeFlags" name="flags" />
          <parameter type="gpointer" name="user_data" />
          <parameter type="GDestroyNotify" name="user_data_free_func" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="RemoveFilter" cname="g_dbus_connection_remove_filter">
        <return-type type="void" />
        <parameters>
          <parameter type="guint" name="filter_id" />
        </parameters>
      </method>
      <method name="SendMessage" cname="g_dbus_connection_send_message">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GDBusMessage*" name="message" />
          <parameter type="GDBusSendMessageFlags" name="flags" />
          <parameter type="guint32*" name="out_serial" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="SendMessageWithReply" cname="g_dbus_connection_send_message_with_reply">
        <return-type type="void" />
        <parameters>
          <parameter type="GDBusMessage*" name="message" />
          <parameter type="GDBusSendMessageFlags" name="flags" />
          <parameter type="gint" name="timeout_msec" />
          <parameter type="guint32*" name="out_serial" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="SendMessageWithReplyFinish" cname="g_dbus_connection_send_message_with_reply_finish">
        <return-type type="GDBusMessage*" />
        <parameters>
          <parameter type="GAsyncResult*" name="res" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="SendMessageWithReplySync" cname="g_dbus_connection_send_message_with_reply_sync">
        <return-type type="GDBusMessage*" />
        <parameters>
          <parameter type="GDBusMessage*" name="message" />
          <parameter type="GDBusSendMessageFlags" name="flags" />
          <parameter type="gint" name="timeout_msec" />
          <parameter type="guint32*" name="out_serial" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="SetExitOnClose" cname="g_dbus_connection_set_exit_on_close">
        <return-type type="void" />
        <parameters>
          <parameter type="gboolean" name="exit_on_close" />
        </parameters>
      </method>
      <method name="SignalSubscribe" cname="g_dbus_connection_signal_subscribe">
        <return-type type="guint" />
        <parameters>
          <parameter type="const-gchar*" name="sender" />
          <parameter type="const-gchar*" name="interface_name" />
          <parameter type="const-gchar*" name="member" />
          <parameter type="const-gchar*" name="object_path" />
          <parameter type="const-gchar*" name="arg0" />
          <parameter type="GDBusSignalFlags" name="flags" />
          <parameter type="GDBusSignalCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
          <parameter type="GDestroyNotify" name="user_data_free_func" />
        </parameters>
      </method>
      <method name="SignalUnsubscribe" cname="g_dbus_connection_signal_unsubscribe">
        <return-type type="void" />
        <parameters>
          <parameter type="guint" name="subscription_id" />
        </parameters>
      </method>
      <method name="StartMessageProcessing" cname="g_dbus_connection_start_message_processing">
        <return-type type="void" />
      </method>
      <method name="UnregisterObject" cname="g_dbus_connection_unregister_object">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="guint" name="registration_id" />
        </parameters>
      </method>
      <method name="UnregisterSubtree" cname="g_dbus_connection_unregister_subtree">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="guint" name="registration_id" />
        </parameters>
      </method>
    </object>
    <object name="DBusMessage" cname="GDBusMessage" parent="GObject">
      <class_struct cname="GDBusMessageClass">
        <field name="ParentClass" cname="parent_class" type="GObjectClass" />
      </class_struct>
      <property name="Locked" cname="locked" type="gboolean" readable="true" />
      <method name="BytesNeeded" cname="g_dbus_message_bytes_needed" shared="true">
        <return-type type="gssize" />
        <parameters>
          <parameter type="guchar*" name="blob" />
          <parameter type="gsize" name="blob_len" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="Copy" cname="g_dbus_message_copy">
        <return-type type="GDBusMessage*" owned="true" />
        <parameters>
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="GetArg0" cname="g_dbus_message_get_arg0">
        <return-type type="const-gchar*" />
      </method>
      <method name="GetBody" cname="g_dbus_message_get_body">
        <return-type type="GVariant*" />
      </method>
      <method name="GetByteOrder" cname="g_dbus_message_get_byte_order">
        <return-type type="GDBusMessageByteOrder" />
      </method>
      <method name="GetDestination" cname="g_dbus_message_get_destination">
        <return-type type="const-gchar*" />
      </method>
      <method name="GetErrorName" cname="g_dbus_message_get_error_name">
        <return-type type="const-gchar*" />
      </method>
      <method name="GetFlags" cname="g_dbus_message_get_flags">
        <return-type type="GDBusMessageFlags" />
      </method>
      <method name="GetHeader" cname="g_dbus_message_get_header">
        <return-type type="GVariant*" />
        <parameters>
          <parameter type="GDBusMessageHeaderField" name="header_field" />
        </parameters>
      </method>
      <method name="GetHeaderFields" cname="g_dbus_message_get_header_fields">
        <return-type type="guchar*" />
      </method>
      <method name="GetInterface" cname="g_dbus_message_get_interface">
        <return-type type="const-gchar*" />
      </method>
      <method name="GetLocked" cname="g_dbus_message_get_locked">
        <return-type type="gboolean" />
      </method>
      <method name="GetMember" cname="g_dbus_message_get_member">
        <return-type type="const-gchar*" />
      </method>
      <method name="GetMessageType" cname="g_dbus_message_get_message_type">
        <return-type type="GDBusMessageType" />
      </method>
      <method name="GetNumUnixFds" cname="g_dbus_message_get_num_unix_fds">
        <return-type type="guint32" />
      </method>
      <method name="GetPath" cname="g_dbus_message_get_path">
        <return-type type="const-gchar*" />
      </method>
      <method name="GetReplySerial" cname="g_dbus_message_get_reply_serial">
        <return-type type="guint32" />
      </method>
      <method name="GetSender" cname="g_dbus_message_get_sender">
        <return-type type="const-gchar*" />
      </method>
      <method name="GetSerial" cname="g_dbus_message_get_serial">
        <return-type type="guint32" />
      </method>
      <method name="GetSignature" cname="g_dbus_message_get_signature">
        <return-type type="const-gchar*" />
      </method>
      <method name="GetType" cname="g_dbus_message_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="GetUnixFdList" cname="g_dbus_message_get_unix_fd_list">
        <return-type type="GUnixFDList*" />
      </method>
      <method name="Lock" cname="g_dbus_message_lock">
        <return-type type="void" />
      </method>
      <constructor cname="g_dbus_message_new" />
      <constructor cname="g_dbus_message_new_from_blob">
        <parameters>
          <parameter type="guchar*" name="blob" />
          <parameter type="gsize" name="blob_len" />
          <parameter type="GDBusCapabilityFlags" name="capabilities" />
          <parameter type="GError**" name="error" />
        </parameters>
      </constructor>
      <constructor cname="g_dbus_message_new_method_call">
        <parameters>
          <parameter type="const-gchar*" name="name" />
          <parameter type="const-gchar*" name="path" />
          <parameter type="const-gchar*" name="interface_" />
          <parameter type="const-gchar*" name="method" />
        </parameters>
      </constructor>
      <constructor cname="g_dbus_message_new_method_error">
        <parameters>
          <parameter type="GDBusMessage*" name="method_call_message" />
          <parameter type="const-gchar*" name="error_name" />
          <parameter type="const-gchar*" name="error_message_format" />
          <parameter ellipsis="true" />
        </parameters>
      </constructor>
      <constructor cname="g_dbus_message_new_method_error_literal">
        <parameters>
          <parameter type="GDBusMessage*" name="method_call_message" />
          <parameter type="const-gchar*" name="error_name" />
          <parameter type="const-gchar*" name="error_message" />
        </parameters>
      </constructor>
      <constructor cname="g_dbus_message_new_method_error_valist">
        <parameters>
          <parameter type="GDBusMessage*" name="method_call_message" />
          <parameter type="const-gchar*" name="error_name" />
          <parameter type="const-gchar*" name="error_message_format" />
          <parameter type="va_list" name="var_args" />
        </parameters>
      </constructor>
      <constructor cname="g_dbus_message_new_method_reply">
        <parameters>
          <parameter type="GDBusMessage*" name="method_call_message" />
        </parameters>
      </constructor>
      <constructor cname="g_dbus_message_new_signal">
        <parameters>
          <parameter type="const-gchar*" name="path" />
          <parameter type="const-gchar*" name="interface_" />
          <parameter type="const-gchar*" name="signal" />
        </parameters>
      </constructor>
      <method name="Print" cname="g_dbus_message_print">
        <return-type type="gchar*" />
        <parameters>
          <parameter type="guint" name="indent" />
        </parameters>
      </method>
      <method name="SetBody" cname="g_dbus_message_set_body">
        <return-type type="void" />
        <parameters>
          <parameter type="GVariant*" name="body" />
        </parameters>
      </method>
      <method name="SetByteOrder" cname="g_dbus_message_set_byte_order">
        <return-type type="void" />
        <parameters>
          <parameter type="GDBusMessageByteOrder" name="byte_order" />
        </parameters>
      </method>
      <method name="SetDestination" cname="g_dbus_message_set_destination">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="value" />
        </parameters>
      </method>
      <method name="SetErrorName" cname="g_dbus_message_set_error_name">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="value" />
        </parameters>
      </method>
      <method name="SetFlags" cname="g_dbus_message_set_flags">
        <return-type type="void" />
        <parameters>
          <parameter type="GDBusMessageFlags" name="flags" />
        </parameters>
      </method>
      <method name="SetHeader" cname="g_dbus_message_set_header">
        <return-type type="void" />
        <parameters>
          <parameter type="GDBusMessageHeaderField" name="header_field" />
          <parameter type="GVariant*" name="value" />
        </parameters>
      </method>
      <method name="SetInterface" cname="g_dbus_message_set_interface">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="value" />
        </parameters>
      </method>
      <method name="SetMember" cname="g_dbus_message_set_member">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="value" />
        </parameters>
      </method>
      <method name="SetMessageType" cname="g_dbus_message_set_message_type">
        <return-type type="void" />
        <parameters>
          <parameter type="GDBusMessageType" name="type" />
        </parameters>
      </method>
      <method name="SetNumUnixFds" cname="g_dbus_message_set_num_unix_fds">
        <return-type type="void" />
        <parameters>
          <parameter type="guint32" name="value" />
        </parameters>
      </method>
      <method name="SetPath" cname="g_dbus_message_set_path">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="value" />
        </parameters>
      </method>
      <method name="SetReplySerial" cname="g_dbus_message_set_reply_serial">
        <return-type type="void" />
        <parameters>
          <parameter type="guint32" name="value" />
        </parameters>
      </method>
      <method name="SetSender" cname="g_dbus_message_set_sender">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="value" />
        </parameters>
      </method>
      <method name="SetSerial" cname="g_dbus_message_set_serial">
        <return-type type="void" />
        <parameters>
          <parameter type="guint32" name="serial" />
        </parameters>
      </method>
      <method name="SetSignature" cname="g_dbus_message_set_signature">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="value" />
        </parameters>
      </method>
      <method name="SetUnixFdList" cname="g_dbus_message_set_unix_fd_list">
        <return-type type="void" />
        <parameters>
          <parameter type="GUnixFDList*" name="fd_list" />
        </parameters>
      </method>
      <method name="ToBlob" cname="g_dbus_message_to_blob">
        <return-type type="guchar*" />
        <parameters>
          <parameter type="gsize*" name="out_size" />
          <parameter type="GDBusCapabilityFlags" name="capabilities" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="ToGerror" cname="g_dbus_message_to_gerror">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
    </object>
    <object name="DBusMethodInvocation" cname="GDBusMethodInvocation" parent="GObject">
      <class_struct cname="GDBusMethodInvocationClass">
        <field name="ParentClass" cname="parent_class" type="GObjectClass" />
      </class_struct>
      <method name="GetConnection" cname="g_dbus_method_invocation_get_connection">
        <return-type type="GDBusConnection*" />
      </method>
      <method name="GetInterfaceName" cname="g_dbus_method_invocation_get_interface_name">
        <return-type type="const-gchar*" />
      </method>
      <method name="GetMessage" cname="g_dbus_method_invocation_get_message">
        <return-type type="GDBusMessage*" />
      </method>
      <method name="GetMethodInfo" cname="g_dbus_method_invocation_get_method_info">
        <return-type type="const-GDBusMethodInfo*" />
      </method>
      <method name="GetMethodName" cname="g_dbus_method_invocation_get_method_name">
        <return-type type="const-gchar*" />
      </method>
      <method name="GetObjectPath" cname="g_dbus_method_invocation_get_object_path">
        <return-type type="const-gchar*" />
      </method>
      <method name="GetParameters" cname="g_dbus_method_invocation_get_parameters">
        <return-type type="GVariant*" />
      </method>
      <method name="GetSender" cname="g_dbus_method_invocation_get_sender">
        <return-type type="const-gchar*" />
      </method>
      <method name="GetType" cname="g_dbus_method_invocation_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="GetUserData" cname="g_dbus_method_invocation_get_user_data">
        <return-type type="gpointer" />
      </method>
      <method name="ReturnDbusError" cname="g_dbus_method_invocation_return_dbus_error">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="error_name" />
          <parameter type="const-gchar*" name="error_message" />
        </parameters>
      </method>
      <method name="ReturnError" cname="g_dbus_method_invocation_return_error">
        <return-type type="void" />
        <parameters>
          <parameter type="GQuark" name="domain" />
          <parameter type="gint" name="code" />
          <parameter type="const-gchar*" name="format" />
          <parameter ellipsis="true" />
        </parameters>
      </method>
      <method name="ReturnErrorLiteral" cname="g_dbus_method_invocation_return_error_literal">
        <return-type type="void" />
        <parameters>
          <parameter type="GQuark" name="domain" />
          <parameter type="gint" name="code" />
          <parameter type="const-gchar*" name="message" />
        </parameters>
      </method>
      <method name="ReturnErrorValist" cname="g_dbus_method_invocation_return_error_valist">
        <return-type type="void" />
        <parameters>
          <parameter type="GQuark" name="domain" />
          <parameter type="gint" name="code" />
          <parameter type="const-gchar*" name="format" />
          <parameter type="va_list" name="var_args" />
        </parameters>
      </method>
      <method name="ReturnGerror" cname="g_dbus_method_invocation_return_gerror">
        <return-type type="void" />
        <parameters>
          <parameter type="const-GError*" name="error" />
        </parameters>
      </method>
      <method name="ReturnValue" cname="g_dbus_method_invocation_return_value">
        <return-type type="void" />
        <parameters>
          <parameter type="GVariant*" name="parameters" />
        </parameters>
      </method>
    </object>
    <object name="DBusProxy" cname="GDBusProxy" parent="GObject">
      <class_struct cname="GDBusProxyClass">
        <field name="ParentClass" cname="parent_class" type="GObjectClass" />
        <method signal_vm="g_properties_changed" />
        <method signal_vm="g_signal" />
        <field name="Padding" cname="padding" type="gpointer" array_len="32" />
      </class_struct>
      <field name="Priv" cname="priv" type="GDBusProxyPrivate*" />
      <property name="GInterfaceInfo" cname="g-interface-info" type="GDbusInterfaceInfo" readable="true" writeable="true" />
      <property name="GConnection" cname="g-connection" type="GDbusConnection" readable="true" writeable="true" construct-only="true" />
      <property name="GBusType" cname="g-bus-type" type="GBusType" writeable="true" construct-only="true" />
      <property name="GFlags" cname="g-flags" type="GDbusProxyFlags" readable="true" writeable="true" construct-only="true" />
      <property name="GName" cname="g-name" type="gchar*" readable="true" writeable="true" construct-only="true" />
      <property name="GNameOwner" cname="g-name-owner" type="gchar*" readable="true" />
      <property name="GObjectPath" cname="g-object-path" type="gchar*" readable="true" writeable="true" construct-only="true" />
      <property name="GInterfaceName" cname="g-interface-name" type="gchar*" readable="true" writeable="true" construct-only="true" />
      <property name="GDefaultTimeout" cname="g-default-timeout" type="gint" readable="true" writeable="true" construct="true" />
      <signal name="GPropertiesChanged" cname="g-properties-changed" when="LAST" field_name="g_properties_changed">
        <return-type type="void" />
        <parameters>
          <parameter type="GVariant*" name="changed_properties" />
          <parameter type="const-gchar*" name="invalidated_properties" />
        </parameters>
      </signal>
      <signal name="GSignal" cname="g-signal" when="LAST" field_name="g_signal">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="sender_name" />
          <parameter type="const-gchar*" name="signal_name" />
          <parameter type="GVariant*" name="parameters" />
        </parameters>
      </signal>
      <implements>
        <interface cname="GInitable" />
        <interface cname="GAsyncInitable" />
      </implements>
      <method name="Call" cname="g_dbus_proxy_call">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="method_name" />
          <parameter type="GVariant*" name="parameters" />
          <parameter type="GDBusCallFlags" name="flags" />
          <parameter type="gint" name="timeout_msec" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="CallFinish" cname="g_dbus_proxy_call_finish">
        <return-type type="GVariant*" />
        <parameters>
          <parameter type="GAsyncResult*" name="res" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="CallSync" cname="g_dbus_proxy_call_sync">
        <return-type type="GVariant*" />
        <parameters>
          <parameter type="const-gchar*" name="method_name" />
          <parameter type="GVariant*" name="parameters" />
          <parameter type="GDBusCallFlags" name="flags" />
          <parameter type="gint" name="timeout_msec" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="GetCachedProperty" cname="g_dbus_proxy_get_cached_property">
        <return-type type="GVariant*" />
        <parameters>
          <parameter type="const-gchar*" name="property_name" />
        </parameters>
      </method>
      <method name="GetCachedPropertyNames" cname="g_dbus_proxy_get_cached_property_names">
        <return-type type="gchar**" />
      </method>
      <method name="GetConnection" cname="g_dbus_proxy_get_connection">
        <return-type type="GDBusConnection*" />
      </method>
      <method name="GetDefaultTimeout" cname="g_dbus_proxy_get_default_timeout">
        <return-type type="gint" />
      </method>
      <method name="GetFlags" cname="g_dbus_proxy_get_flags">
        <return-type type="GDBusProxyFlags" />
      </method>
      <method name="GetInterfaceInfo" cname="g_dbus_proxy_get_interface_info">
        <return-type type="GDBusInterfaceInfo*" />
      </method>
      <method name="GetInterfaceName" cname="g_dbus_proxy_get_interface_name">
        <return-type type="const-gchar*" />
      </method>
      <method name="GetName" cname="g_dbus_proxy_get_name">
        <return-type type="const-gchar*" />
      </method>
      <method name="GetNameOwner" cname="g_dbus_proxy_get_name_owner">
        <return-type type="gchar*" />
      </method>
      <method name="GetObjectPath" cname="g_dbus_proxy_get_object_path">
        <return-type type="const-gchar*" />
      </method>
      <method name="GetType" cname="g_dbus_proxy_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="g_dbus_proxy_new">
        <parameters>
          <parameter type="GDBusConnection*" name="connection" />
          <parameter type="GDBusProxyFlags" name="flags" />
          <parameter type="GDBusInterfaceInfo*" name="info" />
          <parameter type="const-gchar*" name="name" />
          <parameter type="const-gchar*" name="object_path" />
          <parameter type="const-gchar*" name="interface_name" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </constructor>
      <constructor cname="g_dbus_proxy_new_finish">
        <parameters>
          <parameter type="GAsyncResult*" name="res" />
          <parameter type="GError**" name="error" />
        </parameters>
      </constructor>
      <constructor cname="g_dbus_proxy_new_for_bus">
        <parameters>
          <parameter type="GBusType" name="bus_type" />
          <parameter type="GDBusProxyFlags" name="flags" />
          <parameter type="GDBusInterfaceInfo*" name="info" />
          <parameter type="const-gchar*" name="name" />
          <parameter type="const-gchar*" name="object_path" />
          <parameter type="const-gchar*" name="interface_name" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </constructor>
      <constructor cname="g_dbus_proxy_new_for_bus_finish">
        <parameters>
          <parameter type="GAsyncResult*" name="res" />
          <parameter type="GError**" name="error" />
        </parameters>
      </constructor>
      <constructor cname="g_dbus_proxy_new_for_bus_sync">
        <parameters>
          <parameter type="GBusType" name="bus_type" />
          <parameter type="GDBusProxyFlags" name="flags" />
          <parameter type="GDBusInterfaceInfo*" name="info" />
          <parameter type="const-gchar*" name="name" />
          <parameter type="const-gchar*" name="object_path" />
          <parameter type="const-gchar*" name="interface_name" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </constructor>
      <constructor cname="g_dbus_proxy_new_sync">
        <parameters>
          <parameter type="GDBusConnection*" name="connection" />
          <parameter type="GDBusProxyFlags" name="flags" />
          <parameter type="GDBusInterfaceInfo*" name="info" />
          <parameter type="const-gchar*" name="name" />
          <parameter type="const-gchar*" name="object_path" />
          <parameter type="const-gchar*" name="interface_name" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </constructor>
      <method name="SetCachedProperty" cname="g_dbus_proxy_set_cached_property">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="property_name" />
          <parameter type="GVariant*" name="value" />
        </parameters>
      </method>
      <method name="SetDefaultTimeout" cname="g_dbus_proxy_set_default_timeout">
        <return-type type="void" />
        <parameters>
          <parameter type="gint" name="timeout_msec" />
        </parameters>
      </method>
      <method name="SetInterfaceInfo" cname="g_dbus_proxy_set_interface_info">
        <return-type type="void" />
        <parameters>
          <parameter type="GDBusInterfaceInfo*" name="info" />
        </parameters>
      </method>
    </object>
    <object name="DBusServer" cname="GDBusServer" parent="GObject">
      <class_struct cname="GDBusServerClass">
        <field name="ParentClass" cname="parent_class" type="GObjectClass" />
        <method signal_vm="new_connection" />
      </class_struct>
      <property name="Flags" cname="flags" type="GDbusServerFlags" readable="true" writeable="true" construct-only="true" />
      <property name="Guid" cname="guid" type="gchar*" readable="true" writeable="true" construct-only="true" />
      <property name="Address" cname="address" type="gchar*" readable="true" writeable="true" construct-only="true" />
      <property name="ClientAddress" cname="client-address" type="gchar*" readable="true" />
      <property name="Active" cname="active" type="gboolean" readable="true" />
      <property name="AuthenticationObserver" cname="authentication-observer" type="GDbusAuthObserver" readable="true" writeable="true" construct-only="true" />
      <signal name="NewConnection" cname="new-connection" when="LAST" field_name="new_connection">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GDBusConnection*" name="connection" />
        </parameters>
      </signal>
      <implements>
        <interface cname="GInitable" />
      </implements>
      <method name="GetClientAddress" cname="g_dbus_server_get_client_address">
        <return-type type="const-gchar*" />
      </method>
      <method name="GetFlags" cname="g_dbus_server_get_flags">
        <return-type type="GDBusServerFlags" />
      </method>
      <method name="GetGuid" cname="g_dbus_server_get_guid">
        <return-type type="const-gchar*" />
      </method>
      <method name="GetType" cname="g_dbus_server_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="IsActive" cname="g_dbus_server_is_active">
        <return-type type="gboolean" />
      </method>
      <constructor cname="g_dbus_server_new_sync">
        <parameters>
          <parameter type="const-gchar*" name="address" />
          <parameter type="GDBusServerFlags" name="flags" />
          <parameter type="const-gchar*" name="guid" />
          <parameter type="GDBusAuthObserver*" name="observer" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </constructor>
      <method name="Start" cname="g_dbus_server_start">
        <return-type type="void" />
      </method>
      <method name="Stop" cname="g_dbus_server_stop">
        <return-type type="void" />
      </method>
    </object>
    <object name="DesktopAppInfo" cname="GDesktopAppInfo" parent="GObject">
      <class_struct cname="GDesktopAppInfoClass">
        <field name="ParentClass" cname="parent_class" type="GObjectClass" />
      </class_struct>
      <implements>
        <interface cname="GAppInfo" />
      </implements>
      <method name="GetFilename" cname="g_desktop_app_info_get_filename">
        <return-type type="const-char*" />
      </method>
      <method name="GetIsHidden" cname="g_desktop_app_info_get_is_hidden">
        <return-type type="gboolean" />
      </method>
      <method name="GetType" cname="g_desktop_app_info_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="LaunchUrisAsManager" cname="g_desktop_app_info_launch_uris_as_manager" deprecated="1">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GList*" name="uris" />
          <parameter type="GAppLaunchContext*" name="launch_context" />
          <parameter type="GSpawnFlags" name="spawn_flags" />
          <parameter type="GSpawnChildSetupFunc" name="user_setup" />
          <parameter type="gpointer" name="user_setup_data" />
          <parameter type="GDesktopAppLaunchCallback" name="pid_callback" />
          <parameter type="gpointer" name="pid_callback_data" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <constructor cname="g_desktop_app_info_new">
        <parameters>
          <parameter type="const-char*" name="desktop_id" />
        </parameters>
      </constructor>
      <constructor cname="g_desktop_app_info_new_from_filename">
        <parameters>
          <parameter type="const-char*" name="filename" />
        </parameters>
      </constructor>
      <constructor cname="g_desktop_app_info_new_from_keyfile">
        <parameters>
          <parameter type="GKeyFile*" name="key_file" />
        </parameters>
      </constructor>
      <method name="SetDesktopEnv" cname="g_desktop_app_info_set_desktop_env" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="desktop_env" />
        </parameters>
      </method>
    </object>
    <object name="DummyProxyResolver" cname="GDummyProxyResolver" parent="GObject">
      <class_struct cname="GDummyProxyResolverClass">
        <field name="ParentClass" cname="parent_class" type="GObjectClass" />
      </class_struct>
      <implements>
        <interface cname="GProxyResolver" />
      </implements>
    </object>
    <object name="DummyTlsBackend" cname="GDummyTlsBackend" parent="GObject">
      <class_struct cname="GDummyTlsBackendClass">
        <field name="ParentClass" cname="parent_class" type="GObjectClass" />
      </class_struct>
      <implements>
        <interface cname="GTlsBackend" />
      </implements>
    </object>
    <object name="Emblem" cname="GEmblem" parent="GObject">
      <class_struct cname="GEmblemClass">
        <field name="ParentClass" cname="parent_class" type="GObjectClass" />
      </class_struct>
      <property name="Origin" cname="origin" type="GEmblemOrigin" readable="true" writeable="true" construct-only="true" />
      <property name="Icon" cname="icon" type="GObject" readable="true" writeable="true" construct-only="true" />
      <implements>
        <interface cname="GIcon" />
      </implements>
      <method name="GetIcon" cname="g_emblem_get_icon">
        <return-type type="GIcon*" />
      </method>
      <method name="GetOrigin" cname="g_emblem_get_origin">
        <return-type type="GEmblemOrigin" />
      </method>
      <method name="GetType" cname="g_emblem_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="g_emblem_new">
        <parameters>
          <parameter type="GIcon*" name="icon" />
        </parameters>
      </constructor>
      <constructor cname="g_emblem_new_with_origin">
        <parameters>
          <parameter type="GIcon*" name="icon" />
          <parameter type="GEmblemOrigin" name="origin" />
        </parameters>
      </constructor>
    </object>
    <object name="EmblemedIcon" cname="GEmblemedIcon" parent="GObject">
      <class_struct cname="GEmblemedIconClass">
        <field name="ParentClass" cname="parent_class" type="GObjectClass" />
      </class_struct>
      <field name="Priv" cname="priv" type="GEmblemedIconPrivate*" />
      <property name="Gicon" cname="gicon" type="GIcon" readable="true" writeable="true" construct-only="true" />
      <implements>
        <interface cname="GIcon" />
      </implements>
      <method name="AddEmblem" cname="g_emblemed_icon_add_emblem">
        <return-type type="void" />
        <parameters>
          <parameter type="GEmblem*" name="emblem" />
        </parameters>
      </method>
      <method name="ClearEmblems" cname="g_emblemed_icon_clear_emblems">
        <return-type type="void" />
      </method>
      <method name="GetEmblems" cname="g_emblemed_icon_get_emblems">
        <return-type type="GList*" />
      </method>
      <method name="GetIcon" cname="g_emblemed_icon_get_icon">
        <return-type type="GIcon*" />
      </method>
      <method name="GetType" cname="g_emblemed_icon_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="g_emblemed_icon_new">
        <parameters>
          <parameter type="GIcon*" name="icon" />
          <parameter type="GEmblem*" name="emblem" />
        </parameters>
      </constructor>
    </object>
    <object name="FilenameCompleter" cname="GFilenameCompleter" parent="GObject">
      <class_struct cname="GFilenameCompleterClass">
        <field name="ParentClass" cname="parent_class" type="GObjectClass" />
        <method signal_vm="got_completion_data" />
        <method vm="_g_reserved1" />
        <method vm="_g_reserved2" />
        <method vm="_g_reserved3" />
      </class_struct>
      <signal name="GotCompletionData" cname="got-completion-data" when="LAST" field_name="got_completion_data">
        <return-type type="void" />
        <parameters />
      </signal>
      <virtual_method name="GReserved1" cname="_g_reserved1" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved2" cname="_g_reserved2" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved3" cname="_g_reserved3" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <method name="GetCompletionSuffix" cname="g_filename_completer_get_completion_suffix">
        <return-type type="char*" />
        <parameters>
          <parameter type="const-char*" name="initial_text" />
        </parameters>
      </method>
      <method name="GetCompletions" cname="g_filename_completer_get_completions">
        <return-type type="char**" />
        <parameters>
          <parameter type="const-char*" name="initial_text" />
        </parameters>
      </method>
      <method name="GetType" cname="g_filename_completer_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="g_filename_completer_new" />
      <method name="SetDirsOnly" cname="g_filename_completer_set_dirs_only">
        <return-type type="void" />
        <parameters>
          <parameter type="gboolean" name="dirs_only" />
        </parameters>
      </method>
    </object>
    <object name="FileEnumerator" cname="GFileEnumerator" parent="GObject">
      <class_struct cname="GFileEnumeratorClass">
        <field name="ParentClass" cname="parent_class" type="GObjectClass" />
        <method vm="next_file" />
        <method vm="close_fn" />
        <method vm="next_files_async" />
        <method vm="next_files_finish" />
        <method vm="close_async" />
        <method vm="close_finish" />
        <method vm="_g_reserved1" />
        <method vm="_g_reserved2" />
        <method vm="_g_reserved3" />
        <method vm="_g_reserved4" />
        <method vm="_g_reserved5" />
        <method vm="_g_reserved6" />
        <method vm="_g_reserved7" />
      </class_struct>
      <field name="Priv" cname="priv" type="GFileEnumeratorPrivate*" />
      <property name="Container" cname="container" type="GFile" writeable="true" construct-only="true" />
      <virtual_method name="NextFile" cname="next_file">
        <return-type type="GFileInfo*" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="CloseFn" cname="close_fn">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="NextFilesAsync" cname="next_files_async">
        <return-type type="void" />
        <parameters>
          <parameter type="int" name="num_files" />
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="NextFilesFinish" cname="next_files_finish">
        <return-type type="GList*" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="CloseAsync" cname="close_async">
        <return-type type="void" />
        <parameters>
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="CloseFinish" cname="close_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="GReserved1" cname="_g_reserved1" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved2" cname="_g_reserved2" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved3" cname="_g_reserved3" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved4" cname="_g_reserved4" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved5" cname="_g_reserved5" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved6" cname="_g_reserved6" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved7" cname="_g_reserved7" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <method name="Close" cname="g_file_enumerator_close">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="CloseAsync" cname="g_file_enumerator_close_async">
        <return-type type="void" />
        <parameters>
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="CloseFinish" cname="g_file_enumerator_close_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="GetContainer" cname="g_file_enumerator_get_container">
        <return-type type="GFile*" />
      </method>
      <method name="GetType" cname="g_file_enumerator_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="HasPending" cname="g_file_enumerator_has_pending">
        <return-type type="gboolean" />
      </method>
      <method name="IsClosed" cname="g_file_enumerator_is_closed">
        <return-type type="gboolean" />
      </method>
      <method name="NextFile" cname="g_file_enumerator_next_file">
        <return-type type="GFileInfo*" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="NextFilesAsync" cname="g_file_enumerator_next_files_async">
        <return-type type="void" />
        <parameters>
          <parameter type="int" name="num_files" />
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="NextFilesFinish" cname="g_file_enumerator_next_files_finish">
        <return-type type="GList*" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="SetPending" cname="g_file_enumerator_set_pending">
        <return-type type="void" />
        <parameters>
          <parameter type="gboolean" name="pending" />
        </parameters>
      </method>
    </object>
    <object name="FileIcon" cname="GFileIcon" parent="GObject">
      <class_struct cname="GFileIconClass">
        <field name="ParentClass" cname="parent_class" type="GObjectClass" />
      </class_struct>
      <property name="File" cname="file" type="GFile" readable="true" writeable="true" construct-only="true" />
      <implements>
        <interface cname="GIcon" />
        <interface cname="GLoadableIcon" />
      </implements>
      <method name="GetFile" cname="g_file_icon_get_file">
        <return-type type="GFile*" />
      </method>
      <method name="GetType" cname="g_file_icon_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="g_file_icon_new">
        <parameters>
          <parameter type="GFile*" name="file" />
        </parameters>
      </constructor>
    </object>
    <object name="FileInfo" cname="GFileInfo" parent="GObject">
      <class_struct cname="GFileInfoClass">
        <field name="ParentClass" cname="parent_class" type="GObjectClass" />
      </class_struct>
      <method name="ClearStatus" cname="g_file_info_clear_status">
        <return-type type="void" />
      </method>
      <method name="CopyInto" cname="g_file_info_copy_into">
        <return-type type="void" />
        <parameters>
          <parameter type="GFileInfo*" name="dest_info" />
        </parameters>
      </method>
      <method name="Dup" cname="g_file_info_dup">
        <return-type type="GFileInfo*" />
      </method>
      <method name="GetAttributeAsString" cname="g_file_info_get_attribute_as_string">
        <return-type type="char*" />
        <parameters>
          <parameter type="const-char*" name="attribute" />
        </parameters>
      </method>
      <method name="GetAttributeBoolean" cname="g_file_info_get_attribute_boolean">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-char*" name="attribute" />
        </parameters>
      </method>
      <method name="GetAttributeByteString" cname="g_file_info_get_attribute_byte_string">
        <return-type type="const-char*" />
        <parameters>
          <parameter type="const-char*" name="attribute" />
        </parameters>
      </method>
      <method name="GetAttributeData" cname="g_file_info_get_attribute_data">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-char*" name="attribute" />
          <parameter type="GFileAttributeType*" name="type" />
          <parameter type="gpointer*" name="value_pp" />
          <parameter type="GFileAttributeStatus*" name="status" />
        </parameters>
      </method>
      <method name="GetAttributeInt32" cname="g_file_info_get_attribute_int32">
        <return-type type="gint32" />
        <parameters>
          <parameter type="const-char*" name="attribute" />
        </parameters>
      </method>
      <method name="GetAttributeInt64" cname="g_file_info_get_attribute_int64">
        <return-type type="gint64" />
        <parameters>
          <parameter type="const-char*" name="attribute" />
        </parameters>
      </method>
      <method name="GetAttributeObject" cname="g_file_info_get_attribute_object">
        <return-type type="GObject*" />
        <parameters>
          <parameter type="const-char*" name="attribute" />
        </parameters>
      </method>
      <method name="GetAttributeStatus" cname="g_file_info_get_attribute_status">
        <return-type type="GFileAttributeStatus" />
        <parameters>
          <parameter type="const-char*" name="attribute" />
        </parameters>
      </method>
      <method name="GetAttributeString" cname="g_file_info_get_attribute_string">
        <return-type type="const-char*" />
        <parameters>
          <parameter type="const-char*" name="attribute" />
        </parameters>
      </method>
      <method name="GetAttributeStringv" cname="g_file_info_get_attribute_stringv">
        <return-type type="char**" />
        <parameters>
          <parameter type="const-char*" name="attribute" />
        </parameters>
      </method>
      <method name="GetAttributeType" cname="g_file_info_get_attribute_type">
        <return-type type="GFileAttributeType" />
        <parameters>
          <parameter type="const-char*" name="attribute" />
        </parameters>
      </method>
      <method name="GetAttributeUint32" cname="g_file_info_get_attribute_uint32">
        <return-type type="guint32" />
        <parameters>
          <parameter type="const-char*" name="attribute" />
        </parameters>
      </method>
      <method name="GetAttributeUint64" cname="g_file_info_get_attribute_uint64">
        <return-type type="guint64" />
        <parameters>
          <parameter type="const-char*" name="attribute" />
        </parameters>
      </method>
      <method name="GetContentType" cname="g_file_info_get_content_type">
        <return-type type="const-char*" />
      </method>
      <method name="GetDisplayName" cname="g_file_info_get_display_name">
        <return-type type="const-char*" />
      </method>
      <method name="GetEditName" cname="g_file_info_get_edit_name">
        <return-type type="const-char*" />
      </method>
      <method name="GetEtag" cname="g_file_info_get_etag">
        <return-type type="const-char*" />
      </method>
      <method name="GetFileType" cname="g_file_info_get_file_type">
        <return-type type="GFileType" />
      </method>
      <method name="GetIcon" cname="g_file_info_get_icon">
        <return-type type="GIcon*" />
      </method>
      <method name="GetIsBackup" cname="g_file_info_get_is_backup">
        <return-type type="gboolean" />
      </method>
      <method name="GetIsHidden" cname="g_file_info_get_is_hidden">
        <return-type type="gboolean" />
      </method>
      <method name="GetIsSymlink" cname="g_file_info_get_is_symlink">
        <return-type type="gboolean" />
      </method>
      <method name="GetModificationTime" cname="g_file_info_get_modification_time">
        <return-type type="void" />
        <parameters>
          <parameter type="GTimeVal*" name="result" />
        </parameters>
      </method>
      <method name="GetName" cname="g_file_info_get_name">
        <return-type type="const-char*" />
      </method>
      <method name="GetSize" cname="g_file_info_get_size">
        <return-type type="goffset" />
      </method>
      <method name="GetSortOrder" cname="g_file_info_get_sort_order">
        <return-type type="gint32" />
      </method>
      <method name="GetSymlinkTarget" cname="g_file_info_get_symlink_target">
        <return-type type="const-char*" />
      </method>
      <method name="GetType" cname="g_file_info_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="HasAttribute" cname="g_file_info_has_attribute">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-char*" name="attribute" />
        </parameters>
      </method>
      <method name="HasNamespace" cname="g_file_info_has_namespace">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-char*" name="name_space" />
        </parameters>
      </method>
      <method name="ListAttributes" cname="g_file_info_list_attributes">
        <return-type type="char**" />
        <parameters>
          <parameter type="const-char*" name="name_space" />
        </parameters>
      </method>
      <constructor cname="g_file_info_new" />
      <method name="RemoveAttribute" cname="g_file_info_remove_attribute">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="attribute" />
        </parameters>
      </method>
      <method name="SetAttribute" cname="g_file_info_set_attribute">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="attribute" />
          <parameter type="GFileAttributeType" name="type" />
          <parameter type="gpointer" name="value_p" />
        </parameters>
      </method>
      <method name="SetAttributeBoolean" cname="g_file_info_set_attribute_boolean">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="attribute" />
          <parameter type="gboolean" name="attr_value" />
        </parameters>
      </method>
      <method name="SetAttributeByteString" cname="g_file_info_set_attribute_byte_string">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="attribute" />
          <parameter type="const-char*" name="attr_value" />
        </parameters>
      </method>
      <method name="SetAttributeInt32" cname="g_file_info_set_attribute_int32">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="attribute" />
          <parameter type="gint32" name="attr_value" />
        </parameters>
      </method>
      <method name="SetAttributeInt64" cname="g_file_info_set_attribute_int64">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="attribute" />
          <parameter type="gint64" name="attr_value" />
        </parameters>
      </method>
      <method name="SetAttributeMask" cname="g_file_info_set_attribute_mask">
        <return-type type="void" />
        <parameters>
          <parameter type="GFileAttributeMatcher*" name="mask" />
        </parameters>
      </method>
      <method name="SetAttributeObject" cname="g_file_info_set_attribute_object">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="attribute" />
          <parameter type="GObject*" name="attr_value" />
        </parameters>
      </method>
      <method name="SetAttributeStatus" cname="g_file_info_set_attribute_status">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-char*" name="attribute" />
          <parameter type="GFileAttributeStatus" name="status" />
        </parameters>
      </method>
      <method name="SetAttributeString" cname="g_file_info_set_attribute_string">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="attribute" />
          <parameter type="const-char*" name="attr_value" />
        </parameters>
      </method>
      <method name="SetAttributeStringv" cname="g_file_info_set_attribute_stringv">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="attribute" />
          <parameter type="char**" name="attr_value" />
        </parameters>
      </method>
      <method name="SetAttributeUint32" cname="g_file_info_set_attribute_uint32">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="attribute" />
          <parameter type="guint32" name="attr_value" />
        </parameters>
      </method>
      <method name="SetAttributeUint64" cname="g_file_info_set_attribute_uint64">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="attribute" />
          <parameter type="guint64" name="attr_value" />
        </parameters>
      </method>
      <method name="SetContentType" cname="g_file_info_set_content_type">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="content_type" />
        </parameters>
      </method>
      <method name="SetDisplayName" cname="g_file_info_set_display_name">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="display_name" />
        </parameters>
      </method>
      <method name="SetEditName" cname="g_file_info_set_edit_name">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="edit_name" />
        </parameters>
      </method>
      <method name="SetFileType" cname="g_file_info_set_file_type">
        <return-type type="void" />
        <parameters>
          <parameter type="GFileType" name="type" />
        </parameters>
      </method>
      <method name="SetIcon" cname="g_file_info_set_icon">
        <return-type type="void" />
        <parameters>
          <parameter type="GIcon*" name="icon" />
        </parameters>
      </method>
      <method name="SetIsHidden" cname="g_file_info_set_is_hidden">
        <return-type type="void" />
        <parameters>
          <parameter type="gboolean" name="is_hidden" />
        </parameters>
      </method>
      <method name="SetIsSymlink" cname="g_file_info_set_is_symlink">
        <return-type type="void" />
        <parameters>
          <parameter type="gboolean" name="is_symlink" />
        </parameters>
      </method>
      <method name="SetModificationTime" cname="g_file_info_set_modification_time">
        <return-type type="void" />
        <parameters>
          <parameter type="GTimeVal*" name="mtime" />
        </parameters>
      </method>
      <method name="SetName" cname="g_file_info_set_name">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="name" />
        </parameters>
      </method>
      <method name="SetSize" cname="g_file_info_set_size">
        <return-type type="void" />
        <parameters>
          <parameter type="goffset" name="size" />
        </parameters>
      </method>
      <method name="SetSortOrder" cname="g_file_info_set_sort_order">
        <return-type type="void" />
        <parameters>
          <parameter type="gint32" name="sort_order" />
        </parameters>
      </method>
      <method name="SetSymlinkTarget" cname="g_file_info_set_symlink_target">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="symlink_target" />
        </parameters>
      </method>
      <method name="UnsetAttributeMask" cname="g_file_info_unset_attribute_mask">
        <return-type type="void" />
      </method>
    </object>
    <object name="FileInputStream" cname="GFileInputStream" parent="GInputStream">
      <class_struct cname="GFileInputStreamClass">
        <field name="ParentClass" cname="parent_class" type="GInputStreamClass" />
        <method vm="tell" />
        <method vm="can_seek" />
        <method vm="seek" />
        <method vm="query_info" />
        <method vm="query_info_async" />
        <method vm="query_info_finish" />
        <method vm="_g_reserved1" />
        <method vm="_g_reserved2" />
        <method vm="_g_reserved3" />
        <method vm="_g_reserved4" />
        <method vm="_g_reserved5" />
      </class_struct>
      <field name="Priv" cname="priv" type="GFileInputStreamPrivate*" />
      <virtual_method name="Tell" cname="tell">
        <return-type type="goffset" />
        <parameters />
      </virtual_method>
      <virtual_method name="CanSeek" cname="can_seek">
        <return-type type="gboolean" />
        <parameters />
      </virtual_method>
      <virtual_method name="Seek" cname="seek">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="goffset" name="offset" />
          <parameter type="GSeekType" name="type" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="QueryInfo" cname="query_info">
        <return-type type="GFileInfo*" />
        <parameters>
          <parameter type="const-char*" name="attributes" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="QueryInfoAsync" cname="query_info_async">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="attributes" />
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="QueryInfoFinish" cname="query_info_finish">
        <return-type type="GFileInfo*" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="GReserved1" cname="_g_reserved1" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved2" cname="_g_reserved2" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved3" cname="_g_reserved3" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved4" cname="_g_reserved4" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved5" cname="_g_reserved5" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <implements>
        <interface cname="GSeekable" />
      </implements>
      <method name="GetType" cname="g_file_input_stream_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="QueryInfo" cname="g_file_input_stream_query_info">
        <return-type type="GFileInfo*" />
        <parameters>
          <parameter type="const-char*" name="attributes" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="QueryInfoAsync" cname="g_file_input_stream_query_info_async">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="attributes" />
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="QueryInfoFinish" cname="g_file_input_stream_query_info_finish">
        <return-type type="GFileInfo*" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
    </object>
    <object name="FileIOStream" cname="GFileIOStream" parent="GIOStream">
      <class_struct cname="GFileIOStreamClass">
        <field name="ParentClass" cname="parent_class" type="GIOStreamClass" />
        <method vm="tell" />
        <method vm="can_seek" />
        <method vm="seek" />
        <method vm="can_truncate" />
        <method vm="truncate_fn" />
        <method vm="query_info" />
        <method vm="query_info_async" />
        <method vm="query_info_finish" />
        <method vm="get_etag" />
        <method vm="_g_reserved1" />
        <method vm="_g_reserved2" />
        <method vm="_g_reserved3" />
        <method vm="_g_reserved4" />
        <method vm="_g_reserved5" />
      </class_struct>
      <field name="Priv" cname="priv" type="GFileIOStreamPrivate*" />
      <virtual_method name="Tell" cname="tell">
        <return-type type="goffset" />
        <parameters />
      </virtual_method>
      <virtual_method name="CanSeek" cname="can_seek">
        <return-type type="gboolean" />
        <parameters />
      </virtual_method>
      <virtual_method name="Seek" cname="seek">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="goffset" name="offset" />
          <parameter type="GSeekType" name="type" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="CanTruncate" cname="can_truncate">
        <return-type type="gboolean" />
        <parameters />
      </virtual_method>
      <virtual_method name="TruncateFn" cname="truncate_fn">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="goffset" name="size" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="QueryInfo" cname="query_info">
        <return-type type="GFileInfo*" />
        <parameters>
          <parameter type="const-char*" name="attributes" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="QueryInfoAsync" cname="query_info_async">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="attributes" />
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="QueryInfoFinish" cname="query_info_finish">
        <return-type type="GFileInfo*" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="GetEtag" cname="get_etag">
        <return-type type="char*" />
        <parameters />
      </virtual_method>
      <virtual_method name="GReserved1" cname="_g_reserved1" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved2" cname="_g_reserved2" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved3" cname="_g_reserved3" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved4" cname="_g_reserved4" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved5" cname="_g_reserved5" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <implements>
        <interface cname="GSeekable" />
      </implements>
      <method name="GetEtag" cname="g_file_io_stream_get_etag">
        <return-type type="char*" />
      </method>
      <method name="GetType" cname="g_file_io_stream_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="QueryInfo" cname="g_file_io_stream_query_info">
        <return-type type="GFileInfo*" />
        <parameters>
          <parameter type="const-char*" name="attributes" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="QueryInfoAsync" cname="g_file_io_stream_query_info_async">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="attributes" />
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="QueryInfoFinish" cname="g_file_io_stream_query_info_finish">
        <return-type type="GFileInfo*" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
    </object>
    <object name="FileMonitor" cname="GFileMonitor" parent="GObject">
      <class_struct cname="GFileMonitorClass">
        <field name="ParentClass" cname="parent_class" type="GObjectClass" />
        <method signal_vm="changed" />
        <method vm="cancel" />
        <method vm="_g_reserved1" />
        <method vm="_g_reserved2" />
        <method vm="_g_reserved3" />
        <method vm="_g_reserved4" />
        <method vm="_g_reserved5" />
      </class_struct>
      <field name="Priv" cname="priv" type="GFileMonitorPrivate*" />
      <signal name="Changed" cname="changed" when="LAST" field_name="changed">
        <return-type type="void" />
        <parameters>
          <parameter type="GFile*" name="file" />
          <parameter type="GFile*" name="other_file" />
          <parameter type="GFileMonitorEvent" name="event_type" />
        </parameters>
      </signal>
      <property name="RateLimit" cname="rate-limit" type="gint" readable="true" writeable="true" />
      <property name="Cancelled" cname="cancelled" type="gboolean" readable="true" />
      <virtual_method name="Cancel" cname="cancel">
        <return-type type="gboolean" />
        <parameters />
      </virtual_method>
      <virtual_method name="GReserved1" cname="_g_reserved1" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved2" cname="_g_reserved2" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved3" cname="_g_reserved3" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved4" cname="_g_reserved4" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved5" cname="_g_reserved5" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <method name="Cancel" cname="g_file_monitor_cancel">
        <return-type type="gboolean" />
      </method>
      <method name="Directory" cname="g_file_monitor_directory" shared="true">
        <return-type type="GFileMonitor*" />
        <parameters>
          <parameter type="GFile*" name="file" />
          <parameter type="GFileMonitorFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="EmitEvent" cname="g_file_monitor_emit_event">
        <return-type type="void" />
        <parameters>
          <parameter type="GFile*" name="child" />
          <parameter type="GFile*" name="other_file" />
          <parameter type="GFileMonitorEvent" name="event_type" />
        </parameters>
      </method>
      <method name="File" cname="g_file_monitor_file" shared="true">
        <return-type type="GFileMonitor*" />
        <parameters>
          <parameter type="GFile*" name="file" />
          <parameter type="GFileMonitorFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="GetType" cname="g_file_monitor_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="IsCancelled" cname="g_file_monitor_is_cancelled">
        <return-type type="gboolean" />
      </method>
      <method name="SetRateLimit" cname="g_file_monitor_set_rate_limit">
        <return-type type="void" />
        <parameters>
          <parameter type="gint" name="limit_msecs" />
        </parameters>
      </method>
    </object>
    <object name="FileOutputStream" cname="GFileOutputStream" parent="GOutputStream">
      <class_struct cname="GFileOutputStreamClass">
        <field name="ParentClass" cname="parent_class" type="GOutputStreamClass" />
        <method vm="tell" />
        <method vm="can_seek" />
        <method vm="seek" />
        <method vm="can_truncate" />
        <method vm="truncate_fn" />
        <method vm="query_info" />
        <method vm="query_info_async" />
        <method vm="query_info_finish" />
        <method vm="get_etag" />
        <method vm="_g_reserved1" />
        <method vm="_g_reserved2" />
        <method vm="_g_reserved3" />
        <method vm="_g_reserved4" />
        <method vm="_g_reserved5" />
      </class_struct>
      <field name="Priv" cname="priv" type="GFileOutputStreamPrivate*" />
      <virtual_method name="Tell" cname="tell">
        <return-type type="goffset" />
        <parameters />
      </virtual_method>
      <virtual_method name="CanSeek" cname="can_seek">
        <return-type type="gboolean" />
        <parameters />
      </virtual_method>
      <virtual_method name="Seek" cname="seek">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="goffset" name="offset" />
          <parameter type="GSeekType" name="type" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="CanTruncate" cname="can_truncate">
        <return-type type="gboolean" />
        <parameters />
      </virtual_method>
      <virtual_method name="TruncateFn" cname="truncate_fn">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="goffset" name="size" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="QueryInfo" cname="query_info">
        <return-type type="GFileInfo*" />
        <parameters>
          <parameter type="const-char*" name="attributes" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="QueryInfoAsync" cname="query_info_async">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="attributes" />
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="QueryInfoFinish" cname="query_info_finish">
        <return-type type="GFileInfo*" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="GetEtag" cname="get_etag">
        <return-type type="char*" />
        <parameters />
      </virtual_method>
      <virtual_method name="GReserved1" cname="_g_reserved1" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved2" cname="_g_reserved2" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved3" cname="_g_reserved3" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved4" cname="_g_reserved4" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved5" cname="_g_reserved5" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <implements>
        <interface cname="GSeekable" />
      </implements>
      <method name="GetEtag" cname="g_file_output_stream_get_etag">
        <return-type type="char*" />
      </method>
      <method name="GetType" cname="g_file_output_stream_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="QueryInfo" cname="g_file_output_stream_query_info">
        <return-type type="GFileInfo*" />
        <parameters>
          <parameter type="const-char*" name="attributes" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="QueryInfoAsync" cname="g_file_output_stream_query_info_async">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="attributes" />
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="QueryInfoFinish" cname="g_file_output_stream_query_info_finish">
        <return-type type="GFileInfo*" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
    </object>
    <object name="FilterInputStream" cname="GFilterInputStream" parent="GInputStream">
      <class_struct cname="GFilterInputStreamClass">
        <field name="ParentClass" cname="parent_class" type="GInputStreamClass" />
        <method vm="_g_reserved1" />
        <method vm="_g_reserved2" />
        <method vm="_g_reserved3" />
      </class_struct>
      <field name="BaseStream" cname="base_stream" type="GInputStream*" />
      <property name="BaseStream" cname="base-stream" type="GInputStream" readable="true" writeable="true" construct-only="true" />
      <property name="CloseBaseStream" cname="close-base-stream" type="gboolean" readable="true" writeable="true" construct-only="true" />
      <virtual_method name="GReserved1" cname="_g_reserved1" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved2" cname="_g_reserved2" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved3" cname="_g_reserved3" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <method name="GetBaseStream" cname="g_filter_input_stream_get_base_stream">
        <return-type type="GInputStream*" />
      </method>
      <method name="GetCloseBaseStream" cname="g_filter_input_stream_get_close_base_stream">
        <return-type type="gboolean" />
      </method>
      <method name="GetType" cname="g_filter_input_stream_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="SetCloseBaseStream" cname="g_filter_input_stream_set_close_base_stream">
        <return-type type="void" />
        <parameters>
          <parameter type="gboolean" name="close_base" />
        </parameters>
      </method>
    </object>
    <object name="FilterOutputStream" cname="GFilterOutputStream" parent="GOutputStream">
      <class_struct cname="GFilterOutputStreamClass">
        <field name="ParentClass" cname="parent_class" type="GOutputStreamClass" />
        <method vm="_g_reserved1" />
        <method vm="_g_reserved2" />
        <method vm="_g_reserved3" />
      </class_struct>
      <field name="BaseStream" cname="base_stream" type="GOutputStream*" />
      <property name="BaseStream" cname="base-stream" type="GOutputStream" readable="true" writeable="true" construct-only="true" />
      <property name="CloseBaseStream" cname="close-base-stream" type="gboolean" readable="true" writeable="true" construct-only="true" />
      <virtual_method name="GReserved1" cname="_g_reserved1" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved2" cname="_g_reserved2" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved3" cname="_g_reserved3" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <method name="GetBaseStream" cname="g_filter_output_stream_get_base_stream">
        <return-type type="GOutputStream*" />
      </method>
      <method name="GetCloseBaseStream" cname="g_filter_output_stream_get_close_base_stream">
        <return-type type="gboolean" />
      </method>
      <method name="GetType" cname="g_filter_output_stream_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="SetCloseBaseStream" cname="g_filter_output_stream_set_close_base_stream">
        <return-type type="void" />
        <parameters>
          <parameter type="gboolean" name="close_base" />
        </parameters>
      </method>
    </object>
    <object name="InetAddress" cname="GInetAddress" parent="GObject">
      <class_struct cname="GInetAddressClass">
        <field name="ParentClass" cname="parent_class" type="GObjectClass" />
        <method vm="to_string" />
        <method vm="to_bytes" />
      </class_struct>
      <field name="Priv" cname="priv" type="GInetAddressPrivate*" />
      <property name="Family" cname="family" type="GSocketFamily" readable="true" writeable="true" construct-only="true" />
      <property name="Bytes" cname="bytes" type="gpointer" readable="true" writeable="true" construct-only="true" />
      <property name="IsAny" cname="is-any" type="gboolean" readable="true" />
      <property name="IsLinkLocal" cname="is-link-local" type="gboolean" readable="true" />
      <property name="IsLoopback" cname="is-loopback" type="gboolean" readable="true" />
      <property name="IsSiteLocal" cname="is-site-local" type="gboolean" readable="true" />
      <property name="IsMulticast" cname="is-multicast" type="gboolean" readable="true" />
      <property name="IsMcGlobal" cname="is-mc-global" type="gboolean" readable="true" />
      <property name="IsMcLinkLocal" cname="is-mc-link-local" type="gboolean" readable="true" />
      <property name="IsMcNodeLocal" cname="is-mc-node-local" type="gboolean" readable="true" />
      <property name="IsMcOrgLocal" cname="is-mc-org-local" type="gboolean" readable="true" />
      <property name="IsMcSiteLocal" cname="is-mc-site-local" type="gboolean" readable="true" />
      <virtual_method name="ToString" cname="to_string">
        <return-type type="gchar*" />
        <parameters />
      </virtual_method>
      <virtual_method name="ToBytes" cname="to_bytes">
        <return-type type="guint8*" />
        <parameters />
      </virtual_method>
      <method name="GetFamily" cname="g_inet_address_get_family">
        <return-type type="GSocketFamily" />
      </method>
      <method name="GetIsAny" cname="g_inet_address_get_is_any">
        <return-type type="gboolean" />
      </method>
      <method name="GetIsLinkLocal" cname="g_inet_address_get_is_link_local">
        <return-type type="gboolean" />
      </method>
      <method name="GetIsLoopback" cname="g_inet_address_get_is_loopback">
        <return-type type="gboolean" />
      </method>
      <method name="GetIsMcGlobal" cname="g_inet_address_get_is_mc_global">
        <return-type type="gboolean" />
      </method>
      <method name="GetIsMcLinkLocal" cname="g_inet_address_get_is_mc_link_local">
        <return-type type="gboolean" />
      </method>
      <method name="GetIsMcNodeLocal" cname="g_inet_address_get_is_mc_node_local">
        <return-type type="gboolean" />
      </method>
      <method name="GetIsMcOrgLocal" cname="g_inet_address_get_is_mc_org_local">
        <return-type type="gboolean" />
      </method>
      <method name="GetIsMcSiteLocal" cname="g_inet_address_get_is_mc_site_local">
        <return-type type="gboolean" />
      </method>
      <method name="GetIsMulticast" cname="g_inet_address_get_is_multicast">
        <return-type type="gboolean" />
      </method>
      <method name="GetIsSiteLocal" cname="g_inet_address_get_is_site_local">
        <return-type type="gboolean" />
      </method>
      <method name="GetNativeSize" cname="g_inet_address_get_native_size">
        <return-type type="gsize" />
      </method>
      <method name="GetType" cname="g_inet_address_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="g_inet_address_new_any">
        <parameters>
          <parameter type="GSocketFamily" name="family" />
        </parameters>
      </constructor>
      <constructor cname="g_inet_address_new_from_bytes">
        <parameters>
          <parameter type="const-guint8*" name="bytes" />
          <parameter type="GSocketFamily" name="family" />
        </parameters>
      </constructor>
      <constructor cname="g_inet_address_new_from_string">
        <parameters>
          <parameter type="const-gchar*" name="string" />
        </parameters>
      </constructor>
      <constructor cname="g_inet_address_new_loopback">
        <parameters>
          <parameter type="GSocketFamily" name="family" />
        </parameters>
      </constructor>
      <method name="ToBytes" cname="g_inet_address_to_bytes">
        <return-type type="const-guint8*" />
      </method>
      <method name="ToString" cname="g_inet_address_to_string">
        <return-type type="gchar*" />
      </method>
    </object>
    <object name="InetSocketAddress" cname="GInetSocketAddress" parent="GSocketAddress">
      <class_struct cname="GInetSocketAddressClass">
        <field name="ParentClass" cname="parent_class" type="GSocketAddressClass" />
      </class_struct>
      <field name="Priv" cname="priv" type="GInetSocketAddressPrivate*" />
      <property name="Address" cname="address" type="GInetAddress" readable="true" writeable="true" construct-only="true" />
      <property name="Port" cname="port" type="guint" readable="true" writeable="true" construct-only="true" />
      <method name="GetAddress" cname="g_inet_socket_address_get_address">
        <return-type type="GInetAddress*" />
      </method>
      <method name="GetPort" cname="g_inet_socket_address_get_port">
        <return-type type="guint16" />
      </method>
      <method name="GetType" cname="g_inet_socket_address_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="g_inet_socket_address_new">
        <parameters>
          <parameter type="GInetAddress*" name="address" />
          <parameter type="guint16" name="port" />
        </parameters>
      </constructor>
    </object>
    <object name="InputStream" cname="GInputStream" parent="GObject">
      <class_struct cname="GInputStreamClass">
        <field name="ParentClass" cname="parent_class" type="GObjectClass" />
        <method vm="read_fn" />
        <method vm="skip" />
        <method vm="close_fn" />
        <method vm="read_async" />
        <method vm="read_finish" />
        <method vm="skip_async" />
        <method vm="skip_finish" />
        <method vm="close_async" />
        <method vm="close_finish" />
        <method vm="_g_reserved1" />
        <method vm="_g_reserved2" />
        <method vm="_g_reserved3" />
        <method vm="_g_reserved4" />
        <method vm="_g_reserved5" />
      </class_struct>
      <field name="Priv" cname="priv" type="GInputStreamPrivate*" />
      <virtual_method name="ReadFn" cname="read_fn">
        <return-type type="gssize" />
        <parameters>
          <parameter type="void*" name="buffer" />
          <parameter type="gsize" name="count" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="Skip" cname="skip">
        <return-type type="gssize" />
        <parameters>
          <parameter type="gsize" name="count" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="CloseFn" cname="close_fn">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="ReadAsync" cname="read_async">
        <return-type type="void" />
        <parameters>
          <parameter type="void*" name="buffer" />
          <parameter type="gsize" name="count" />
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="ReadFinish" cname="read_finish">
        <return-type type="gssize" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="SkipAsync" cname="skip_async">
        <return-type type="void" />
        <parameters>
          <parameter type="gsize" name="count" />
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="SkipFinish" cname="skip_finish">
        <return-type type="gssize" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="CloseAsync" cname="close_async">
        <return-type type="void" />
        <parameters>
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="CloseFinish" cname="close_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="GReserved1" cname="_g_reserved1" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved2" cname="_g_reserved2" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved3" cname="_g_reserved3" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved4" cname="_g_reserved4" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved5" cname="_g_reserved5" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <method name="ClearPending" cname="g_input_stream_clear_pending">
        <return-type type="void" />
      </method>
      <method name="Close" cname="g_input_stream_close">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="CloseAsync" cname="g_input_stream_close_async">
        <return-type type="void" />
        <parameters>
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="CloseFinish" cname="g_input_stream_close_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="GetType" cname="g_input_stream_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="HasPending" cname="g_input_stream_has_pending">
        <return-type type="gboolean" />
      </method>
      <method name="IsClosed" cname="g_input_stream_is_closed">
        <return-type type="gboolean" />
      </method>
      <method name="Read" cname="g_input_stream_read">
        <return-type type="gssize" />
        <parameters>
          <parameter type="void*" name="buffer" />
          <parameter type="gsize" name="count" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="ReadAll" cname="g_input_stream_read_all">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="void*" name="buffer" />
          <parameter type="gsize" name="count" />
          <parameter type="gsize*" name="bytes_read" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="ReadAsync" cname="g_input_stream_read_async">
        <return-type type="void" />
        <parameters>
          <parameter type="void*" name="buffer" />
          <parameter type="gsize" name="count" />
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="ReadFinish" cname="g_input_stream_read_finish">
        <return-type type="gssize" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="SetPending" cname="g_input_stream_set_pending">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="Skip" cname="g_input_stream_skip">
        <return-type type="gssize" />
        <parameters>
          <parameter type="gsize" name="count" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="SkipAsync" cname="g_input_stream_skip_async">
        <return-type type="void" />
        <parameters>
          <parameter type="gsize" name="count" />
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="SkipFinish" cname="g_input_stream_skip_finish">
        <return-type type="gssize" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
    </object>
    <object name="IOStream" cname="GIOStream" parent="GObject">
      <class_struct cname="GIOStreamClass">
        <field name="ParentClass" cname="parent_class" type="GObjectClass" />
        <method vm="get_input_stream" />
        <method vm="get_output_stream" />
        <method vm="close_fn" />
        <method vm="close_async" />
        <method vm="close_finish" />
        <method vm="_g_reserved1" />
        <method vm="_g_reserved2" />
        <method vm="_g_reserved3" />
        <method vm="_g_reserved4" />
        <method vm="_g_reserved5" />
        <method vm="_g_reserved6" />
        <method vm="_g_reserved7" />
        <method vm="_g_reserved8" />
        <method vm="_g_reserved9" />
        <method vm="_g_reserved10" />
      </class_struct>
      <field name="Priv" cname="priv" type="GIOStreamPrivate*" />
      <property name="Closed" cname="closed" type="gboolean" readable="true" writeable="true" />
      <property name="InputStream" cname="input-stream" type="GInputStream" readable="true" />
      <property name="OutputStream" cname="output-stream" type="GOutputStream" readable="true" />
      <virtual_method name="GetInputStream" cname="get_input_stream">
        <return-type type="GInputStream*" />
        <parameters />
      </virtual_method>
      <virtual_method name="GetOutputStream" cname="get_output_stream">
        <return-type type="GOutputStream*" />
        <parameters />
      </virtual_method>
      <virtual_method name="CloseFn" cname="close_fn">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="CloseAsync" cname="close_async">
        <return-type type="void" />
        <parameters>
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="CloseFinish" cname="close_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="GReserved1" cname="_g_reserved1" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved2" cname="_g_reserved2" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved3" cname="_g_reserved3" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved4" cname="_g_reserved4" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved5" cname="_g_reserved5" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved6" cname="_g_reserved6" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved7" cname="_g_reserved7" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved8" cname="_g_reserved8" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved9" cname="_g_reserved9" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved10" cname="_g_reserved10" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <method name="ClearPending" cname="g_io_stream_clear_pending">
        <return-type type="void" />
      </method>
      <method name="Close" cname="g_io_stream_close">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="CloseAsync" cname="g_io_stream_close_async">
        <return-type type="void" />
        <parameters>
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="CloseFinish" cname="g_io_stream_close_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="GetInputStream" cname="g_io_stream_get_input_stream">
        <return-type type="GInputStream*" />
      </method>
      <method name="GetOutputStream" cname="g_io_stream_get_output_stream">
        <return-type type="GOutputStream*" />
      </method>
      <method name="GetType" cname="g_io_stream_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="HasPending" cname="g_io_stream_has_pending">
        <return-type type="gboolean" />
      </method>
      <method name="IsClosed" cname="g_io_stream_is_closed">
        <return-type type="gboolean" />
      </method>
      <method name="SetPending" cname="g_io_stream_set_pending">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="SpliceAsync" cname="g_io_stream_splice_async">
        <return-type type="void" />
        <parameters>
          <parameter type="GIOStream*" name="stream2" />
          <parameter type="GIOStreamSpliceFlags" name="flags" />
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="SpliceFinish" cname="g_io_stream_splice_finish" shared="true">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
    </object>
    <object name="LocalDirectoryMonitor" cname="GLocalDirectoryMonitor" parent="GFileMonitor">
      <class_struct cname="GLocalDirectoryMonitorClass">
        <field name="ParentClass" cname="parent_class" type="GFileMonitorClass" />
        <field name="MountNotify" cname="mount_notify" type="gboolean" />
        <method vm="is_supported" />
      </class_struct>
      <field name="Dirname" cname="dirname" type="gchar*" />
      <field name="Flags" cname="flags" type="GFileMonitorFlags" />
      <field name="MountMonitor" cname="mount_monitor" type="GUnixMountMonitor*" />
      <field name="WasMounted" cname="was_mounted" type="gboolean" />
      <property name="Dirname" cname="dirname" type="gchar*" writeable="true" construct-only="true" />
      <property name="Flags" cname="flags" type="GFileMonitorFlags" writeable="true" construct-only="true" />
      <virtual_method name="IsSupported" cname="is_supported" shared="true">
        <return-type type="gboolean" />
      </virtual_method>
      <method name="GetType" cname="g_local_directory_monitor_get_type" shared="true">
        <return-type type="GType" />
      </method>
    </object>
    <object name="LocalFileEnumerator" cname="GLocalFileEnumerator" parent="GFileEnumerator">
      <class_struct cname="GLocalFileEnumeratorClass">
        <field name="ParentClass" cname="parent_class" type="GFileEnumeratorClass" />
      </class_struct>
    </object>
    <object name="LocalFileIOStream" cname="GLocalFileIOStream" parent="GFileIOStream">
      <class_struct cname="GLocalFileIOStreamClass">
        <field name="ParentClass" cname="parent_class" type="GFileIOStreamClass" />
      </class_struct>
      <field name="InputStream" cname="input_stream" type="GInputStream*" />
      <field name="OutputStream" cname="output_stream" type="GOutputStream*" />
    </object>
    <object name="MemoryInputStream" cname="GMemoryInputStream" parent="GInputStream">
      <class_struct cname="GMemoryInputStreamClass">
        <field name="ParentClass" cname="parent_class" type="GInputStreamClass" />
        <method vm="_g_reserved1" />
        <method vm="_g_reserved2" />
        <method vm="_g_reserved3" />
        <method vm="_g_reserved4" />
        <method vm="_g_reserved5" />
      </class_struct>
      <field name="Priv" cname="priv" type="GMemoryInputStreamPrivate*" />
      <virtual_method name="GReserved1" cname="_g_reserved1" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved2" cname="_g_reserved2" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved3" cname="_g_reserved3" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved4" cname="_g_reserved4" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved5" cname="_g_reserved5" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <implements>
        <interface cname="GSeekable" />
      </implements>
      <method name="AddData" cname="g_memory_input_stream_add_data">
        <return-type type="void" />
        <parameters>
          <parameter type="const-void*" name="data" />
          <parameter type="gssize" name="len" />
          <parameter type="GDestroyNotify" name="destroy" />
        </parameters>
      </method>
      <method name="GetType" cname="g_memory_input_stream_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="g_memory_input_stream_new" />
      <constructor cname="g_memory_input_stream_new_from_data">
        <parameters>
          <parameter type="const-void*" name="data" />
          <parameter type="gssize" name="len" />
          <parameter type="GDestroyNotify" name="destroy" />
        </parameters>
      </constructor>
    </object>
    <object name="MemoryOutputStream" cname="GMemoryOutputStream" parent="GOutputStream">
      <class_struct cname="GMemoryOutputStreamClass">
        <field name="ParentClass" cname="parent_class" type="GOutputStreamClass" />
        <method vm="_g_reserved1" />
        <method vm="_g_reserved2" />
        <method vm="_g_reserved3" />
        <method vm="_g_reserved4" />
        <method vm="_g_reserved5" />
      </class_struct>
      <field name="Priv" cname="priv" type="GMemoryOutputStreamPrivate*" />
      <property name="Data" cname="data" type="gpointer" readable="true" writeable="true" construct-only="true" />
      <property name="Size" cname="size" type="ulong" readable="true" writeable="true" construct-only="true" />
      <property name="DataSize" cname="data-size" type="ulong" readable="true" />
      <property name="ReallocFunction" cname="realloc-function" type="gpointer" readable="true" writeable="true" construct-only="true" />
      <property name="DestroyFunction" cname="destroy-function" type="gpointer" readable="true" writeable="true" construct-only="true" />
      <virtual_method name="GReserved1" cname="_g_reserved1" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved2" cname="_g_reserved2" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved3" cname="_g_reserved3" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved4" cname="_g_reserved4" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved5" cname="_g_reserved5" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <implements>
        <interface cname="GSeekable" />
      </implements>
      <method name="GetData" cname="g_memory_output_stream_get_data">
        <return-type type="gpointer" />
      </method>
      <method name="GetDataSize" cname="g_memory_output_stream_get_data_size">
        <return-type type="gsize" />
      </method>
      <method name="GetSize" cname="g_memory_output_stream_get_size">
        <return-type type="gsize" />
      </method>
      <method name="GetType" cname="g_memory_output_stream_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="g_memory_output_stream_new">
        <parameters>
          <parameter type="gpointer" name="data" />
          <parameter type="gsize" name="size" />
          <parameter type="GReallocFunc" name="realloc_function" />
          <parameter type="GDestroyNotify" name="destroy_function" />
        </parameters>
      </constructor>
      <method name="StealData" cname="g_memory_output_stream_steal_data">
        <return-type type="gpointer" />
      </method>
    </object>
    <object name="MountOperation" cname="GMountOperation" parent="GObject">
      <class_struct cname="GMountOperationClass">
        <field name="ParentClass" cname="parent_class" type="GObjectClass" />
        <method signal_vm="ask_password" />
        <method signal_vm="ask_question" />
        <method signal_vm="reply" />
        <method signal_vm="aborted" />
        <method signal_vm="show_processes" />
        <method vm="_g_reserved1" />
        <method vm="_g_reserved2" />
        <method vm="_g_reserved3" />
        <method vm="_g_reserved4" />
        <method vm="_g_reserved5" />
        <method vm="_g_reserved6" />
        <method vm="_g_reserved7" />
        <method vm="_g_reserved8" />
        <method vm="_g_reserved9" />
        <method vm="_g_reserved10" />
      </class_struct>
      <field name="Priv" cname="priv" type="GMountOperationPrivate*" />
      <signal name="AskPassword" cname="ask-password" when="LAST" field_name="ask_password">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="message" />
          <parameter type="const-char*" name="default_user" />
          <parameter type="const-char*" name="default_domain" />
          <parameter type="GAskPasswordFlags" name="flags" />
        </parameters>
      </signal>
      <signal name="AskQuestion" cname="ask-question" when="LAST" field_name="ask_question">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="message" />
          <parameter type="const-char*" array="true" name="choices" />
        </parameters>
      </signal>
      <signal name="Reply" cname="reply" when="LAST" field_name="reply">
        <return-type type="void" />
        <parameters>
          <parameter type="GMountOperationResult" name="result" />
        </parameters>
      </signal>
      <signal name="Aborted" cname="aborted" when="LAST" field_name="aborted">
        <return-type type="void" />
        <parameters />
      </signal>
      <signal name="ShowProcesses" cname="show-processes" when="LAST" field_name="show_processes">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="message" />
          <parameter type="GArray*" name="processes" />
          <parameter type="const-gchar*" array="true" name="choices" />
        </parameters>
      </signal>
      <property name="Username" cname="username" type="gchar*" readable="true" writeable="true" />
      <property name="Password" cname="password" type="gchar*" readable="true" writeable="true" />
      <property name="Anonymous" cname="anonymous" type="gboolean" readable="true" writeable="true" />
      <property name="Domain" cname="domain" type="gchar*" readable="true" writeable="true" />
      <property name="PasswordSave" cname="password-save" type="GPasswordSave" readable="true" writeable="true" />
      <property name="Choice" cname="choice" type="gint" readable="true" writeable="true" />
      <virtual_method name="GReserved1" cname="_g_reserved1" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved2" cname="_g_reserved2" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved3" cname="_g_reserved3" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved4" cname="_g_reserved4" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved5" cname="_g_reserved5" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved6" cname="_g_reserved6" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved7" cname="_g_reserved7" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved8" cname="_g_reserved8" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved9" cname="_g_reserved9" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved10" cname="_g_reserved10" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <method name="GetAnonymous" cname="g_mount_operation_get_anonymous">
        <return-type type="gboolean" />
      </method>
      <method name="GetChoice" cname="g_mount_operation_get_choice">
        <return-type type="int" />
      </method>
      <method name="GetDomain" cname="g_mount_operation_get_domain">
        <return-type type="const-char*" />
      </method>
      <method name="GetPassword" cname="g_mount_operation_get_password">
        <return-type type="const-char*" />
      </method>
      <method name="GetPasswordSave" cname="g_mount_operation_get_password_save">
        <return-type type="GPasswordSave" />
      </method>
      <method name="GetType" cname="g_mount_operation_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="GetUsername" cname="g_mount_operation_get_username">
        <return-type type="const-char*" />
      </method>
      <constructor cname="g_mount_operation_new" />
      <method name="Reply" cname="g_mount_operation_reply">
        <return-type type="void" />
        <parameters>
          <parameter type="GMountOperationResult" name="result" />
        </parameters>
      </method>
      <method name="SetAnonymous" cname="g_mount_operation_set_anonymous">
        <return-type type="void" />
        <parameters>
          <parameter type="gboolean" name="anonymous" />
        </parameters>
      </method>
      <method name="SetChoice" cname="g_mount_operation_set_choice">
        <return-type type="void" />
        <parameters>
          <parameter type="int" name="choice" />
        </parameters>
      </method>
      <method name="SetDomain" cname="g_mount_operation_set_domain">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="domain" />
        </parameters>
      </method>
      <method name="SetPassword" cname="g_mount_operation_set_password">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="password" />
        </parameters>
      </method>
      <method name="SetPasswordSave" cname="g_mount_operation_set_password_save">
        <return-type type="void" />
        <parameters>
          <parameter type="GPasswordSave" name="save" />
        </parameters>
      </method>
      <method name="SetUsername" cname="g_mount_operation_set_username">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="username" />
        </parameters>
      </method>
    </object>
    <object name="NativeVolumeMonitor" cname="GNativeVolumeMonitor" parent="GVolumeMonitor">
      <class_struct cname="GNativeVolumeMonitorClass">
        <field name="ParentClass" cname="parent_class" type="GVolumeMonitorClass" />
        <method vm="get_mount_for_mount_path" />
      </class_struct>
      <virtual_method name="GetMountForMountPath" cname="get_mount_for_mount_path" shared="true">
        <return-type type="GMount*" />
        <parameters>
          <parameter type="const-char*" name="mount_path" />
          <parameter type="GCancellable*" name="cancellable" />
        </parameters>
      </virtual_method>
      <method name="GetType" cname="g_native_volume_monitor_get_type" shared="true">
        <return-type type="GType" />
      </method>
    </object>
    <object name="NetworkAddress" cname="GNetworkAddress" parent="GObject">
      <class_struct cname="GNetworkAddressClass">
        <field name="ParentClass" cname="parent_class" type="GObjectClass" />
      </class_struct>
      <field name="Priv" cname="priv" type="GNetworkAddressPrivate*" />
      <property name="Hostname" cname="hostname" type="gchar*" readable="true" writeable="true" construct-only="true" />
      <property name="Port" cname="port" type="guint" readable="true" writeable="true" construct-only="true" />
      <property name="Scheme" cname="scheme" type="gchar*" readable="true" writeable="true" construct-only="true" />
      <implements>
        <interface cname="GSocketConnectable" />
      </implements>
      <method name="GetHostname" cname="g_network_address_get_hostname">
        <return-type type="const-gchar*" />
      </method>
      <method name="GetPort" cname="g_network_address_get_port">
        <return-type type="guint16" />
      </method>
      <method name="GetScheme" cname="g_network_address_get_scheme">
        <return-type type="const-gchar*" />
      </method>
      <method name="GetType" cname="g_network_address_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="g_network_address_new">
        <parameters>
          <parameter type="const-gchar*" name="hostname" />
          <parameter type="guint16" name="port" />
        </parameters>
      </constructor>
      <method name="Parse" cname="g_network_address_parse" shared="true">
        <return-type type="GSocketConnectable*" />
        <parameters>
          <parameter type="const-gchar*" name="host_and_port" />
          <parameter type="guint16" name="default_port" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="ParseUri" cname="g_network_address_parse_uri" shared="true">
        <return-type type="GSocketConnectable*" />
        <parameters>
          <parameter type="const-gchar*" name="uri" />
          <parameter type="guint16" name="default_port" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
    </object>
    <object name="NetworkService" cname="GNetworkService" parent="GObject">
      <class_struct cname="GNetworkServiceClass">
        <field name="ParentClass" cname="parent_class" type="GObjectClass" />
      </class_struct>
      <field name="Priv" cname="priv" type="GNetworkServicePrivate*" />
      <property name="Service" cname="service" type="gchar*" readable="true" writeable="true" construct-only="true" />
      <property name="Protocol" cname="protocol" type="gchar*" readable="true" writeable="true" construct-only="true" />
      <property name="Domain" cname="domain" type="gchar*" readable="true" writeable="true" construct-only="true" />
      <property name="Scheme" cname="scheme" type="gchar*" readable="true" writeable="true" />
      <implements>
        <interface cname="GSocketConnectable" />
      </implements>
      <method name="GetDomain" cname="g_network_service_get_domain">
        <return-type type="const-gchar*" />
      </method>
      <method name="GetProtocol" cname="g_network_service_get_protocol">
        <return-type type="const-gchar*" />
      </method>
      <method name="GetScheme" cname="g_network_service_get_scheme">
        <return-type type="const-gchar*" />
      </method>
      <method name="GetService" cname="g_network_service_get_service">
        <return-type type="const-gchar*" />
      </method>
      <method name="GetType" cname="g_network_service_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="g_network_service_new">
        <parameters>
          <parameter type="const-gchar*" name="service" />
          <parameter type="const-gchar*" name="protocol" />
          <parameter type="const-gchar*" name="domain" />
        </parameters>
      </constructor>
      <method name="SetScheme" cname="g_network_service_set_scheme">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="scheme" />
        </parameters>
      </method>
    </object>
    <object name="OutputStream" cname="GOutputStream" parent="GObject">
      <class_struct cname="GOutputStreamClass">
        <field name="ParentClass" cname="parent_class" type="GObjectClass" />
        <method vm="write_fn" />
        <method vm="splice" />
        <method vm="flush" />
        <method vm="close_fn" />
        <method vm="write_async" />
        <method vm="write_finish" />
        <method vm="splice_async" />
        <method vm="splice_finish" />
        <method vm="flush_async" />
        <method vm="flush_finish" />
        <method vm="close_async" />
        <method vm="close_finish" />
        <method vm="_g_reserved1" />
        <method vm="_g_reserved2" />
        <method vm="_g_reserved3" />
        <method vm="_g_reserved4" />
        <method vm="_g_reserved5" />
        <method vm="_g_reserved6" />
        <method vm="_g_reserved7" />
        <method vm="_g_reserved8" />
      </class_struct>
      <field name="Priv" cname="priv" type="GOutputStreamPrivate*" />
      <virtual_method name="WriteFn" cname="write_fn">
        <return-type type="gssize" />
        <parameters>
          <parameter type="const-void*" name="buffer" />
          <parameter type="gsize" name="count" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="Splice" cname="splice">
        <return-type type="gssize" />
        <parameters>
          <parameter type="GInputStream*" name="source" />
          <parameter type="GOutputStreamSpliceFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="Flush" cname="flush">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="CloseFn" cname="close_fn">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="WriteAsync" cname="write_async">
        <return-type type="void" />
        <parameters>
          <parameter type="const-void*" name="buffer" />
          <parameter type="gsize" name="count" />
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="WriteFinish" cname="write_finish">
        <return-type type="gssize" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="SpliceAsync" cname="splice_async">
        <return-type type="void" />
        <parameters>
          <parameter type="GInputStream*" name="source" />
          <parameter type="GOutputStreamSpliceFlags" name="flags" />
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="SpliceFinish" cname="splice_finish">
        <return-type type="gssize" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="FlushAsync" cname="flush_async">
        <return-type type="void" />
        <parameters>
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="FlushFinish" cname="flush_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="CloseAsync" cname="close_async">
        <return-type type="void" />
        <parameters>
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="CloseFinish" cname="close_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="GReserved1" cname="_g_reserved1" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved2" cname="_g_reserved2" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved3" cname="_g_reserved3" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved4" cname="_g_reserved4" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved5" cname="_g_reserved5" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved6" cname="_g_reserved6" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved7" cname="_g_reserved7" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved8" cname="_g_reserved8" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <method name="ClearPending" cname="g_output_stream_clear_pending">
        <return-type type="void" />
      </method>
      <method name="Close" cname="g_output_stream_close">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="CloseAsync" cname="g_output_stream_close_async">
        <return-type type="void" />
        <parameters>
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="CloseFinish" cname="g_output_stream_close_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="Flush" cname="g_output_stream_flush">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="FlushAsync" cname="g_output_stream_flush_async">
        <return-type type="void" />
        <parameters>
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="FlushFinish" cname="g_output_stream_flush_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="GetType" cname="g_output_stream_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="HasPending" cname="g_output_stream_has_pending">
        <return-type type="gboolean" />
      </method>
      <method name="IsClosed" cname="g_output_stream_is_closed">
        <return-type type="gboolean" />
      </method>
      <method name="IsClosing" cname="g_output_stream_is_closing">
        <return-type type="gboolean" />
      </method>
      <method name="SetPending" cname="g_output_stream_set_pending">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="Splice" cname="g_output_stream_splice">
        <return-type type="gssize" />
        <parameters>
          <parameter type="GInputStream*" name="source" />
          <parameter type="GOutputStreamSpliceFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="SpliceAsync" cname="g_output_stream_splice_async">
        <return-type type="void" />
        <parameters>
          <parameter type="GInputStream*" name="source" />
          <parameter type="GOutputStreamSpliceFlags" name="flags" />
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="SpliceFinish" cname="g_output_stream_splice_finish">
        <return-type type="gssize" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="Write" cname="g_output_stream_write">
        <return-type type="gssize" />
        <parameters>
          <parameter type="const-void*" name="buffer" />
          <parameter type="gsize" name="count" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="WriteAll" cname="g_output_stream_write_all">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-void*" name="buffer" />
          <parameter type="gsize" name="count" />
          <parameter type="gsize*" name="bytes_written" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="WriteAsync" cname="g_output_stream_write_async">
        <return-type type="void" />
        <parameters>
          <parameter type="const-void*" name="buffer" />
          <parameter type="gsize" name="count" />
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="WriteFinish" cname="g_output_stream_write_finish">
        <return-type type="gssize" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
    </object>
    <object name="Permission" cname="GPermission" parent="GObject">
      <class_struct cname="GPermissionClass">
        <field name="ParentClass" cname="parent_class" type="GObjectClass" />
        <method vm="acquire" />
        <method vm="acquire_async" />
        <method vm="acquire_finish" />
        <method vm="release" />
        <method vm="release_async" />
        <method vm="release_finish" />
        <field name="Reserved" cname="reserved" type="gpointer" array_len="16" />
      </class_struct>
      <field name="Priv" cname="priv" type="GPermissionPrivate*" />
      <property name="Allowed" cname="allowed" type="gboolean" readable="true" />
      <property name="CanAcquire" cname="can-acquire" type="gboolean" readable="true" />
      <property name="CanRelease" cname="can-release" type="gboolean" readable="true" />
      <virtual_method name="Acquire" cname="acquire">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="AcquireAsync" cname="acquire_async">
        <return-type type="void" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="AcquireFinish" cname="acquire_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="Release" cname="release">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="ReleaseAsync" cname="release_async">
        <return-type type="void" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="ReleaseFinish" cname="release_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <method name="Acquire" cname="g_permission_acquire">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="AcquireAsync" cname="g_permission_acquire_async">
        <return-type type="void" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="AcquireFinish" cname="g_permission_acquire_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="GetAllowed" cname="g_permission_get_allowed">
        <return-type type="gboolean" />
      </method>
      <method name="GetCanAcquire" cname="g_permission_get_can_acquire">
        <return-type type="gboolean" />
      </method>
      <method name="GetCanRelease" cname="g_permission_get_can_release">
        <return-type type="gboolean" />
      </method>
      <method name="GetType" cname="g_permission_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="ImplUpdate" cname="g_permission_impl_update">
        <return-type type="void" />
        <parameters>
          <parameter type="gboolean" name="allowed" />
          <parameter type="gboolean" name="can_acquire" />
          <parameter type="gboolean" name="can_release" />
        </parameters>
      </method>
      <method name="Release" cname="g_permission_release">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="ReleaseAsync" cname="g_permission_release_async">
        <return-type type="void" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="ReleaseFinish" cname="g_permission_release_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
    </object>
    <object name="ProxyAddress" cname="GProxyAddress" parent="GInetSocketAddress">
      <class_struct cname="GProxyAddressClass">
        <field name="ParentClass" cname="parent_class" type="GInetSocketAddressClass" />
      </class_struct>
      <field name="Priv" cname="priv" type="GProxyAddressPrivate*" />
      <property name="Protocol" cname="protocol" type="gchar*" readable="true" writeable="true" construct-only="true" />
      <property name="Username" cname="username" type="gchar*" readable="true" writeable="true" construct-only="true" />
      <property name="Password" cname="password" type="gchar*" readable="true" writeable="true" construct-only="true" />
      <property name="DestinationHostname" cname="destination-hostname" type="gchar*" readable="true" writeable="true" construct-only="true" />
      <property name="DestinationPort" cname="destination-port" type="guint" readable="true" writeable="true" construct-only="true" />
      <method name="GetDestinationHostname" cname="g_proxy_address_get_destination_hostname">
        <return-type type="const-gchar*" />
      </method>
      <method name="GetDestinationPort" cname="g_proxy_address_get_destination_port">
        <return-type type="guint16" />
      </method>
      <method name="GetPassword" cname="g_proxy_address_get_password">
        <return-type type="const-gchar*" />
      </method>
      <method name="GetProtocol" cname="g_proxy_address_get_protocol">
        <return-type type="const-gchar*" />
      </method>
      <method name="GetType" cname="g_proxy_address_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="GetUsername" cname="g_proxy_address_get_username">
        <return-type type="const-gchar*" />
      </method>
      <constructor cname="g_proxy_address_new">
        <parameters>
          <parameter type="GInetAddress*" name="inetaddr" />
          <parameter type="guint16" name="port" />
          <parameter type="const-gchar*" name="protocol" />
          <parameter type="const-gchar*" name="dest_hostname" />
          <parameter type="guint16" name="dest_port" />
          <parameter type="const-gchar*" name="username" />
          <parameter type="const-gchar*" name="password" />
        </parameters>
      </constructor>
    </object>
    <object name="ProxyAddressEnumerator" cname="GProxyAddressEnumerator" parent="GSocketAddressEnumerator">
      <class_struct cname="GProxyAddressEnumeratorClass">
        <field name="ParentClass" cname="parent_class" type="GSocketAddressEnumeratorClass" />
        <method vm="_g_reserved1" />
        <method vm="_g_reserved2" />
        <method vm="_g_reserved3" />
        <method vm="_g_reserved4" />
        <method vm="_g_reserved5" />
        <method vm="_g_reserved6" />
        <method vm="_g_reserved7" />
      </class_struct>
      <field name="Priv" cname="priv" type="GProxyAddressEnumeratorPrivate*" />
      <property name="Uri" cname="uri" type="gchar*" readable="true" writeable="true" construct-only="true" />
      <property name="Connectable" cname="connectable" type="GSocketConnectable" readable="true" writeable="true" construct-only="true" />
      <virtual_method name="GReserved1" cname="_g_reserved1" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved2" cname="_g_reserved2" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved3" cname="_g_reserved3" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved4" cname="_g_reserved4" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved5" cname="_g_reserved5" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved6" cname="_g_reserved6" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved7" cname="_g_reserved7" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <method name="GetType" cname="g_proxy_address_enumerator_get_type" shared="true">
        <return-type type="GType" />
      </method>
    </object>
    <object name="Resolver" cname="GResolver" parent="GObject">
      <class_struct cname="GResolverClass">
        <field name="ParentClass" cname="parent_class" type="GObjectClass" />
        <method signal_vm="reload" />
        <method vm="lookup_by_name" />
        <method vm="lookup_by_name_async" />
        <method vm="lookup_by_name_finish" />
        <method vm="lookup_by_address" />
        <method vm="lookup_by_address_async" />
        <method vm="lookup_by_address_finish" />
        <method vm="lookup_service" />
        <method vm="lookup_service_async" />
        <method vm="lookup_service_finish" />
        <method vm="_g_reserved1" />
        <method vm="_g_reserved2" />
        <method vm="_g_reserved3" />
        <method vm="_g_reserved4" />
        <method vm="_g_reserved5" />
        <method vm="_g_reserved6" />
      </class_struct>
      <field name="Priv" cname="priv" type="GResolverPrivate*" />
      <signal name="Reload" cname="reload" when="LAST" field_name="reload">
        <return-type type="void" />
        <parameters />
      </signal>
      <virtual_method name="LookupByName" cname="lookup_by_name">
        <return-type type="GList*" />
        <parameters>
          <parameter type="const-gchar*" name="hostname" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="LookupByNameAsync" cname="lookup_by_name_async">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="hostname" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="LookupByNameFinish" cname="lookup_by_name_finish">
        <return-type type="GList*" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="LookupByAddress" cname="lookup_by_address">
        <return-type type="gchar*" />
        <parameters>
          <parameter type="GInetAddress*" name="address" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="LookupByAddressAsync" cname="lookup_by_address_async">
        <return-type type="void" />
        <parameters>
          <parameter type="GInetAddress*" name="address" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="LookupByAddressFinish" cname="lookup_by_address_finish">
        <return-type type="gchar*" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="LookupService" cname="lookup_service">
        <return-type type="GList*" />
        <parameters>
          <parameter type="const-gchar*" name="rrname" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="LookupServiceAsync" cname="lookup_service_async">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="rrname" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="LookupServiceFinish" cname="lookup_service_finish">
        <return-type type="GList*" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="GReserved1" cname="_g_reserved1" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved2" cname="_g_reserved2" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved3" cname="_g_reserved3" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved4" cname="_g_reserved4" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved5" cname="_g_reserved5" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved6" cname="_g_reserved6" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <method name="ErrorQuark" cname="g_resolver_error_quark" shared="true">
        <return-type type="GQuark" />
      </method>
      <method name="FreeAddresses" cname="g_resolver_free_addresses" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="GList*" name="addresses" />
        </parameters>
      </method>
      <method name="FreeTargets" cname="g_resolver_free_targets" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="GList*" name="targets" />
        </parameters>
      </method>
      <method name="GetDefault" cname="g_resolver_get_default" shared="true">
        <return-type type="GResolver*" />
      </method>
      <method name="GetType" cname="g_resolver_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="LookupByAddress" cname="g_resolver_lookup_by_address">
        <return-type type="gchar*" />
        <parameters>
          <parameter type="GInetAddress*" name="address" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="LookupByAddressAsync" cname="g_resolver_lookup_by_address_async">
        <return-type type="void" />
        <parameters>
          <parameter type="GInetAddress*" name="address" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="LookupByAddressFinish" cname="g_resolver_lookup_by_address_finish">
        <return-type type="gchar*" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="LookupByName" cname="g_resolver_lookup_by_name">
        <return-type type="GList*" />
        <parameters>
          <parameter type="const-gchar*" name="hostname" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="LookupByNameAsync" cname="g_resolver_lookup_by_name_async">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="hostname" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="LookupByNameFinish" cname="g_resolver_lookup_by_name_finish">
        <return-type type="GList*" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="LookupService" cname="g_resolver_lookup_service">
        <return-type type="GList*" />
        <parameters>
          <parameter type="const-gchar*" name="service" />
          <parameter type="const-gchar*" name="protocol" />
          <parameter type="const-gchar*" name="domain" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="LookupServiceAsync" cname="g_resolver_lookup_service_async">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="service" />
          <parameter type="const-gchar*" name="protocol" />
          <parameter type="const-gchar*" name="domain" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="LookupServiceFinish" cname="g_resolver_lookup_service_finish">
        <return-type type="GList*" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="SetDefault" cname="g_resolver_set_default">
        <return-type type="void" />
      </method>
    </object>
    <object name="Settings" cname="GSettings" parent="GObject">
      <class_struct cname="GSettingsClass">
        <field name="ParentClass" cname="parent_class" type="GObjectClass" />
        <method signal_vm="writable_changed" />
        <method signal_vm="changed" />
        <method signal_vm="writable_change_event" />
        <method signal_vm="change_event" />
        <field name="Padding" cname="padding" type="gpointer" array_len="20" />
      </class_struct>
      <field name="Priv" cname="priv" type="GSettingsPrivate*" />
      <signal name="Changed" cname="changed" when="LAST" field_name="changed">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="key" />
        </parameters>
      </signal>
      <signal name="ChangeEvent" cname="change-event" when="LAST" manual="true" field_name="change_event">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-GQuark*" name="keys" />
          <parameter type="gint" name="n_keys" />
        </parameters>
      </signal>
      <signal name="WritableChanged" cname="writable-changed" when="LAST" field_name="writable_changed">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="key" />
        </parameters>
      </signal>
      <signal name="WritableChangeEvent" cname="writable-change-event" when="LAST" field_name="writable_change_event">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GQuark" name="key" />
        </parameters>
      </signal>
      <property name="Backend" cname="backend" type="GSettingsBackend" readable="true" writeable="true" construct-only="true" />
      <property name="Schema" cname="schema" type="gchar*" readable="true" writeable="true" construct-only="true" />
      <property name="Path" cname="path" type="gchar*" readable="true" writeable="true" construct-only="true" />
      <property name="HasUnapplied" cname="has-unapplied" type="gboolean" readable="true" />
      <property name="DelayApply" cname="delay-apply" type="gboolean" readable="true" />
      <method name="Apply" cname="g_settings_apply">
        <return-type type="void" />
      </method>
      <method name="Bind" cname="g_settings_bind">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="key" />
          <parameter type="gpointer" name="object" />
          <parameter type="const-gchar*" name="property" />
          <parameter type="GSettingsBindFlags" name="flags" />
        </parameters>
      </method>
      <method name="BindWithMapping" cname="g_settings_bind_with_mapping">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="key" />
          <parameter type="gpointer" name="object" />
          <parameter type="const-gchar*" name="property" />
          <parameter type="GSettingsBindFlags" name="flags" />
          <parameter type="GSettingsBindGetMapping" name="get_mapping" />
          <parameter type="GSettingsBindSetMapping" name="set_mapping" />
          <parameter type="gpointer" name="user_data" />
          <parameter type="GDestroyNotify" name="destroy" />
        </parameters>
      </method>
      <method name="BindWritable" cname="g_settings_bind_writable">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="key" />
          <parameter type="gpointer" name="object" />
          <parameter type="const-gchar*" name="property" />
          <parameter type="gboolean" name="inverted" />
        </parameters>
      </method>
      <method name="Delay" cname="g_settings_delay">
        <return-type type="void" />
      </method>
      <method name="Get" cname="g_settings_get">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="key" />
          <parameter type="const-gchar*" name="format" />
          <parameter ellipsis="true" />
        </parameters>
      </method>
      <method name="GetBoolean" cname="g_settings_get_boolean">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-gchar*" name="key" />
        </parameters>
      </method>
      <method name="GetChild" cname="g_settings_get_child">
        <return-type type="GSettings*" />
        <parameters>
          <parameter type="const-gchar*" name="name" />
        </parameters>
      </method>
      <method name="GetDouble" cname="g_settings_get_double">
        <return-type type="gdouble" />
        <parameters>
          <parameter type="const-gchar*" name="key" />
        </parameters>
      </method>
      <method name="GetEnum" cname="g_settings_get_enum">
        <return-type type="gint" />
        <parameters>
          <parameter type="const-gchar*" name="key" />
        </parameters>
      </method>
      <method name="GetFlags" cname="g_settings_get_flags">
        <return-type type="guint" />
        <parameters>
          <parameter type="const-gchar*" name="key" />
        </parameters>
      </method>
      <method name="GetHasUnapplied" cname="g_settings_get_has_unapplied">
        <return-type type="gboolean" />
      </method>
      <method name="GetInt" cname="g_settings_get_int">
        <return-type type="gint" />
        <parameters>
          <parameter type="const-gchar*" name="key" />
        </parameters>
      </method>
      <method name="GetMapped" cname="g_settings_get_mapped">
        <return-type type="gpointer" />
        <parameters>
          <parameter type="const-gchar*" name="key" />
          <parameter type="GSettingsGetMapping" name="mapping" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="GetMapping" cname="g_settings_get_mapping" shared="true">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GValue*" name="value" />
          <parameter type="GVariant*" name="variant" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="GetRange" cname="g_settings_get_range">
        <return-type type="GVariant*" />
        <parameters>
          <parameter type="const-gchar*" name="key" />
        </parameters>
      </method>
      <method name="GetString" cname="g_settings_get_string">
        <return-type type="gchar*" />
        <parameters>
          <parameter type="const-gchar*" name="key" />
        </parameters>
      </method>
      <method name="GetStrv" cname="g_settings_get_strv">
        <return-type type="gchar**" />
        <parameters>
          <parameter type="const-gchar*" name="key" />
        </parameters>
      </method>
      <method name="GetType" cname="g_settings_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="GetValue" cname="g_settings_get_value">
        <return-type type="GVariant*" />
        <parameters>
          <parameter type="const-gchar*" name="key" />
        </parameters>
      </method>
      <method name="IsWritable" cname="g_settings_is_writable">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-gchar*" name="name" />
        </parameters>
      </method>
      <method name="ListChildren" cname="g_settings_list_children">
        <return-type type="gchar**" />
      </method>
      <method name="ListKeys" cname="g_settings_list_keys">
        <return-type type="gchar**" />
      </method>
      <method name="ListRelocatableSchemas" cname="g_settings_list_relocatable_schemas" shared="true">
        <return-type type="const-gchar**" />
      </method>
      <method name="ListSchemas" cname="g_settings_list_schemas" shared="true">
        <return-type type="const-gchar**" />
      </method>
      <method name="MappingIsCompatible" cname="g_settings_mapping_is_compatible" shared="true">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GType" name="gvalue_type" />
          <parameter type="const-GVariantType*" name="variant_type" />
        </parameters>
      </method>
      <constructor cname="g_settings_new">
        <parameters>
          <parameter type="const-gchar*" name="schema" />
        </parameters>
      </constructor>
      <constructor cname="g_settings_new_with_backend">
        <parameters>
          <parameter type="const-gchar*" name="schema" />
          <parameter type="GSettingsBackend*" name="backend" />
        </parameters>
      </constructor>
      <constructor cname="g_settings_new_with_backend_and_path">
        <parameters>
          <parameter type="const-gchar*" name="schema" />
          <parameter type="GSettingsBackend*" name="backend" />
          <parameter type="const-gchar*" name="path" />
        </parameters>
      </constructor>
      <constructor cname="g_settings_new_with_path">
        <parameters>
          <parameter type="const-gchar*" name="schema" />
          <parameter type="const-gchar*" name="path" />
        </parameters>
      </constructor>
      <method name="RangeCheck" cname="g_settings_range_check">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-gchar*" name="key" />
          <parameter type="GVariant*" name="value" />
        </parameters>
      </method>
      <method name="Reset" cname="g_settings_reset">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="key" />
        </parameters>
      </method>
      <method name="Revert" cname="g_settings_revert">
        <return-type type="void" />
      </method>
      <method name="Set" cname="g_settings_set">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-gchar*" name="key" />
          <parameter type="const-gchar*" name="format" />
          <parameter ellipsis="true" />
        </parameters>
      </method>
      <method name="SetBoolean" cname="g_settings_set_boolean">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-gchar*" name="key" />
          <parameter type="gboolean" name="value" />
        </parameters>
      </method>
      <method name="SetDouble" cname="g_settings_set_double">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-gchar*" name="key" />
          <parameter type="gdouble" name="value" />
        </parameters>
      </method>
      <method name="SetEnum" cname="g_settings_set_enum">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-gchar*" name="key" />
          <parameter type="gint" name="value" />
        </parameters>
      </method>
      <method name="SetFlags" cname="g_settings_set_flags">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-gchar*" name="key" />
          <parameter type="guint" name="value" />
        </parameters>
      </method>
      <method name="SetInt" cname="g_settings_set_int">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-gchar*" name="key" />
          <parameter type="gint" name="value" />
        </parameters>
      </method>
      <method name="SetMapping" cname="g_settings_set_mapping" shared="true">
        <return-type type="GVariant*" />
        <parameters>
          <parameter type="const-GValue*" name="value" />
          <parameter type="const-GVariantType*" name="expected_type" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="SetString" cname="g_settings_set_string">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-gchar*" name="key" />
          <parameter type="const-gchar*" name="value" />
        </parameters>
      </method>
      <method name="SetStrv" cname="g_settings_set_strv">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-gchar*" name="key" />
          <parameter type="const-gchar*" name="value" />
        </parameters>
      </method>
      <method name="SetValue" cname="g_settings_set_value">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-gchar*" name="key" />
          <parameter type="GVariant*" name="value" />
        </parameters>
      </method>
      <method name="Sync" cname="g_settings_sync" shared="true">
        <return-type type="void" />
      </method>
      <method name="Unbind" cname="g_settings_unbind" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="gpointer" name="object" />
          <parameter type="const-gchar*" name="property" />
        </parameters>
      </method>
    </object>
    <object name="SettingsSchema" cname="GSettingsSchema" parent="GObject">
      <class_struct cname="GSettingsSchemaClass">
        <field name="ParentClass" cname="parent_class" type="GObjectClass" />
      </class_struct>
      <field name="Priv" cname="priv" type="GSettingsSchemaPrivate*" />
      <method name="GetGettextDomain" cname="g_settings_schema_get_gettext_domain">
        <return-type type="const-gchar*" />
      </method>
      <method name="GetPath" cname="g_settings_schema_get_path">
        <return-type type="const-gchar*" />
      </method>
      <method name="GetString" cname="g_settings_schema_get_string">
        <return-type type="const-gchar*" />
        <parameters>
          <parameter type="const-gchar*" name="key" />
        </parameters>
      </method>
      <method name="GetType" cname="g_settings_schema_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="GetValue" cname="g_settings_schema_get_value">
        <return-type type="GVariantIter*" />
        <parameters>
          <parameter type="const-gchar*" name="key" />
        </parameters>
      </method>
      <method name="HasKey" cname="g_settings_schema_has_key">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-gchar*" name="key" />
        </parameters>
      </method>
      <method name="List" cname="g_settings_schema_list">
        <return-type type="const-GQuark*" />
        <parameters>
          <parameter type="gint*" name="n_items" />
        </parameters>
      </method>
      <constructor cname="g_settings_schema_new">
        <parameters>
          <parameter type="const-gchar*" name="name" />
        </parameters>
      </constructor>
    </object>
    <object name="SimpleAction" cname="GSimpleAction" parent="GObject">
      <class_struct cname="GSimpleActionClass">
        <field name="ParentClass" cname="parent_class" type="GObjectClass" />
        <method signal_vm="activate" />
        <field name="Padding" cname="padding" type="gpointer" array_len="6" />
      </class_struct>
      <field name="Priv" cname="priv" type="GSimpleActionPrivate*" />
      <signal name="Activate" cname="activate" when="LAST" field_name="activate">
        <return-type type="void" />
        <parameters>
          <parameter type="GVariant*" name="parameter" />
        </parameters>
      </signal>
      <property name="Name" cname="name" type="gchar*" readable="true" writeable="true" construct-only="true" />
      <property name="ParameterType" cname="parameter-type" type="GVariantType" readable="true" writeable="true" construct-only="true" />
      <property name="Enabled" cname="enabled" type="gboolean" readable="true" writeable="true" construct="true" />
      <property name="StateType" cname="state-type" type="GVariantType" readable="true" />
      <property name="State" cname="state" type="variant" readable="true" writeable="true" construct="true" />
      <implements>
        <interface cname="GAction" />
      </implements>
      <method name="GetType" cname="g_simple_action_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="g_simple_action_new">
        <parameters>
          <parameter type="const-gchar*" name="name" />
          <parameter type="const-GVariantType*" name="parameter_type" />
        </parameters>
      </constructor>
      <constructor cname="g_simple_action_new_stateful">
        <parameters>
          <parameter type="const-gchar*" name="name" />
          <parameter type="const-GVariantType*" name="parameter_type" />
          <parameter type="GVariant*" name="state" />
        </parameters>
      </constructor>
      <method name="SetEnabled" cname="g_simple_action_set_enabled">
        <return-type type="void" />
        <parameters>
          <parameter type="gboolean" name="enabled" />
        </parameters>
      </method>
    </object>
    <object name="SimpleActionGroup" cname="GSimpleActionGroup" parent="GObject">
      <class_struct cname="GSimpleActionGroupClass">
        <field name="ParentClass" cname="parent_class" type="GObjectClass" />
        <field name="Padding" cname="padding" type="gpointer" array_len="12" />
      </class_struct>
      <field name="Priv" cname="priv" type="GSimpleActionGroupPrivate*" />
      <implements>
        <interface cname="GActionGroup" />
      </implements>
      <method name="GetType" cname="g_simple_action_group_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="Insert" cname="g_simple_action_group_insert">
        <return-type type="void" />
        <parameters>
          <parameter type="GAction*" name="action" />
        </parameters>
      </method>
      <method name="Lookup" cname="g_simple_action_group_lookup">
        <return-type type="GAction*" />
        <parameters>
          <parameter type="const-gchar*" name="action_name" />
        </parameters>
      </method>
      <constructor cname="g_simple_action_group_new" />
      <method name="Remove" cname="g_simple_action_group_remove">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="action_name" />
        </parameters>
      </method>
    </object>
    <object name="SimpleAsyncResult" cname="GSimpleAsyncResult" parent="GObject">
      <class_struct cname="GSimpleAsyncResultClass">
        <field name="ParentClass" cname="parent_class" type="GObjectClass" />
      </class_struct>
      <implements>
        <interface cname="GAsyncResult" />
      </implements>
      <method name="Complete" cname="g_simple_async_result_complete">
        <return-type type="void" />
      </method>
      <method name="CompleteInIdle" cname="g_simple_async_result_complete_in_idle">
        <return-type type="void" />
      </method>
      <method name="GetOpResGboolean" cname="g_simple_async_result_get_op_res_gboolean">
        <return-type type="gboolean" />
      </method>
      <method name="GetOpResGpointer" cname="g_simple_async_result_get_op_res_gpointer">
        <return-type type="gpointer" />
      </method>
      <method name="GetOpResGssize" cname="g_simple_async_result_get_op_res_gssize">
        <return-type type="gssize" />
      </method>
      <method name="GetSourceTag" cname="g_simple_async_result_get_source_tag">
        <return-type type="gpointer" />
      </method>
      <method name="GetType" cname="g_simple_async_result_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="IsValid" cname="g_simple_async_result_is_valid" shared="true">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GObject*" name="source" />
          <parameter type="gpointer" name="source_tag" />
        </parameters>
      </method>
      <constructor cname="g_simple_async_result_new">
        <parameters>
          <parameter type="GObject*" name="source_object" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
          <parameter type="gpointer" name="source_tag" />
        </parameters>
      </constructor>
      <constructor cname="g_simple_async_result_new_error">
        <parameters>
          <parameter type="GObject*" name="source_object" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
          <parameter type="GQuark" name="domain" />
          <parameter type="gint" name="code" />
          <parameter type="const-char*" name="format" printf_format="true" />
          <parameter ellipsis="true" printf_format_args="true" />
        </parameters>
      </constructor>
      <constructor cname="g_simple_async_result_new_from_error">
        <parameters>
          <parameter type="GObject*" name="source_object" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
          <parameter type="const-GError*" name="error" />
        </parameters>
      </constructor>
      <constructor cname="g_simple_async_result_new_take_error">
        <parameters>
          <parameter type="GObject*" name="source_object" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
          <parameter type="GError*" name="error" />
        </parameters>
      </constructor>
      <method name="PropagateError" cname="g_simple_async_result_propagate_error">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GError**" name="dest" />
        </parameters>
      </method>
      <method name="RunInThread" cname="g_simple_async_result_run_in_thread">
        <return-type type="void" />
        <parameters>
          <parameter type="GSimpleAsyncThreadFunc" name="func" />
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
        </parameters>
      </method>
      <method name="SetError" cname="g_simple_async_result_set_error">
        <return-type type="void" />
        <parameters>
          <parameter type="GQuark" name="domain" />
          <parameter type="gint" name="code" />
          <parameter type="const-char*" name="format" printf_format="true" />
          <parameter ellipsis="true" printf_format_args="true" />
        </parameters>
      </method>
      <method name="SetErrorVa" cname="g_simple_async_result_set_error_va">
        <return-type type="void" />
        <parameters>
          <parameter type="GQuark" name="domain" />
          <parameter type="gint" name="code" />
          <parameter type="const-char*" name="format" />
          <parameter type="va_list" name="args" />
        </parameters>
      </method>
      <method name="SetFromError" cname="g_simple_async_result_set_from_error">
        <return-type type="void" />
        <parameters>
          <parameter type="const-GError*" name="error" />
        </parameters>
      </method>
      <method name="SetHandleCancellation" cname="g_simple_async_result_set_handle_cancellation">
        <return-type type="void" />
        <parameters>
          <parameter type="gboolean" name="handle_cancellation" />
        </parameters>
      </method>
      <method name="SetOpResGboolean" cname="g_simple_async_result_set_op_res_gboolean">
        <return-type type="void" />
        <parameters>
          <parameter type="gboolean" name="op_res" />
        </parameters>
      </method>
      <method name="SetOpResGpointer" cname="g_simple_async_result_set_op_res_gpointer">
        <return-type type="void" />
        <parameters>
          <parameter type="gpointer" name="op_res" />
          <parameter type="GDestroyNotify" name="destroy_op_res" />
        </parameters>
      </method>
      <method name="SetOpResGssize" cname="g_simple_async_result_set_op_res_gssize">
        <return-type type="void" />
        <parameters>
          <parameter type="gssize" name="op_res" />
        </parameters>
      </method>
      <method name="TakeError" cname="g_simple_async_result_take_error">
        <return-type type="void" />
        <parameters>
          <parameter type="GError*" name="error" />
        </parameters>
      </method>
    </object>
    <object name="SimplePermission" cname="GSimplePermission" parent="GPermission">
      <method name="GetType" cname="g_simple_permission_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="g_simple_permission_new">
        <parameters>
          <parameter type="gboolean" name="allowed" />
        </parameters>
      </constructor>
    </object>
    <object name="Socket" cname="GSocket" parent="GObject">
      <class_struct cname="GSocketClass">
        <field name="ParentClass" cname="parent_class" type="GObjectClass" />
        <method vm="_g_reserved1" />
        <method vm="_g_reserved2" />
        <method vm="_g_reserved3" />
        <method vm="_g_reserved4" />
        <method vm="_g_reserved5" />
        <method vm="_g_reserved6" />
        <method vm="_g_reserved7" />
        <method vm="_g_reserved8" />
        <method vm="_g_reserved9" />
        <method vm="_g_reserved10" />
      </class_struct>
      <field name="Priv" cname="priv" type="GSocketPrivate*" />
      <property name="Family" cname="family" type="GSocketFamily" readable="true" writeable="true" construct-only="true" />
      <property name="Type" cname="type" type="GSocketType" readable="true" writeable="true" construct-only="true" />
      <property name="Protocol" cname="protocol" type="GSocketProtocol" readable="true" writeable="true" construct-only="true" />
      <property name="Fd" cname="fd" type="gint" readable="true" writeable="true" construct-only="true" />
      <property name="Blocking" cname="blocking" type="gboolean" readable="true" writeable="true" />
      <property name="ListenBacklog" cname="listen-backlog" type="gint" readable="true" writeable="true" />
      <property name="Keepalive" cname="keepalive" type="gboolean" readable="true" writeable="true" />
      <property name="LocalAddress" cname="local-address" type="GSocketAddress" readable="true" />
      <property name="RemoteAddress" cname="remote-address" type="GSocketAddress" readable="true" />
      <property name="Timeout" cname="timeout" type="guint" readable="true" writeable="true" />
      <virtual_method name="GReserved1" cname="_g_reserved1" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved2" cname="_g_reserved2" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved3" cname="_g_reserved3" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved4" cname="_g_reserved4" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved5" cname="_g_reserved5" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved6" cname="_g_reserved6" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved7" cname="_g_reserved7" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved8" cname="_g_reserved8" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved9" cname="_g_reserved9" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved10" cname="_g_reserved10" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <implements>
        <interface cname="GInitable" />
      </implements>
      <method name="Accept" cname="g_socket_accept">
        <return-type type="GSocket*" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="Bind" cname="g_socket_bind">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GSocketAddress*" name="address" />
          <parameter type="gboolean" name="allow_reuse" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="CheckConnectResult" cname="g_socket_check_connect_result">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="Close" cname="g_socket_close">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="ConditionCheck" cname="g_socket_condition_check">
        <return-type type="GIOCondition" />
        <parameters>
          <parameter type="GIOCondition" name="condition" />
        </parameters>
      </method>
      <method name="ConditionWait" cname="g_socket_condition_wait">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GIOCondition" name="condition" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="Connect" cname="g_socket_connect">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GSocketAddress*" name="address" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="CreateSource" cname="g_socket_create_source">
        <return-type type="GSource*" />
        <parameters>
          <parameter type="GIOCondition" name="condition" />
          <parameter type="GCancellable*" name="cancellable" />
        </parameters>
      </method>
      <method name="GetBlocking" cname="g_socket_get_blocking">
        <return-type type="gboolean" />
      </method>
      <method name="GetCredentials" cname="g_socket_get_credentials">
        <return-type type="GCredentials*" />
        <parameters>
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="GetFamily" cname="g_socket_get_family">
        <return-type type="GSocketFamily" />
      </method>
      <method name="GetFd" cname="g_socket_get_fd">
        <return-type type="int" />
      </method>
      <method name="GetKeepalive" cname="g_socket_get_keepalive">
        <return-type type="gboolean" />
      </method>
      <method name="GetListenBacklog" cname="g_socket_get_listen_backlog">
        <return-type type="gint" />
      </method>
      <method name="GetLocalAddress" cname="g_socket_get_local_address">
        <return-type type="GSocketAddress*" />
        <parameters>
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="GetProtocol" cname="g_socket_get_protocol">
        <return-type type="GSocketProtocol" />
      </method>
      <method name="GetRemoteAddress" cname="g_socket_get_remote_address">
        <return-type type="GSocketAddress*" />
        <parameters>
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="GetSocketType" cname="g_socket_get_socket_type">
        <return-type type="GSocketType" />
      </method>
      <method name="GetTimeout" cname="g_socket_get_timeout">
        <return-type type="guint" />
      </method>
      <method name="GetType" cname="g_socket_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="IsClosed" cname="g_socket_is_closed">
        <return-type type="gboolean" />
      </method>
      <method name="IsConnected" cname="g_socket_is_connected">
        <return-type type="gboolean" />
      </method>
      <method name="Listen" cname="g_socket_listen">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <constructor cname="g_socket_new">
        <parameters>
          <parameter type="GSocketFamily" name="family" />
          <parameter type="GSocketType" name="type" />
          <parameter type="GSocketProtocol" name="protocol" />
          <parameter type="GError**" name="error" />
        </parameters>
      </constructor>
      <constructor cname="g_socket_new_from_fd">
        <parameters>
          <parameter type="gint" name="fd" />
          <parameter type="GError**" name="error" />
        </parameters>
      </constructor>
      <method name="Receive" cname="g_socket_receive">
        <return-type type="gssize" />
        <parameters>
          <parameter type="gchar*" name="buffer" />
          <parameter type="gsize" name="size" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="ReceiveFrom" cname="g_socket_receive_from">
        <return-type type="gssize" />
        <parameters>
          <parameter type="GSocketAddress**" name="address" />
          <parameter type="gchar*" name="buffer" />
          <parameter type="gsize" name="size" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="ReceiveMessage" cname="g_socket_receive_message">
        <return-type type="gssize" />
        <parameters>
          <parameter type="GSocketAddress**" name="address" />
          <parameter type="GInputVector*" name="vectors" />
          <parameter type="gint" name="num_vectors" />
          <parameter type="GSocketControlMessage***" name="messages" />
          <parameter type="gint*" name="num_messages" />
          <parameter type="gint*" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="ReceiveWithBlocking" cname="g_socket_receive_with_blocking">
        <return-type type="gssize" />
        <parameters>
          <parameter type="gchar*" name="buffer" />
          <parameter type="gsize" name="size" />
          <parameter type="gboolean" name="blocking" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="Send" cname="g_socket_send">
        <return-type type="gssize" />
        <parameters>
          <parameter type="const-gchar*" name="buffer" />
          <parameter type="gsize" name="size" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="SendMessage" cname="g_socket_send_message">
        <return-type type="gssize" />
        <parameters>
          <parameter type="GSocketAddress*" name="address" />
          <parameter type="GOutputVector*" name="vectors" />
          <parameter type="gint" name="num_vectors" />
          <parameter type="GSocketControlMessage**" name="messages" />
          <parameter type="gint" name="num_messages" />
          <parameter type="gint" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="SendTo" cname="g_socket_send_to">
        <return-type type="gssize" />
        <parameters>
          <parameter type="GSocketAddress*" name="address" />
          <parameter type="const-gchar*" name="buffer" />
          <parameter type="gsize" name="size" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="SendWithBlocking" cname="g_socket_send_with_blocking">
        <return-type type="gssize" />
        <parameters>
          <parameter type="const-gchar*" name="buffer" />
          <parameter type="gsize" name="size" />
          <parameter type="gboolean" name="blocking" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="SetBlocking" cname="g_socket_set_blocking">
        <return-type type="void" />
        <parameters>
          <parameter type="gboolean" name="blocking" />
        </parameters>
      </method>
      <method name="SetKeepalive" cname="g_socket_set_keepalive">
        <return-type type="void" />
        <parameters>
          <parameter type="gboolean" name="keepalive" />
        </parameters>
      </method>
      <method name="SetListenBacklog" cname="g_socket_set_listen_backlog">
        <return-type type="void" />
        <parameters>
          <parameter type="gint" name="backlog" />
        </parameters>
      </method>
      <method name="SetTimeout" cname="g_socket_set_timeout">
        <return-type type="void" />
        <parameters>
          <parameter type="guint" name="timeout" />
        </parameters>
      </method>
      <method name="Shutdown" cname="g_socket_shutdown">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="gboolean" name="shutdown_read" />
          <parameter type="gboolean" name="shutdown_write" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="SpeaksIpv4" cname="g_socket_speaks_ipv4">
        <return-type type="gboolean" />
      </method>
    </object>
    <object name="SocketAddress" cname="GSocketAddress" parent="GObject">
      <class_struct cname="GSocketAddressClass">
        <field name="ParentClass" cname="parent_class" type="GObjectClass" />
        <method vm="get_family" />
        <method vm="get_native_size" />
        <method vm="to_native" />
      </class_struct>
      <property name="Family" cname="family" type="GSocketFamily" readable="true" />
      <virtual_method name="GetFamily" cname="get_family">
        <return-type type="GSocketFamily" />
        <parameters />
      </virtual_method>
      <virtual_method name="GetNativeSize" cname="get_native_size">
        <return-type type="gssize" />
        <parameters />
      </virtual_method>
      <virtual_method name="ToNative" cname="to_native">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="gpointer" name="dest" />
          <parameter type="gsize" name="destlen" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <method name="GetFamily" cname="g_socket_address_get_family">
        <return-type type="GSocketFamily" />
      </method>
      <method name="GetNativeSize" cname="g_socket_address_get_native_size">
        <return-type type="gssize" />
      </method>
      <method name="GetType" cname="g_socket_address_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="g_socket_address_new_from_native">
        <parameters>
          <parameter type="gpointer" name="native" />
          <parameter type="gsize" name="len" />
        </parameters>
      </constructor>
      <method name="ToNative" cname="g_socket_address_to_native">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="gpointer" name="dest" />
          <parameter type="gsize" name="destlen" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
    </object>
    <object name="SocketAddressEnumerator" cname="GSocketAddressEnumerator" parent="GObject">
      <class_struct cname="GSocketAddressEnumeratorClass">
        <field name="ParentClass" cname="parent_class" type="GObjectClass" />
        <method vm="next" />
        <method vm="next_async" />
        <method vm="next_finish" />
      </class_struct>
      <virtual_method name="Next" cname="next">
        <return-type type="GSocketAddress*" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="NextAsync" cname="next_async">
        <return-type type="void" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="NextFinish" cname="next_finish">
        <return-type type="GSocketAddress*" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <method name="GetType" cname="g_socket_address_enumerator_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="Next" cname="g_socket_address_enumerator_next">
        <return-type type="GSocketAddress*" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="NextAsync" cname="g_socket_address_enumerator_next_async">
        <return-type type="void" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="NextFinish" cname="g_socket_address_enumerator_next_finish">
        <return-type type="GSocketAddress*" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
    </object>
    <object name="SocketClient" cname="GSocketClient" parent="GObject">
      <class_struct cname="GSocketClientClass">
        <field name="ParentClass" cname="parent_class" type="GObjectClass" />
        <method vm="_g_reserved1" />
        <method vm="_g_reserved2" />
        <method vm="_g_reserved3" />
        <method vm="_g_reserved4" />
        <method vm="_g_reserved5" />
      </class_struct>
      <field name="Priv" cname="priv" type="GSocketClientPrivate*" />
      <property name="Family" cname="family" type="GSocketFamily" readable="true" writeable="true" construct="true" />
      <property name="Type" cname="type" type="GSocketType" readable="true" writeable="true" construct="true" />
      <property name="Protocol" cname="protocol" type="GSocketProtocol" readable="true" writeable="true" construct="true" />
      <property name="LocalAddress" cname="local-address" type="GSocketAddress" readable="true" writeable="true" construct="true" />
      <property name="Timeout" cname="timeout" type="guint" readable="true" writeable="true" construct="true" />
      <property name="EnableProxy" cname="enable-proxy" type="gboolean" readable="true" writeable="true" construct="true" />
      <property name="Tls" cname="tls" type="gboolean" readable="true" writeable="true" construct="true" />
      <property name="TlsValidationFlags" cname="tls-validation-flags" type="GTlsCertificateFlags" readable="true" writeable="true" construct="true" />
      <virtual_method name="GReserved1" cname="_g_reserved1" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved2" cname="_g_reserved2" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved3" cname="_g_reserved3" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved4" cname="_g_reserved4" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved5" cname="_g_reserved5" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <method name="AddApplicationProxy" cname="g_socket_client_add_application_proxy">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="protocol" />
        </parameters>
      </method>
      <method name="Connect" cname="g_socket_client_connect">
        <return-type type="GSocketConnection*" />
        <parameters>
          <parameter type="GSocketConnectable*" name="connectable" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="ConnectAsync" cname="g_socket_client_connect_async">
        <return-type type="void" />
        <parameters>
          <parameter type="GSocketConnectable*" name="connectable" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="ConnectFinish" cname="g_socket_client_connect_finish">
        <return-type type="GSocketConnection*" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="ConnectToHost" cname="g_socket_client_connect_to_host">
        <return-type type="GSocketConnection*" />
        <parameters>
          <parameter type="const-gchar*" name="host_and_port" />
          <parameter type="guint16" name="default_port" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="ConnectToHostAsync" cname="g_socket_client_connect_to_host_async">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="host_and_port" />
          <parameter type="guint16" name="default_port" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="ConnectToHostFinish" cname="g_socket_client_connect_to_host_finish">
        <return-type type="GSocketConnection*" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="ConnectToService" cname="g_socket_client_connect_to_service">
        <return-type type="GSocketConnection*" />
        <parameters>
          <parameter type="const-gchar*" name="domain" />
          <parameter type="const-gchar*" name="service" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="ConnectToServiceAsync" cname="g_socket_client_connect_to_service_async">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="domain" />
          <parameter type="const-gchar*" name="service" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="ConnectToServiceFinish" cname="g_socket_client_connect_to_service_finish">
        <return-type type="GSocketConnection*" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="ConnectToUri" cname="g_socket_client_connect_to_uri">
        <return-type type="GSocketConnection*" />
        <parameters>
          <parameter type="const-gchar*" name="uri" />
          <parameter type="guint16" name="default_port" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="ConnectToUriAsync" cname="g_socket_client_connect_to_uri_async">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="uri" />
          <parameter type="guint16" name="default_port" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="ConnectToUriFinish" cname="g_socket_client_connect_to_uri_finish">
        <return-type type="GSocketConnection*" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="GetEnableProxy" cname="g_socket_client_get_enable_proxy">
        <return-type type="gboolean" />
      </method>
      <method name="GetFamily" cname="g_socket_client_get_family">
        <return-type type="GSocketFamily" />
      </method>
      <method name="GetLocalAddress" cname="g_socket_client_get_local_address">
        <return-type type="GSocketAddress*" />
      </method>
      <method name="GetProtocol" cname="g_socket_client_get_protocol">
        <return-type type="GSocketProtocol" />
      </method>
      <method name="GetSocketType" cname="g_socket_client_get_socket_type">
        <return-type type="GSocketType" />
      </method>
      <method name="GetTimeout" cname="g_socket_client_get_timeout">
        <return-type type="guint" />
      </method>
      <method name="GetTls" cname="g_socket_client_get_tls">
        <return-type type="gboolean" />
      </method>
      <method name="GetTlsValidationFlags" cname="g_socket_client_get_tls_validation_flags">
        <return-type type="GTlsCertificateFlags" />
      </method>
      <method name="GetType" cname="g_socket_client_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="g_socket_client_new" />
      <method name="SetEnableProxy" cname="g_socket_client_set_enable_proxy">
        <return-type type="void" />
        <parameters>
          <parameter type="gboolean" name="enable" />
        </parameters>
      </method>
      <method name="SetFamily" cname="g_socket_client_set_family">
        <return-type type="void" />
        <parameters>
          <parameter type="GSocketFamily" name="family" />
        </parameters>
      </method>
      <method name="SetLocalAddress" cname="g_socket_client_set_local_address">
        <return-type type="void" />
        <parameters>
          <parameter type="GSocketAddress*" name="address" />
        </parameters>
      </method>
      <method name="SetProtocol" cname="g_socket_client_set_protocol">
        <return-type type="void" />
        <parameters>
          <parameter type="GSocketProtocol" name="protocol" />
        </parameters>
      </method>
      <method name="SetSocketType" cname="g_socket_client_set_socket_type">
        <return-type type="void" />
        <parameters>
          <parameter type="GSocketType" name="type" />
        </parameters>
      </method>
      <method name="SetTimeout" cname="g_socket_client_set_timeout">
        <return-type type="void" />
        <parameters>
          <parameter type="guint" name="timeout" />
        </parameters>
      </method>
      <method name="SetTls" cname="g_socket_client_set_tls">
        <return-type type="void" />
        <parameters>
          <parameter type="gboolean" name="tls" />
        </parameters>
      </method>
      <method name="SetTlsValidationFlags" cname="g_socket_client_set_tls_validation_flags">
        <return-type type="void" />
        <parameters>
          <parameter type="GTlsCertificateFlags" name="flags" />
        </parameters>
      </method>
    </object>
    <object name="SocketConnection" cname="GSocketConnection" parent="GIOStream">
      <class_struct cname="GSocketConnectionClass">
        <field name="ParentClass" cname="parent_class" type="GIOStreamClass" />
        <method vm="_g_reserved1" />
        <method vm="_g_reserved2" />
        <method vm="_g_reserved3" />
        <method vm="_g_reserved4" />
        <method vm="_g_reserved5" />
        <method vm="_g_reserved6" />
      </class_struct>
      <field name="Priv" cname="priv" type="GSocketConnectionPrivate*" />
      <property name="Socket" cname="socket" type="GSocket" readable="true" writeable="true" construct-only="true" />
      <virtual_method name="GReserved1" cname="_g_reserved1" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved2" cname="_g_reserved2" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved3" cname="_g_reserved3" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved4" cname="_g_reserved4" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved5" cname="_g_reserved5" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved6" cname="_g_reserved6" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <method name="FactoryCreateConnection" cname="g_socket_connection_factory_create_connection" shared="true">
        <return-type type="GSocketConnection*" />
        <parameters>
          <parameter type="GSocket*" name="socket" />
        </parameters>
      </method>
      <method name="FactoryLookupType" cname="g_socket_connection_factory_lookup_type" shared="true">
        <return-type type="GType" />
        <parameters>
          <parameter type="GSocketFamily" name="family" />
          <parameter type="GSocketType" name="type" />
          <parameter type="gint" name="protocol_id" />
        </parameters>
      </method>
      <method name="FactoryRegisterType" cname="g_socket_connection_factory_register_type" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="GType" name="g_type" />
          <parameter type="GSocketFamily" name="family" />
          <parameter type="GSocketType" name="type" />
          <parameter type="gint" name="protocol" />
        </parameters>
      </method>
      <method name="GetLocalAddress" cname="g_socket_connection_get_local_address">
        <return-type type="GSocketAddress*" />
        <parameters>
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="GetRemoteAddress" cname="g_socket_connection_get_remote_address">
        <return-type type="GSocketAddress*" />
        <parameters>
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="GetSocket" cname="g_socket_connection_get_socket">
        <return-type type="GSocket*" />
      </method>
      <method name="GetType" cname="g_socket_connection_get_type" shared="true">
        <return-type type="GType" />
      </method>
    </object>
    <object name="SocketControlMessage" cname="GSocketControlMessage" parent="GObject">
      <class_struct cname="GSocketControlMessageClass">
        <field name="ParentClass" cname="parent_class" type="GObjectClass" />
        <method vm="get_size" />
        <method vm="get_level" />
        <method vm="get_type" />
        <method vm="serialize" />
        <method vm="deserialize" />
        <method vm="_g_reserved1" />
        <method vm="_g_reserved2" />
        <method vm="_g_reserved3" />
        <method vm="_g_reserved4" />
        <method vm="_g_reserved5" />
      </class_struct>
      <field name="Priv" cname="priv" type="GSocketControlMessagePrivate*" />
      <virtual_method name="GetSize" cname="get_size">
        <return-type type="gsize" />
        <parameters />
      </virtual_method>
      <virtual_method name="GetLevel" cname="get_level">
        <return-type type="int" />
        <parameters />
      </virtual_method>
      <virtual_method name="GetType" cname="get_type">
        <return-type type="int" />
        <parameters />
      </virtual_method>
      <virtual_method name="Serialize" cname="serialize">
        <return-type type="void" />
        <parameters>
          <parameter type="gpointer" name="data" />
        </parameters>
      </virtual_method>
      <virtual_method name="Deserialize" cname="deserialize" shared="true">
        <return-type type="GSocketControlMessage*" />
        <parameters>
          <parameter type="int" name="level" />
          <parameter type="int" name="type" />
          <parameter type="gsize" name="size" />
          <parameter type="gpointer" name="data" />
        </parameters>
      </virtual_method>
      <virtual_method name="GReserved1" cname="_g_reserved1" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved2" cname="_g_reserved2" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved3" cname="_g_reserved3" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved4" cname="_g_reserved4" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved5" cname="_g_reserved5" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <method name="Deserialize" cname="g_socket_control_message_deserialize" shared="true">
        <return-type type="GSocketControlMessage*" />
        <parameters>
          <parameter type="int" name="level" />
          <parameter type="int" name="type" />
          <parameter type="gsize" name="size" />
          <parameter type="gpointer" name="data" />
        </parameters>
      </method>
      <method name="GetLevel" cname="g_socket_control_message_get_level">
        <return-type type="int" />
      </method>
      <method name="GetMsgType" cname="g_socket_control_message_get_msg_type">
        <return-type type="int" />
      </method>
      <method name="GetSize" cname="g_socket_control_message_get_size">
        <return-type type="gsize" />
      </method>
      <method name="GetType" cname="g_socket_control_message_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="Serialize" cname="g_socket_control_message_serialize">
        <return-type type="void" />
        <parameters>
          <parameter type="gpointer" name="data" />
        </parameters>
      </method>
    </object>
    <object name="SocketInputStream" cname="GSocketInputStream" parent="GInputStream">
      <class_struct cname="GSocketInputStreamClass">
        <field name="ParentClass" cname="parent_class" type="GInputStreamClass" />
      </class_struct>
      <field name="Priv" cname="priv" type="GSocketInputStreamPrivate*" />
      <property name="Socket" cname="socket" type="GSocket" readable="true" writeable="true" construct-only="true" />
      <implements>
        <interface cname="GPollableInputStream" />
      </implements>
    </object>
    <object name="SocketListener" cname="GSocketListener" parent="GObject">
      <class_struct cname="GSocketListenerClass">
        <field name="ParentClass" cname="parent_class" type="GObjectClass" />
        <method vm="changed" />
        <method vm="_g_reserved1" />
        <method vm="_g_reserved2" />
        <method vm="_g_reserved3" />
        <method vm="_g_reserved4" />
        <method vm="_g_reserved5" />
        <method vm="_g_reserved6" />
      </class_struct>
      <field name="Priv" cname="priv" type="GSocketListenerPrivate*" />
      <property name="ListenBacklog" cname="listen-backlog" type="gint" readable="true" writeable="true" construct="true" />
      <virtual_method name="Changed" cname="changed">
        <return-type type="void" />
        <parameters />
      </virtual_method>
      <virtual_method name="GReserved1" cname="_g_reserved1" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved2" cname="_g_reserved2" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved3" cname="_g_reserved3" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved4" cname="_g_reserved4" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved5" cname="_g_reserved5" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved6" cname="_g_reserved6" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <method name="Accept" cname="g_socket_listener_accept">
        <return-type type="GSocketConnection*" />
        <parameters>
          <parameter type="GObject**" name="source_object" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="AcceptAsync" cname="g_socket_listener_accept_async">
        <return-type type="void" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="AcceptFinish" cname="g_socket_listener_accept_finish">
        <return-type type="GSocketConnection*" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GObject**" name="source_object" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="AcceptSocket" cname="g_socket_listener_accept_socket">
        <return-type type="GSocket*" />
        <parameters>
          <parameter type="GObject**" name="source_object" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="AcceptSocketAsync" cname="g_socket_listener_accept_socket_async">
        <return-type type="void" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="AcceptSocketFinish" cname="g_socket_listener_accept_socket_finish">
        <return-type type="GSocket*" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GObject**" name="source_object" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="AddAddress" cname="g_socket_listener_add_address">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GSocketAddress*" name="address" />
          <parameter type="GSocketType" name="type" />
          <parameter type="GSocketProtocol" name="protocol" />
          <parameter type="GObject*" name="source_object" />
          <parameter type="GSocketAddress**" name="effective_address" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="AddAnyInetPort" cname="g_socket_listener_add_any_inet_port">
        <return-type type="guint16" />
        <parameters>
          <parameter type="GObject*" name="source_object" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="AddInetPort" cname="g_socket_listener_add_inet_port">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="guint16" name="port" />
          <parameter type="GObject*" name="source_object" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="AddSocket" cname="g_socket_listener_add_socket">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GSocket*" name="socket" />
          <parameter type="GObject*" name="source_object" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="Close" cname="g_socket_listener_close">
        <return-type type="void" />
      </method>
      <method name="GetType" cname="g_socket_listener_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="g_socket_listener_new" />
      <method name="SetBacklog" cname="g_socket_listener_set_backlog">
        <return-type type="void" />
        <parameters>
          <parameter type="int" name="listen_backlog" />
        </parameters>
      </method>
    </object>
    <object name="SocketOutputStream" cname="GSocketOutputStream" parent="GOutputStream">
      <class_struct cname="GSocketOutputStreamClass">
        <field name="ParentClass" cname="parent_class" type="GOutputStreamClass" />
      </class_struct>
      <field name="Priv" cname="priv" type="GSocketOutputStreamPrivate*" />
      <property name="Socket" cname="socket" type="GSocket" readable="true" writeable="true" construct-only="true" />
      <implements>
        <interface cname="GPollableOutputStream" />
      </implements>
    </object>
    <object name="SocketService" cname="GSocketService" parent="GSocketListener">
      <class_struct cname="GSocketServiceClass">
        <field name="ParentClass" cname="parent_class" type="GSocketListenerClass" />
        <method signal_vm="incoming" />
        <method vm="_g_reserved1" />
        <method vm="_g_reserved2" />
        <method vm="_g_reserved3" />
        <method vm="_g_reserved4" />
        <method vm="_g_reserved5" />
        <method vm="_g_reserved6" />
      </class_struct>
      <field name="Priv" cname="priv" type="GSocketServicePrivate*" />
      <signal name="Incoming" cname="incoming" when="LAST" field_name="incoming">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GSocketConnection*" name="connection" />
          <parameter type="GObject*" name="source_object" />
        </parameters>
      </signal>
      <virtual_method name="GReserved1" cname="_g_reserved1" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved2" cname="_g_reserved2" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved3" cname="_g_reserved3" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved4" cname="_g_reserved4" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved5" cname="_g_reserved5" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved6" cname="_g_reserved6" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <method name="GetType" cname="g_socket_service_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="IsActive" cname="g_socket_service_is_active">
        <return-type type="gboolean" />
      </method>
      <constructor cname="g_socket_service_new" />
      <method name="Start" cname="g_socket_service_start">
        <return-type type="void" />
      </method>
      <method name="Stop" cname="g_socket_service_stop">
        <return-type type="void" />
      </method>
    </object>
    <object name="Socks4aProxy" cname="GSocks4aProxy" parent="GObject">
      <class_struct cname="GSocks4aProxyClass">
        <field name="ParentClass" cname="parent_class" type="GObjectClass" />
      </class_struct>
      <field name="SupportsHostname" cname="supports_hostname" type="gboolean" />
      <implements>
        <interface cname="GProxy" />
      </implements>
    </object>
    <object name="Socks4Proxy" cname="GSocks4Proxy" parent="GSocks4aProxy">
      <class_struct cname="GSocks4ProxyClass">
        <field name="ParentClass" cname="parent_class" type="GSocks4aProxyClass" />
      </class_struct>
    </object>
    <object name="Socks5Proxy" cname="GSocks5Proxy" parent="GObject">
      <class_struct cname="GSocks5ProxyClass">
        <field name="ParentClass" cname="parent_class" type="GObjectClass" />
      </class_struct>
      <implements>
        <interface cname="GProxy" />
      </implements>
    </object>
    <object name="TcpConnection" cname="GTcpConnection" parent="GSocketConnection">
      <class_struct cname="GTcpConnectionClass">
        <field name="ParentClass" cname="parent_class" type="GSocketConnectionClass" />
      </class_struct>
      <field name="Priv" cname="priv" type="GTcpConnectionPrivate*" />
      <property name="GracefulDisconnect" cname="graceful-disconnect" type="gboolean" readable="true" writeable="true" />
      <method name="GetGracefulDisconnect" cname="g_tcp_connection_get_graceful_disconnect">
        <return-type type="gboolean" />
      </method>
      <method name="GetType" cname="g_tcp_connection_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="SetGracefulDisconnect" cname="g_tcp_connection_set_graceful_disconnect">
        <return-type type="void" />
        <parameters>
          <parameter type="gboolean" name="graceful_disconnect" />
        </parameters>
      </method>
    </object>
    <object name="TcpWrapperConnection" cname="GTcpWrapperConnection" parent="GTcpConnection">
      <class_struct cname="GTcpWrapperConnectionClass">
        <field name="ParentClass" cname="parent_class" type="GTcpConnectionClass" />
      </class_struct>
      <field name="Priv" cname="priv" type="GTcpWrapperConnectionPrivate*" />
      <property name="BaseIoStream" cname="base-io-stream" type="GIoStream" readable="true" writeable="true" construct-only="true" />
      <method name="GetBaseIoStream" cname="g_tcp_wrapper_connection_get_base_io_stream">
        <return-type type="GIOStream*" />
      </method>
      <method name="GetType" cname="g_tcp_wrapper_connection_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="g_tcp_wrapper_connection_new">
        <parameters>
          <parameter type="GIOStream*" name="base_io_stream" />
          <parameter type="GSocket*" name="socket" />
        </parameters>
      </constructor>
    </object>
    <object name="ThemedIcon" cname="GThemedIcon" parent="GObject">
      <class_struct cname="GThemedIconClass">
        <field name="ParentClass" cname="parent_class" type="GObjectClass" />
      </class_struct>
      <property name="Name" cname="name" type="gchar*" writeable="true" construct-only="true" />
      <property name="Names" cname="names" type="GStrv" readable="true" writeable="true" construct-only="true" />
      <property name="UseDefaultFallbacks" cname="use-default-fallbacks" type="gboolean" readable="true" writeable="true" construct-only="true" />
      <implements>
        <interface cname="GIcon" />
      </implements>
      <method name="AppendName" cname="g_themed_icon_append_name">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="iconname" />
        </parameters>
      </method>
      <method name="GetNames" cname="g_themed_icon_get_names">
        <return-type type="const-gchar**" />
      </method>
      <method name="GetType" cname="g_themed_icon_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="g_themed_icon_new">
        <parameters>
          <parameter type="const-char*" name="iconname" />
        </parameters>
      </constructor>
      <constructor cname="g_themed_icon_new_from_names">
        <parameters>
          <parameter type="char**" name="iconnames" />
          <parameter type="int" name="len" />
        </parameters>
      </constructor>
      <constructor cname="g_themed_icon_new_with_default_fallbacks">
        <parameters>
          <parameter type="const-char*" name="iconname" />
        </parameters>
      </constructor>
      <method name="PrependName" cname="g_themed_icon_prepend_name">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="iconname" />
        </parameters>
      </method>
    </object>
    <object name="ThreadedResolver" cname="GThreadedResolver" parent="GResolver">
      <class_struct cname="GThreadedResolverClass">
        <field name="ParentClass" cname="parent_class" type="GResolverClass" />
      </class_struct>
      <field name="ThreadPool" cname="thread_pool" type="GThreadPool*" />
      <method name="GetType" cname="g_threaded_resolver_get_type" shared="true">
        <return-type type="GType" />
      </method>
    </object>
    <object name="ThreadedSocketService" cname="GThreadedSocketService" parent="GSocketService">
      <class_struct cname="GThreadedSocketServiceClass">
        <field name="ParentClass" cname="parent_class" type="GSocketServiceClass" />
        <method signal_vm="run" />
        <method vm="_g_reserved1" />
        <method vm="_g_reserved2" />
        <method vm="_g_reserved3" />
        <method vm="_g_reserved4" />
        <method vm="_g_reserved5" />
      </class_struct>
      <field name="Priv" cname="priv" type="GThreadedSocketServicePrivate*" />
      <signal name="Run" cname="run" when="LAST" field_name="run">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GSocketConnection*" name="connection" />
          <parameter type="GObject*" name="source_object" />
        </parameters>
      </signal>
      <property name="MaxThreads" cname="max-threads" type="gint" readable="true" writeable="true" construct-only="true" />
      <virtual_method name="GReserved1" cname="_g_reserved1" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved2" cname="_g_reserved2" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved3" cname="_g_reserved3" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved4" cname="_g_reserved4" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved5" cname="_g_reserved5" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <method name="GetType" cname="g_threaded_socket_service_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="g_threaded_socket_service_new">
        <parameters>
          <parameter type="int" name="max_threads" />
        </parameters>
      </constructor>
    </object>
    <object name="TlsCertificate" cname="GTlsCertificate" parent="GObject">
      <class_struct cname="GTlsCertificateClass">
        <field name="ParentClass" cname="parent_class" type="GObjectClass" />
        <method vm="verify" />
        <field name="Padding" cname="padding" type="gpointer" array_len="8" />
      </class_struct>
      <field name="Priv" cname="priv" type="GTlsCertificatePrivate*" />
      <property name="Certificate" cname="certificate" type="GByteArray" readable="true" writeable="true" construct-only="true" />
      <property name="CertificatePem" cname="certificate-pem" type="gchar*" readable="true" writeable="true" construct-only="true" />
      <property name="PrivateKey" cname="private-key" type="GByteArray" writeable="true" construct-only="true" />
      <property name="PrivateKeyPem" cname="private-key-pem" type="gchar*" writeable="true" construct-only="true" />
      <property name="Issuer" cname="issuer" type="GTlsCertificate" readable="true" writeable="true" construct-only="true" />
      <virtual_method name="Verify" cname="verify">
        <return-type type="GTlsCertificateFlags" />
        <parameters>
          <parameter type="GSocketConnectable*" name="identity" />
          <parameter type="GTlsCertificate*" name="trusted_ca" />
        </parameters>
      </virtual_method>
      <method name="GetIssuer" cname="g_tls_certificate_get_issuer">
        <return-type type="GTlsCertificate*" />
      </method>
      <method name="GetType" cname="g_tls_certificate_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="ListNewFromFile" cname="g_tls_certificate_list_new_from_file" shared="true">
        <return-type type="GList*" />
        <parameters>
          <parameter type="const-gchar*" name="file" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <constructor cname="g_tls_certificate_new_from_file">
        <parameters>
          <parameter type="const-gchar*" name="file" />
          <parameter type="GError**" name="error" />
        </parameters>
      </constructor>
      <constructor cname="g_tls_certificate_new_from_files">
        <parameters>
          <parameter type="const-gchar*" name="cert_file" />
          <parameter type="const-gchar*" name="key_file" />
          <parameter type="GError**" name="error" />
        </parameters>
      </constructor>
      <constructor cname="g_tls_certificate_new_from_pem">
        <parameters>
          <parameter type="const-gchar*" name="data" />
          <parameter type="gssize" name="length" />
          <parameter type="GError**" name="error" />
        </parameters>
      </constructor>
      <method name="Verify" cname="g_tls_certificate_verify">
        <return-type type="GTlsCertificateFlags" />
        <parameters>
          <parameter type="GSocketConnectable*" name="identity" />
          <parameter type="GTlsCertificate*" name="trusted_ca" />
        </parameters>
      </method>
    </object>
    <object name="TlsConnection" cname="GTlsConnection" parent="GIOStream">
      <class_struct cname="GTlsConnectionClass">
        <field name="ParentClass" cname="parent_class" type="GIOStreamClass" />
        <method signal_vm="accept_certificate" />
        <method vm="handshake" />
        <method vm="handshake_async" />
        <method vm="handshake_finish" />
        <field name="Padding" cname="padding" type="gpointer" array_len="8" />
      </class_struct>
      <field name="Priv" cname="priv" type="GTlsConnectionPrivate*" />
      <property name="BaseIoStream" cname="base-io-stream" type="GIoStream" readable="true" writeable="true" construct-only="true" />
      <property name="UseSystemCertdb" cname="use-system-certdb" type="gboolean" readable="true" writeable="true" construct="true" />
      <property name="RequireCloseNotify" cname="require-close-notify" type="gboolean" readable="true" writeable="true" construct="true" />
      <property name="RehandshakeMode" cname="rehandshake-mode" type="GTlsRehandshakeMode" readable="true" writeable="true" construct="true" />
      <property name="Certificate" cname="certificate" type="GTlsCertificate" readable="true" writeable="true" />
      <property name="PeerCertificate" cname="peer-certificate" type="GTlsCertificate" readable="true" />
      <property name="PeerCertificateErrors" cname="peer-certificate-errors" type="GTlsCertificateFlags" readable="true" />
      <signal name="AcceptCertificate" cname="accept-certificate" when="LAST" field_name="accept_certificate">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GTlsCertificate*" name="peer_cert" />
          <parameter type="GTlsCertificateFlags" name="errors" />
        </parameters>
      </signal>
      <virtual_method name="Handshake" cname="handshake">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="HandshakeAsync" cname="handshake_async">
        <return-type type="void" />
        <parameters>
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="HandshakeFinish" cname="handshake_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <method name="EmitAcceptCertificate" cname="g_tls_connection_emit_accept_certificate">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GTlsCertificate*" name="peer_cert" />
          <parameter type="GTlsCertificateFlags" name="errors" />
        </parameters>
      </method>
      <method name="GetCertificate" cname="g_tls_connection_get_certificate">
        <return-type type="GTlsCertificate*" />
      </method>
      <method name="GetPeerCertificate" cname="g_tls_connection_get_peer_certificate">
        <return-type type="GTlsCertificate*" />
      </method>
      <method name="GetPeerCertificateErrors" cname="g_tls_connection_get_peer_certificate_errors">
        <return-type type="GTlsCertificateFlags" />
      </method>
      <method name="GetRehandshakeMode" cname="g_tls_connection_get_rehandshake_mode">
        <return-type type="GTlsRehandshakeMode" />
      </method>
      <method name="GetRequireCloseNotify" cname="g_tls_connection_get_require_close_notify">
        <return-type type="gboolean" />
      </method>
      <method name="GetType" cname="g_tls_connection_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="GetUseSystemCertdb" cname="g_tls_connection_get_use_system_certdb">
        <return-type type="gboolean" />
      </method>
      <method name="Handshake" cname="g_tls_connection_handshake">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="HandshakeAsync" cname="g_tls_connection_handshake_async">
        <return-type type="void" />
        <parameters>
          <parameter type="int" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="HandshakeFinish" cname="g_tls_connection_handshake_finish">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GAsyncResult*" name="result" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="SetCertificate" cname="g_tls_connection_set_certificate">
        <return-type type="void" />
        <parameters>
          <parameter type="GTlsCertificate*" name="certificate" />
        </parameters>
      </method>
      <method name="SetRehandshakeMode" cname="g_tls_connection_set_rehandshake_mode">
        <return-type type="void" />
        <parameters>
          <parameter type="GTlsRehandshakeMode" name="mode" />
        </parameters>
      </method>
      <method name="SetRequireCloseNotify" cname="g_tls_connection_set_require_close_notify">
        <return-type type="void" />
        <parameters>
          <parameter type="gboolean" name="require_close_notify" />
        </parameters>
      </method>
      <method name="SetUseSystemCertdb" cname="g_tls_connection_set_use_system_certdb">
        <return-type type="void" />
        <parameters>
          <parameter type="gboolean" name="use_system_certdb" />
        </parameters>
      </method>
    </object>
    <object name="UnixConnection" cname="GUnixConnection" parent="GSocketConnection">
      <class_struct cname="GUnixConnectionClass">
        <field name="ParentClass" cname="parent_class" type="GSocketConnectionClass" />
      </class_struct>
      <field name="Priv" cname="priv" type="GUnixConnectionPrivate*" />
      <method name="GetType" cname="g_unix_connection_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="ReceiveCredentials" cname="g_unix_connection_receive_credentials">
        <return-type type="GCredentials*" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="ReceiveFd" cname="g_unix_connection_receive_fd">
        <return-type type="gint" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="SendCredentials" cname="g_unix_connection_send_credentials">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="SendFd" cname="g_unix_connection_send_fd">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="gint" name="fd" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
    </object>
    <object name="UnixCredentialsMessage" cname="GUnixCredentialsMessage" parent="GSocketControlMessage">
      <class_struct cname="GUnixCredentialsMessageClass">
        <field name="ParentClass" cname="parent_class" type="GSocketControlMessageClass" />
        <method vm="_g_reserved1" />
        <method vm="_g_reserved2" />
      </class_struct>
      <field name="Priv" cname="priv" type="GUnixCredentialsMessagePrivate*" />
      <property name="Credentials" cname="credentials" type="GCredentials" readable="true" writeable="true" construct-only="true" />
      <virtual_method name="GReserved1" cname="_g_reserved1" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved2" cname="_g_reserved2" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <method name="GetCredentials" cname="g_unix_credentials_message_get_credentials">
        <return-type type="GCredentials*" />
      </method>
      <method name="GetType" cname="g_unix_credentials_message_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="IsSupported" cname="g_unix_credentials_message_is_supported" shared="true">
        <return-type type="gboolean" />
      </method>
      <constructor cname="g_unix_credentials_message_new" />
      <constructor cname="g_unix_credentials_message_new_with_credentials">
        <parameters>
          <parameter type="GCredentials*" name="credentials" />
        </parameters>
      </constructor>
    </object>
    <object name="UnixFDList" cname="GUnixFDList" parent="GObject">
      <class_struct cname="GUnixFDListClass">
        <field name="ParentClass" cname="parent_class" type="GObjectClass" />
        <method vm="_g_reserved1" />
        <method vm="_g_reserved2" />
        <method vm="_g_reserved3" />
        <method vm="_g_reserved4" />
        <method vm="_g_reserved5" />
      </class_struct>
      <field name="Priv" cname="priv" type="GUnixFDListPrivate*" />
      <virtual_method name="GReserved1" cname="_g_reserved1" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved2" cname="_g_reserved2" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved3" cname="_g_reserved3" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved4" cname="_g_reserved4" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved5" cname="_g_reserved5" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <method name="Append" cname="g_unix_fd_list_append">
        <return-type type="gint" />
        <parameters>
          <parameter type="gint" name="fd" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="Get" cname="g_unix_fd_list_get">
        <return-type type="gint" />
        <parameters>
          <parameter type="gint" name="index_" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="GetLength" cname="g_unix_fd_list_get_length">
        <return-type type="gint" />
      </method>
      <method name="GetType" cname="g_unix_fd_list_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="g_unix_fd_list_new" />
      <constructor cname="g_unix_fd_list_new_from_array">
        <parameters>
          <parameter type="const-gint*" name="fds" />
          <parameter type="gint" name="n_fds" />
        </parameters>
      </constructor>
      <method name="PeekFds" cname="g_unix_fd_list_peek_fds">
        <return-type type="const-gint*" />
        <parameters>
          <parameter type="gint*" name="length" />
        </parameters>
      </method>
      <method name="StealFds" cname="g_unix_fd_list_steal_fds">
        <return-type type="gint*" />
        <parameters>
          <parameter type="gint*" name="length" />
        </parameters>
      </method>
    </object>
    <object name="UnixFDMessage" cname="GUnixFDMessage" parent="GSocketControlMessage">
      <class_struct cname="GUnixFDMessageClass">
        <field name="ParentClass" cname="parent_class" type="GSocketControlMessageClass" />
        <method vm="_g_reserved1" />
        <method vm="_g_reserved2" />
      </class_struct>
      <field name="Priv" cname="priv" type="GUnixFDMessagePrivate*" />
      <property name="FdList" cname="fd-list" type="GUnixFdList" readable="true" writeable="true" construct-only="true" />
      <virtual_method name="GReserved1" cname="_g_reserved1" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved2" cname="_g_reserved2" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <method name="AppendFd" cname="g_unix_fd_message_append_fd">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="gint" name="fd" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="GetFdList" cname="g_unix_fd_message_get_fd_list">
        <return-type type="GUnixFDList*" />
      </method>
      <method name="GetType" cname="g_unix_fd_message_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="g_unix_fd_message_new" />
      <constructor cname="g_unix_fd_message_new_with_fd_list">
        <parameters>
          <parameter type="GUnixFDList*" name="fd_list" />
        </parameters>
      </constructor>
      <method name="StealFds" cname="g_unix_fd_message_steal_fds">
        <return-type type="gint*" />
        <parameters>
          <parameter type="gint*" name="length" />
        </parameters>
      </method>
    </object>
    <object name="UnixResolver" cname="GUnixResolver" parent="GThreadedResolver">
      <class_struct cname="GUnixResolverClass">
        <field name="ParentClass" cname="parent_class" type="GThreadedResolverClass" />
      </class_struct>
      <field name="Asyncns" cname="asyncns" type="_g_asyncns_t*" />
      <field name="Watch" cname="watch" type="guint" />
      <method name="GetType" cname="g_unix_resolver_get_type" shared="true">
        <return-type type="GType" />
      </method>
    </object>
    <object name="UnixSocketAddress" cname="GUnixSocketAddress" parent="GSocketAddress">
      <class_struct cname="GUnixSocketAddressClass">
        <field name="ParentClass" cname="parent_class" type="GSocketAddressClass" />
      </class_struct>
      <field name="Priv" cname="priv" type="GUnixSocketAddressPrivate*" />
      <property name="Path" cname="path" type="gchar*" readable="true" writeable="true" construct-only="true" />
      <property name="PathAsArray" cname="path-as-array" type="GByteArray" readable="true" writeable="true" construct-only="true" />
      <property name="Abstract" cname="abstract" type="gboolean" readable="true" writeable="true" construct-only="true" />
      <property name="AddressType" cname="address-type" type="GUnixSocketAddressType" readable="true" writeable="true" construct-only="true" />
      <method name="AbstractNamesSupported" cname="g_unix_socket_address_abstract_names_supported" shared="true">
        <return-type type="gboolean" />
      </method>
      <method name="GetAddressType" cname="g_unix_socket_address_get_address_type">
        <return-type type="GUnixSocketAddressType" />
      </method>
      <method name="GetIsAbstract" cname="g_unix_socket_address_get_is_abstract" deprecated="1">
        <return-type type="gboolean" />
      </method>
      <method name="GetPath" cname="g_unix_socket_address_get_path">
        <return-type type="const-char*" />
      </method>
      <method name="GetPathLen" cname="g_unix_socket_address_get_path_len">
        <return-type type="gsize" />
      </method>
      <method name="GetType" cname="g_unix_socket_address_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="g_unix_socket_address_new">
        <parameters>
          <parameter type="const-gchar*" name="path" />
        </parameters>
      </constructor>
      <constructor cname="g_unix_socket_address_new_abstract" deprecated="1">
        <parameters>
          <parameter type="const-gchar*" name="path" />
          <parameter type="gint" name="path_len" />
        </parameters>
      </constructor>
      <constructor cname="g_unix_socket_address_new_with_type">
        <parameters>
          <parameter type="const-gchar*" name="path" />
          <parameter type="gint" name="path_len" />
          <parameter type="GUnixSocketAddressType" name="type" />
        </parameters>
      </constructor>
    </object>
    <object name="Vfs" cname="GVfs" parent="GObject">
      <class_struct cname="GVfsClass">
        <field name="ParentClass" cname="parent_class" type="GObjectClass" />
        <method vm="is_active" />
        <method vm="get_file_for_path" />
        <method vm="get_file_for_uri" />
        <method vm="get_supported_uri_schemes" />
        <method vm="parse_name" />
        <method vm="local_file_add_info" />
        <method vm="add_writable_namespaces" />
        <method vm="local_file_set_attributes" />
        <method vm="local_file_removed" />
        <method vm="local_file_moved" />
        <method vm="_g_reserved1" />
        <method vm="_g_reserved2" />
        <method vm="_g_reserved3" />
        <method vm="_g_reserved4" />
        <method vm="_g_reserved5" />
        <method vm="_g_reserved6" />
        <method vm="_g_reserved7" />
      </class_struct>
      <virtual_method name="IsActive" cname="is_active">
        <return-type type="gboolean" />
        <parameters />
      </virtual_method>
      <virtual_method name="GetFileForPath" cname="get_file_for_path">
        <return-type type="GFile*" />
        <parameters>
          <parameter type="const-char*" name="path" />
        </parameters>
      </virtual_method>
      <virtual_method name="GetFileForUri" cname="get_file_for_uri">
        <return-type type="GFile*" />
        <parameters>
          <parameter type="const-char*" name="uri" />
        </parameters>
      </virtual_method>
      <virtual_method name="GetSupportedUriSchemes" cname="get_supported_uri_schemes">
        <return-type type="const-*" />
        <parameters />
      </virtual_method>
      <virtual_method name="ParseName" cname="parse_name">
        <return-type type="GFile*" />
        <parameters>
          <parameter type="const-char*" name="parse_name" />
        </parameters>
      </virtual_method>
      <virtual_method name="LocalFileAddInfo" cname="local_file_add_info">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="filename" />
          <parameter type="guint64" name="device" />
          <parameter type="GFileAttributeMatcher*" name="attribute_matcher" />
          <parameter type="GFileInfo*" name="info" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="gpointer*" name="extra_data" />
          <parameter type="GDestroyNotify*" name="free_extra_data" />
        </parameters>
      </virtual_method>
      <virtual_method name="AddWritableNamespaces" cname="add_writable_namespaces">
        <return-type type="void" />
        <parameters>
          <parameter type="GFileAttributeInfoList*" name="list" />
        </parameters>
      </virtual_method>
      <virtual_method name="LocalFileSetAttributes" cname="local_file_set_attributes">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-char*" name="filename" />
          <parameter type="GFileInfo*" name="info" />
          <parameter type="GFileQueryInfoFlags" name="flags" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="LocalFileRemoved" cname="local_file_removed">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="filename" />
        </parameters>
      </virtual_method>
      <virtual_method name="LocalFileMoved" cname="local_file_moved">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="source" />
          <parameter type="const-char*" name="dest" />
        </parameters>
      </virtual_method>
      <virtual_method name="GReserved1" cname="_g_reserved1" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved2" cname="_g_reserved2" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved3" cname="_g_reserved3" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved4" cname="_g_reserved4" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved5" cname="_g_reserved5" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved6" cname="_g_reserved6" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved7" cname="_g_reserved7" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <method name="GetDefault" cname="g_vfs_get_default" shared="true">
        <return-type type="GVfs*" />
      </method>
      <method name="GetFileForPath" cname="g_vfs_get_file_for_path">
        <return-type type="GFile*" />
        <parameters>
          <parameter type="const-char*" name="path" />
        </parameters>
      </method>
      <method name="GetFileForUri" cname="g_vfs_get_file_for_uri">
        <return-type type="GFile*" />
        <parameters>
          <parameter type="const-char*" name="uri" />
        </parameters>
      </method>
      <method name="GetLocal" cname="g_vfs_get_local" shared="true">
        <return-type type="GVfs*" />
      </method>
      <method name="GetSupportedUriSchemes" cname="g_vfs_get_supported_uri_schemes">
        <return-type type="const-gchar**" />
      </method>
      <method name="GetType" cname="g_vfs_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="IsActive" cname="g_vfs_is_active">
        <return-type type="gboolean" />
      </method>
      <method name="ParseName" cname="g_vfs_parse_name">
        <return-type type="GFile*" />
        <parameters>
          <parameter type="const-char*" name="parse_name" />
        </parameters>
      </method>
    </object>
    <object name="VolumeMonitor" cname="GVolumeMonitor" parent="GObject">
      <class_struct cname="GVolumeMonitorClass">
        <field name="ParentClass" cname="parent_class" type="GObjectClass" />
        <method signal_vm="volume_added" />
        <method signal_vm="volume_removed" />
        <method signal_vm="volume_changed" />
        <method signal_vm="mount_added" />
        <method signal_vm="mount_removed" />
        <method signal_vm="mount_pre_unmount" />
        <method signal_vm="mount_changed" />
        <method signal_vm="drive_connected" />
        <method signal_vm="drive_disconnected" />
        <method signal_vm="drive_changed" />
        <method vm="is_supported" />
        <method vm="get_connected_drives" />
        <method vm="get_volumes" />
        <method vm="get_mounts" />
        <method vm="get_volume_for_uuid" />
        <method vm="get_mount_for_uuid" />
        <method vm="adopt_orphan_mount" />
        <method signal_vm="drive_eject_button" />
        <method signal_vm="drive_stop_button" />
        <method vm="_g_reserved1" />
        <method vm="_g_reserved2" />
        <method vm="_g_reserved3" />
        <method vm="_g_reserved4" />
        <method vm="_g_reserved5" />
        <method vm="_g_reserved6" />
      </class_struct>
      <field name="Priv" cname="priv" type="gpointer" />
      <signal name="VolumeAdded" cname="volume-added" when="LAST" field_name="volume_added">
        <return-type type="void" />
        <parameters>
          <parameter type="GVolume*" name="volume" />
        </parameters>
      </signal>
      <signal name="VolumeRemoved" cname="volume-removed" when="LAST" field_name="volume_removed">
        <return-type type="void" />
        <parameters>
          <parameter type="GVolume*" name="volume" />
        </parameters>
      </signal>
      <signal name="VolumeChanged" cname="volume-changed" when="LAST" field_name="volume_changed">
        <return-type type="void" />
        <parameters>
          <parameter type="GVolume*" name="volume" />
        </parameters>
      </signal>
      <signal name="MountAdded" cname="mount-added" when="LAST" field_name="mount_added">
        <return-type type="void" />
        <parameters>
          <parameter type="GMount*" name="mount" />
        </parameters>
      </signal>
      <signal name="MountRemoved" cname="mount-removed" when="LAST" field_name="mount_removed">
        <return-type type="void" />
        <parameters>
          <parameter type="GMount*" name="mount" />
        </parameters>
      </signal>
      <signal name="MountPreUnmount" cname="mount-pre-unmount" when="LAST" field_name="mount_pre_unmount">
        <return-type type="void" />
        <parameters>
          <parameter type="GMount*" name="mount" />
        </parameters>
      </signal>
      <signal name="MountChanged" cname="mount-changed" when="LAST" field_name="mount_changed">
        <return-type type="void" />
        <parameters>
          <parameter type="GMount*" name="mount" />
        </parameters>
      </signal>
      <signal name="DriveConnected" cname="drive-connected" when="LAST" field_name="drive_connected">
        <return-type type="void" />
        <parameters>
          <parameter type="GDrive*" name="drive" />
        </parameters>
      </signal>
      <signal name="DriveDisconnected" cname="drive-disconnected" when="LAST" field_name="drive_disconnected">
        <return-type type="void" />
        <parameters>
          <parameter type="GDrive*" name="drive" />
        </parameters>
      </signal>
      <signal name="DriveChanged" cname="drive-changed" when="LAST" field_name="drive_changed">
        <return-type type="void" />
        <parameters>
          <parameter type="GDrive*" name="drive" />
        </parameters>
      </signal>
      <signal name="DriveEjectButton" cname="drive-eject-button" when="LAST" field_name="drive_eject_button">
        <return-type type="void" />
        <parameters>
          <parameter type="GDrive*" name="drive" />
        </parameters>
      </signal>
      <signal name="DriveStopButton" cname="drive-stop-button" when="LAST" field_name="drive_stop_button">
        <return-type type="void" />
        <parameters>
          <parameter type="GDrive*" name="drive" />
        </parameters>
      </signal>
      <virtual_method name="IsSupported" cname="is_supported" shared="true">
        <return-type type="gboolean" />
      </virtual_method>
      <virtual_method name="GetConnectedDrives" cname="get_connected_drives">
        <return-type type="GList*" />
        <parameters />
      </virtual_method>
      <virtual_method name="GetVolumes" cname="get_volumes">
        <return-type type="GList*" />
        <parameters />
      </virtual_method>
      <virtual_method name="GetMounts" cname="get_mounts">
        <return-type type="GList*" />
        <parameters />
      </virtual_method>
      <virtual_method name="GetVolumeForUuid" cname="get_volume_for_uuid">
        <return-type type="GVolume*" />
        <parameters>
          <parameter type="const-char*" name="uuid" />
        </parameters>
      </virtual_method>
      <virtual_method name="GetMountForUuid" cname="get_mount_for_uuid">
        <return-type type="GMount*" />
        <parameters>
          <parameter type="const-char*" name="uuid" />
        </parameters>
      </virtual_method>
      <virtual_method name="AdoptOrphanMount" cname="adopt_orphan_mount" shared="true">
        <return-type type="GVolume*" />
        <parameters>
          <parameter type="GMount*" name="mount" />
          <parameter type="GVolumeMonitor*" name="volume_monitor" />
        </parameters>
      </virtual_method>
      <virtual_method name="GReserved1" cname="_g_reserved1" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved2" cname="_g_reserved2" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved3" cname="_g_reserved3" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved4" cname="_g_reserved4" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved5" cname="_g_reserved5" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <virtual_method name="GReserved6" cname="_g_reserved6" shared="true" padding="true">
        <return-type type="void" />
      </virtual_method>
      <method name="AdoptOrphanMount" cname="g_volume_monitor_adopt_orphan_mount" deprecated="1" shared="true">
        <return-type type="GVolume*" />
        <parameters>
          <parameter type="GMount*" name="mount" />
        </parameters>
      </method>
      <method name="Get" cname="g_volume_monitor_get" shared="true">
        <return-type type="GVolumeMonitor*" />
      </method>
      <method name="GetConnectedDrives" cname="g_volume_monitor_get_connected_drives">
        <return-type type="GList*" />
      </method>
      <method name="GetMountForUuid" cname="g_volume_monitor_get_mount_for_uuid">
        <return-type type="GMount*" />
        <parameters>
          <parameter type="const-char*" name="uuid" />
        </parameters>
      </method>
      <method name="GetMounts" cname="g_volume_monitor_get_mounts">
        <return-type type="GList*" />
      </method>
      <method name="GetType" cname="g_volume_monitor_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="GetVolumeForUuid" cname="g_volume_monitor_get_volume_for_uuid">
        <return-type type="GVolume*" />
        <parameters>
          <parameter type="const-char*" name="uuid" />
        </parameters>
      </method>
      <method name="GetVolumes" cname="g_volume_monitor_get_volumes">
        <return-type type="GList*" />
      </method>
    </object>
    <object name="ZlibCompressor" cname="GZlibCompressor" parent="GObject">
      <class_struct cname="GZlibCompressorClass">
        <field name="ParentClass" cname="parent_class" type="GObjectClass" />
      </class_struct>
      <property name="Format" cname="format" type="GZlibCompressorFormat" readable="true" writeable="true" construct-only="true" />
      <property name="Level" cname="level" type="gint" readable="true" writeable="true" construct-only="true" />
      <property name="FileInfo" cname="file-info" type="GFileInfo" readable="true" writeable="true" />
      <implements>
        <interface cname="GConverter" />
      </implements>
      <method name="GetFileInfo" cname="g_zlib_compressor_get_file_info">
        <return-type type="GFileInfo*" />
      </method>
      <method name="GetType" cname="g_zlib_compressor_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="g_zlib_compressor_new">
        <parameters>
          <parameter type="GZlibCompressorFormat" name="format" />
          <parameter type="int" name="level" />
        </parameters>
      </constructor>
      <method name="SetFileInfo" cname="g_zlib_compressor_set_file_info">
        <return-type type="void" />
        <parameters>
          <parameter type="GFileInfo*" name="file_info" />
        </parameters>
      </method>
    </object>
    <object name="ZlibDecompressor" cname="GZlibDecompressor" parent="GObject">
      <class_struct cname="GZlibDecompressorClass">
        <field name="ParentClass" cname="parent_class" type="GObjectClass" />
      </class_struct>
      <property name="Format" cname="format" type="GZlibCompressorFormat" readable="true" writeable="true" construct-only="true" />
      <property name="FileInfo" cname="file-info" type="GFileInfo" readable="true" />
      <implements>
        <interface cname="GConverter" />
      </implements>
      <method name="GetFileInfo" cname="g_zlib_decompressor_get_file_info">
        <return-type type="GFileInfo*" />
      </method>
      <method name="GetType" cname="g_zlib_decompressor_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="g_zlib_decompressor_new">
        <parameters>
          <parameter type="GZlibCompressorFormat" name="format" />
        </parameters>
      </constructor>
    </object>
    <struct name="Chunk" cname="Chunk" opaque="true" />
    <struct name="ExportedObject" cname="ExportedObject" opaque="true" />
    <struct name="ExportedSubtree" cname="ExportedSubtree" opaque="true" />
    <struct name="FileChange" cname="FileChange" opaque="true" />
    <struct name="ApplicationImpl" cname="GApplicationImpl" opaque="true">
      <method name="Activate" cname="g_application_impl_activate">
        <return-type type="void" />
        <parameters>
          <parameter type="GVariant*" name="platform_data" />
        </parameters>
      </method>
      <method name="ActivateAction" cname="g_application_impl_activate_action">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="action_name" />
          <parameter type="GVariant*" name="parameter" />
          <parameter type="GVariant*" name="platform_data" />
        </parameters>
      </method>
      <method name="ChangeActionState" cname="g_application_impl_change_action_state">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="action_name" />
          <parameter type="GVariant*" name="value" />
          <parameter type="GVariant*" name="platform_data" />
        </parameters>
      </method>
      <method name="CommandLine" cname="g_application_impl_command_line">
        <return-type type="int" />
        <parameters>
          <parameter type="gchar**" name="arguments" />
          <parameter type="GVariant*" name="platform_data" />
        </parameters>
      </method>
      <method name="Destroy" cname="g_application_impl_destroy">
        <return-type type="void" />
      </method>
      <method name="Flush" cname="g_application_impl_flush">
        <return-type type="void" />
      </method>
      <method name="Open" cname="g_application_impl_open">
        <return-type type="void" />
        <parameters>
          <parameter type="GFile**" name="files" />
          <parameter type="gint" name="n_files" />
          <parameter type="const-gchar*" name="hint" />
          <parameter type="GVariant*" name="platform_data" />
        </parameters>
      </method>
      <method name="Register" cname="g_application_impl_register" shared="true">
        <return-type type="GApplicationImpl*" />
        <parameters>
          <parameter type="GApplication*" name="application" />
          <parameter type="const-gchar*" name="appid" />
          <parameter type="GApplicationFlags" name="flags" />
          <parameter type="GHashTable**" name="remote_actions" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
    </struct>
    <struct name="DBusAnnotationInfo" cname="GDBusAnnotationInfo" opaque="true">
      <field name="RefCount" cname="ref_count" type="gint" access="public" writeable="true" />
      <field name="Key" cname="key" type="gchar*" access="public" writeable="true" />
      <field name="Value" cname="value" type="gchar*" access="public" writeable="true" />
      <field name="Annotations" cname="annotations" type="GDBusAnnotationInfo**" access="public" writeable="true" />
      <method name="GetType" cname="g_dbus_annotation_info_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="Lookup" cname="g_dbus_annotation_info_lookup">
        <return-type type="const-gchar*" />
        <parameters>
          <parameter type="const-gchar*" name="name" />
        </parameters>
      </method>
      <method name="Ref" cname="g_dbus_annotation_info_ref">
        <return-type type="GDBusAnnotationInfo*" />
      </method>
      <method name="Unref" cname="g_dbus_annotation_info_unref">
        <return-type type="void" />
      </method>
    </struct>
    <struct name="DBusArgInfo" cname="GDBusArgInfo" opaque="true">
      <field name="RefCount" cname="ref_count" type="gint" access="public" writeable="true" />
      <field name="Name" cname="name" type="gchar*" access="public" writeable="true" />
      <field name="Signature" cname="signature" type="gchar*" access="public" writeable="true" />
      <field name="Annotations" cname="annotations" type="GDBusAnnotationInfo**" access="public" writeable="true" />
      <method name="GetType" cname="g_dbus_arg_info_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="Ref" cname="g_dbus_arg_info_ref">
        <return-type type="GDBusArgInfo*" />
      </method>
      <method name="Unref" cname="g_dbus_arg_info_unref">
        <return-type type="void" />
      </method>
    </struct>
    <struct name="DBusErrorEntry" cname="GDBusErrorEntry">
      <field name="ErrorCode" cname="error_code" type="gint" />
      <field name="DbusErrorName" cname="dbus_error_name" type="const-gchar*" />
    </struct>
    <struct name="DBusInterfaceInfo" cname="GDBusInterfaceInfo" opaque="true">
      <field name="RefCount" cname="ref_count" type="gint" access="public" writeable="true" />
      <field name="Name" cname="name" type="gchar*" access="public" writeable="true" />
      <field name="Methods" cname="methods" type="GDBusMethodInfo**" access="public" writeable="true" />
      <field name="Signals" cname="signals" type="GDBusSignalInfo**" access="public" writeable="true" />
      <field name="Properties" cname="properties" type="GDBusPropertyInfo**" access="public" writeable="true" />
      <field name="Annotations" cname="annotations" type="GDBusAnnotationInfo**" access="public" writeable="true" />
      <method name="GenerateXml" cname="g_dbus_interface_info_generate_xml">
        <return-type type="void" />
        <parameters>
          <parameter type="guint" name="indent" />
          <parameter type="GString*" name="string_builder" />
        </parameters>
      </method>
      <method name="GetType" cname="g_dbus_interface_info_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="LookupMethod" cname="g_dbus_interface_info_lookup_method">
        <return-type type="GDBusMethodInfo*" />
        <parameters>
          <parameter type="const-gchar*" name="name" />
        </parameters>
      </method>
      <method name="LookupProperty" cname="g_dbus_interface_info_lookup_property">
        <return-type type="GDBusPropertyInfo*" />
        <parameters>
          <parameter type="const-gchar*" name="name" />
        </parameters>
      </method>
      <method name="LookupSignal" cname="g_dbus_interface_info_lookup_signal">
        <return-type type="GDBusSignalInfo*" />
        <parameters>
          <parameter type="const-gchar*" name="name" />
        </parameters>
      </method>
      <method name="Ref" cname="g_dbus_interface_info_ref">
        <return-type type="GDBusInterfaceInfo*" />
      </method>
      <method name="Unref" cname="g_dbus_interface_info_unref">
        <return-type type="void" />
      </method>
    </struct>
    <struct name="DBusInterfaceVTable" cname="GDBusInterfaceVTable">
      <field name="MethodCall" cname="method_call" type="GDBusInterfaceMethodCallFunc" />
      <field name="GetProperty" cname="get_property" type="GDBusInterfaceGetPropertyFunc" />
      <field name="SetProperty" cname="set_property" type="GDBusInterfaceSetPropertyFunc" />
      <field name="Padding" cname="padding" array_len="8" type="gpointer" access="private" />
    </struct>
    <struct name="DBusMethodInfo" cname="GDBusMethodInfo" opaque="true">
      <field name="RefCount" cname="ref_count" type="gint" access="public" writeable="true" />
      <field name="Name" cname="name" type="gchar*" access="public" writeable="true" />
      <field name="InArgs" cname="in_args" type="GDBusArgInfo**" access="public" writeable="true" />
      <field name="OutArgs" cname="out_args" type="GDBusArgInfo**" access="public" writeable="true" />
      <field name="Annotations" cname="annotations" type="GDBusAnnotationInfo**" access="public" writeable="true" />
      <method name="GetType" cname="g_dbus_method_info_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="Ref" cname="g_dbus_method_info_ref">
        <return-type type="GDBusMethodInfo*" />
      </method>
      <method name="Unref" cname="g_dbus_method_info_unref">
        <return-type type="void" />
      </method>
    </struct>
    <struct name="DBusNodeInfo" cname="GDBusNodeInfo" opaque="true">
      <field name="RefCount" cname="ref_count" type="gint" access="public" writeable="true" />
      <field name="Path" cname="path" type="gchar*" access="public" writeable="true" />
      <field name="Interfaces" cname="interfaces" type="GDBusInterfaceInfo**" access="public" writeable="true" />
      <field name="Nodes" cname="nodes" type="GDBusNodeInfo**" access="public" writeable="true" />
      <field name="Annotations" cname="annotations" type="GDBusAnnotationInfo**" access="public" writeable="true" />
      <method name="GenerateXml" cname="g_dbus_node_info_generate_xml">
        <return-type type="void" />
        <parameters>
          <parameter type="guint" name="indent" />
          <parameter type="GString*" name="string_builder" />
        </parameters>
      </method>
      <method name="GetType" cname="g_dbus_node_info_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="LookupInterface" cname="g_dbus_node_info_lookup_interface">
        <return-type type="GDBusInterfaceInfo*" />
        <parameters>
          <parameter type="const-gchar*" name="name" />
        </parameters>
      </method>
      <constructor cname="g_dbus_node_info_new_for_xml">
        <parameters>
          <parameter type="const-gchar*" name="xml_data" />
          <parameter type="GError**" name="error" />
        </parameters>
      </constructor>
      <method name="Ref" cname="g_dbus_node_info_ref">
        <return-type type="GDBusNodeInfo*" />
      </method>
      <method name="Unref" cname="g_dbus_node_info_unref">
        <return-type type="void" />
      </method>
    </struct>
    <struct name="DBusPropertyInfo" cname="GDBusPropertyInfo" opaque="true">
      <field name="RefCount" cname="ref_count" type="gint" access="public" writeable="true" />
      <field name="Name" cname="name" type="gchar*" access="public" writeable="true" />
      <field name="Signature" cname="signature" type="gchar*" access="public" writeable="true" />
      <field name="Flags" cname="flags" type="GDBusPropertyInfoFlags" access="public" writeable="true" />
      <field name="Annotations" cname="annotations" type="GDBusAnnotationInfo**" access="public" writeable="true" />
      <method name="GetType" cname="g_dbus_property_info_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="Ref" cname="g_dbus_property_info_ref">
        <return-type type="GDBusPropertyInfo*" />
      </method>
      <method name="Unref" cname="g_dbus_property_info_unref">
        <return-type type="void" />
      </method>
    </struct>
    <struct name="DBusSignalInfo" cname="GDBusSignalInfo" opaque="true">
      <field name="RefCount" cname="ref_count" type="gint" access="public" writeable="true" />
      <field name="Name" cname="name" type="gchar*" access="public" writeable="true" />
      <field name="Args" cname="args" type="GDBusArgInfo**" access="public" writeable="true" />
      <field name="Annotations" cname="annotations" type="GDBusAnnotationInfo**" access="public" writeable="true" />
      <method name="GetType" cname="g_dbus_signal_info_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="Ref" cname="g_dbus_signal_info_ref">
        <return-type type="GDBusSignalInfo*" />
      </method>
      <method name="Unref" cname="g_dbus_signal_info_unref">
        <return-type type="void" />
      </method>
    </struct>
    <struct name="DBusSubtreeVTable" cname="GDBusSubtreeVTable">
      <field name="Enumerate" cname="enumerate" type="GDBusSubtreeEnumerateFunc" />
      <field name="Introspect" cname="introspect" type="GDBusSubtreeIntrospectFunc" />
      <field name="Dispatch" cname="dispatch" type="GDBusSubtreeDispatchFunc" />
      <field name="Padding" cname="padding" array_len="8" type="gpointer" access="private" />
    </struct>
    <struct name="DBusWorker" cname="GDBusWorker" opaque="true" />
    <struct name="DummyTlsCertificate" cname="GDummyTlsCertificate" opaque="true" />
    <struct name="DummyTlsCertificateClass" cname="GDummyTlsCertificateClass" opaque="true" />
    <struct name="DummyTlsConnection" cname="GDummyTlsConnection" opaque="true" />
    <struct name="DummyTlsConnectionClass" cname="GDummyTlsConnectionClass" opaque="true" />
    <struct name="FileAttributeInfo" cname="GFileAttributeInfo">
      <field name="Name" cname="name" type="char*" />
      <field name="Type" cname="type" type="GFileAttributeType" />
      <field name="Flags" cname="flags" type="GFileAttributeInfoFlags" />
    </struct>
    <boxed name="FileAttributeInfoList" cname="GFileAttributeInfoList" opaque="true">
      <field name="Infos" cname="infos" type="GFileAttributeInfo*" access="public" writeable="true" />
      <field name="NInfos" cname="n_infos" type="int" access="public" writeable="true" />
      <method name="Add" cname="g_file_attribute_info_list_add">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="name" />
          <parameter type="GFileAttributeType" name="type" />
          <parameter type="GFileAttributeInfoFlags" name="flags" />
        </parameters>
      </method>
      <method name="Dup" cname="g_file_attribute_info_list_dup">
        <return-type type="GFileAttributeInfoList*" />
      </method>
      <method name="GetType" cname="g_file_attribute_info_list_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="Lookup" cname="g_file_attribute_info_list_lookup">
        <return-type type="const-GFileAttributeInfo*" />
        <parameters>
          <parameter type="const-char*" name="name" />
        </parameters>
      </method>
      <constructor cname="g_file_attribute_info_list_new" />
      <method name="Ref" cname="g_file_attribute_info_list_ref">
        <return-type type="GFileAttributeInfoList*" />
      </method>
      <method name="Unref" cname="g_file_attribute_info_list_unref">
        <return-type type="void" />
      </method>
    </boxed>
    <boxed name="FileAttributeMatcher" cname="GFileAttributeMatcher" opaque="true">
      <method name="EnumerateNamespace" cname="g_file_attribute_matcher_enumerate_namespace">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-char*" name="ns" />
        </parameters>
      </method>
      <method name="EnumerateNext" cname="g_file_attribute_matcher_enumerate_next">
        <return-type type="const-char*" />
      </method>
      <method name="GetType" cname="g_file_attribute_matcher_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="Matches" cname="g_file_attribute_matcher_matches">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-char*" name="attribute" />
        </parameters>
      </method>
      <method name="MatchesOnly" cname="g_file_attribute_matcher_matches_only">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-char*" name="attribute" />
        </parameters>
      </method>
      <constructor cname="g_file_attribute_matcher_new">
        <parameters>
          <parameter type="const-char*" name="attributes" />
        </parameters>
      </constructor>
      <method name="Ref" cname="g_file_attribute_matcher_ref">
        <return-type type="GFileAttributeMatcher*" />
      </method>
      <method name="Unref" cname="g_file_attribute_matcher_unref">
        <return-type type="void" />
      </method>
    </boxed>
    <struct name="IOExtension" cname="GIOExtension" opaque="true">
      <method name="GetName" cname="g_io_extension_get_name">
        <return-type type="const-char*" />
      </method>
      <method name="GetPriority" cname="g_io_extension_get_priority">
        <return-type type="gint" />
      </method>
      <method name="GetType" cname="g_io_extension_get_type">
        <return-type type="GType" />
      </method>
      <method name="RefClass" cname="g_io_extension_ref_class">
        <return-type type="GTypeClass*" />
      </method>
    </struct>
    <struct name="IOExtensionPoint" cname="GIOExtensionPoint" opaque="true">
      <method name="GetExtensionByName" cname="g_io_extension_point_get_extension_by_name">
        <return-type type="GIOExtension*" />
        <parameters>
          <parameter type="const-char*" name="name" />
        </parameters>
      </method>
      <method name="GetExtensions" cname="g_io_extension_point_get_extensions">
        <return-type type="GList*" />
      </method>
      <method name="GetRequiredType" cname="g_io_extension_point_get_required_type">
        <return-type type="GType" />
      </method>
      <method name="Implement" cname="g_io_extension_point_implement" shared="true">
        <return-type type="GIOExtension*" />
        <parameters>
          <parameter type="const-char*" name="extension_point_name" />
          <parameter type="GType" name="type" />
          <parameter type="const-char*" name="extension_name" />
          <parameter type="gint" name="priority" />
        </parameters>
      </method>
      <method name="Lookup" cname="g_io_extension_point_lookup" shared="true">
        <return-type type="GIOExtensionPoint*" />
        <parameters>
          <parameter type="const-char*" name="name" />
        </parameters>
      </method>
      <method name="Register" cname="g_io_extension_point_register" shared="true">
        <return-type type="GIOExtensionPoint*" />
        <parameters>
          <parameter type="const-char*" name="name" />
        </parameters>
      </method>
      <method name="SetRequiredType" cname="g_io_extension_point_set_required_type">
        <return-type type="void" />
        <parameters>
          <parameter type="GType" name="type" />
        </parameters>
      </method>
    </struct>
    <struct name="IOSchedulerJob" cname="GIOSchedulerJob" opaque="true">
      <method name="SendToMainloop" cname="g_io_scheduler_job_send_to_mainloop">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GSourceFunc" name="func" />
          <parameter type="gpointer" name="user_data" />
          <parameter type="GDestroyNotify" name="notify" />
        </parameters>
      </method>
      <method name="SendToMainloopAsync" cname="g_io_scheduler_job_send_to_mainloop_async">
        <return-type type="void" />
        <parameters>
          <parameter type="GSourceFunc" name="func" />
          <parameter type="gpointer" name="user_data" />
          <parameter type="GDestroyNotify" name="notify" />
        </parameters>
      </method>
    </struct>
    <struct name="IOStreamAdapter" cname="GIOStreamAdapter" opaque="true" />
    <struct name="InputVector" cname="GInputVector">
      <field name="Buffer" cname="buffer" type="gpointer" />
      <field name="Size" cname="size" type="gsize" />
    </struct>
    <struct name="OutputVector" cname="GOutputVector">
      <field name="Buffer" cname="buffer" type="gconstpointer" />
      <field name="Size" cname="size" type="gsize" />
    </struct>
    <struct name="SettingsBackend" cname="GSettingsBackend" opaque="true" />
    <struct name="SettingsBackendClosure" cname="GSettingsBackendClosure" opaque="true" />
    <struct name="SettingsBackendWatch" cname="GSettingsBackendWatch" opaque="true" />
    <boxed name="SrvTarget" cname="GSrvTarget" opaque="true">
      <method name="Copy" cname="g_srv_target_copy">
        <return-type type="GSrvTarget*" owned="true" />
      </method>
      <method name="Free" cname="g_srv_target_free">
        <return-type type="void" />
      </method>
      <method name="GetHostname" cname="g_srv_target_get_hostname">
        <return-type type="const-gchar*" />
      </method>
      <method name="GetPort" cname="g_srv_target_get_port">
        <return-type type="guint16" />
      </method>
      <method name="GetPriority" cname="g_srv_target_get_priority">
        <return-type type="guint16" />
      </method>
      <method name="GetType" cname="g_srv_target_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="GetWeight" cname="g_srv_target_get_weight">
        <return-type type="guint16" />
      </method>
      <method name="ListSort" cname="g_srv_target_list_sort" shared="true">
        <return-type type="GList*" />
        <parameters>
          <parameter type="GList*" name="targets" />
        </parameters>
      </method>
      <constructor cname="g_srv_target_new">
        <parameters>
          <parameter type="const-gchar*" name="hostname" />
          <parameter type="guint16" name="port" />
          <parameter type="guint16" name="priority" />
          <parameter type="guint16" name="weight" />
        </parameters>
      </constructor>
    </boxed>
    <struct name="ThreadedResolverRequest" cname="GThreadedResolverRequest" opaque="true" />
    <struct name="TlsClientContext" cname="GTlsClientContext" opaque="true" />
    <struct name="TlsContext" cname="GTlsContext" opaque="true" />
    <struct name="TlsServerContext" cname="GTlsServerContext" opaque="true" />
    <struct name="UnixResolverRequest" cname="GUnixResolverRequest" opaque="true" />
    <struct name="Win32ResolverRequest" cname="GWin32ResolverRequest" opaque="true" />
    <struct name="MessageToWriteData" cname="MessageToWriteData" opaque="true" />
    <struct name="RemoteActionInfo" cname="RemoteActionInfo">
      <field name="Name" cname="name" type="gchar*" />
      <field name="ParameterType" cname="parameter_type" type="GVariantType*" />
      <field name="Enabled" cname="enabled" type="gboolean" />
      <field name="State" cname="state" type="GVariant*" />
    </struct>
    <struct name="SchemaState" cname="SchemaState" opaque="true" />
    <class name="Bus" cname="GBus_">
      <method name="Get" cname="g_bus_get" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="GBusType" name="bus_type" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="GetFinish" cname="g_bus_get_finish" shared="true">
        <return-type type="GDBusConnection*" />
        <parameters>
          <parameter type="GAsyncResult*" name="res" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="GetSync" cname="g_bus_get_sync" shared="true">
        <return-type type="GDBusConnection*" />
        <parameters>
          <parameter type="GBusType" name="bus_type" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="OwnName" cname="g_bus_own_name" shared="true">
        <return-type type="guint" />
        <parameters>
          <parameter type="GBusType" name="bus_type" />
          <parameter type="const-gchar*" name="name" />
          <parameter type="GBusNameOwnerFlags" name="flags" />
          <parameter type="GBusAcquiredCallback" name="bus_acquired_handler" />
          <parameter type="GBusNameAcquiredCallback" name="name_acquired_handler" />
          <parameter type="GBusNameLostCallback" name="name_lost_handler" />
          <parameter type="gpointer" name="user_data" />
          <parameter type="GDestroyNotify" name="user_data_free_func" />
        </parameters>
      </method>
      <method name="OwnNameOnConnection" cname="g_bus_own_name_on_connection" shared="true">
        <return-type type="guint" />
        <parameters>
          <parameter type="GDBusConnection*" name="connection" />
          <parameter type="const-gchar*" name="name" />
          <parameter type="GBusNameOwnerFlags" name="flags" />
          <parameter type="GBusNameAcquiredCallback" name="name_acquired_handler" />
          <parameter type="GBusNameLostCallback" name="name_lost_handler" />
          <parameter type="gpointer" name="user_data" />
          <parameter type="GDestroyNotify" name="user_data_free_func" />
        </parameters>
      </method>
      <method name="OwnNameOnConnectionWithClosures" cname="g_bus_own_name_on_connection_with_closures" shared="true">
        <return-type type="guint" />
        <parameters>
          <parameter type="GDBusConnection*" name="connection" />
          <parameter type="const-gchar*" name="name" />
          <parameter type="GBusNameOwnerFlags" name="flags" />
          <parameter type="GClosure*" name="name_acquired_closure" />
          <parameter type="GClosure*" name="name_lost_closure" />
        </parameters>
      </method>
      <method name="OwnNameWithClosures" cname="g_bus_own_name_with_closures" shared="true">
        <return-type type="guint" />
        <parameters>
          <parameter type="GBusType" name="bus_type" />
          <parameter type="const-gchar*" name="name" />
          <parameter type="GBusNameOwnerFlags" name="flags" />
          <parameter type="GClosure*" name="bus_acquired_closure" />
          <parameter type="GClosure*" name="name_acquired_closure" />
          <parameter type="GClosure*" name="name_lost_closure" />
        </parameters>
      </method>
      <method name="UnownName" cname="g_bus_unown_name" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="guint" name="owner_id" />
        </parameters>
      </method>
      <method name="UnwatchName" cname="g_bus_unwatch_name" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="guint" name="watcher_id" />
        </parameters>
      </method>
      <method name="WatchName" cname="g_bus_watch_name" shared="true">
        <return-type type="guint" />
        <parameters>
          <parameter type="GBusType" name="bus_type" />
          <parameter type="const-gchar*" name="name" />
          <parameter type="GBusNameWatcherFlags" name="flags" />
          <parameter type="GBusNameAppearedCallback" name="name_appeared_handler" />
          <parameter type="GBusNameVanishedCallback" name="name_vanished_handler" />
          <parameter type="gpointer" name="user_data" />
          <parameter type="GDestroyNotify" name="user_data_free_func" />
        </parameters>
      </method>
      <method name="WatchNameOnConnection" cname="g_bus_watch_name_on_connection" shared="true">
        <return-type type="guint" />
        <parameters>
          <parameter type="GDBusConnection*" name="connection" />
          <parameter type="const-gchar*" name="name" />
          <parameter type="GBusNameWatcherFlags" name="flags" />
          <parameter type="GBusNameAppearedCallback" name="name_appeared_handler" />
          <parameter type="GBusNameVanishedCallback" name="name_vanished_handler" />
          <parameter type="gpointer" name="user_data" />
          <parameter type="GDestroyNotify" name="user_data_free_func" />
        </parameters>
      </method>
      <method name="WatchNameOnConnectionWithClosures" cname="g_bus_watch_name_on_connection_with_closures" shared="true">
        <return-type type="guint" />
        <parameters>
          <parameter type="GDBusConnection*" name="connection" />
          <parameter type="const-gchar*" name="name" />
          <parameter type="GBusNameWatcherFlags" name="flags" />
          <parameter type="GClosure*" name="name_appeared_closure" />
          <parameter type="GClosure*" name="name_vanished_closure" />
        </parameters>
      </method>
      <method name="WatchNameWithClosures" cname="g_bus_watch_name_with_closures" shared="true">
        <return-type type="guint" />
        <parameters>
          <parameter type="GBusType" name="bus_type" />
          <parameter type="const-gchar*" name="name" />
          <parameter type="GBusNameWatcherFlags" name="flags" />
          <parameter type="GClosure*" name="name_appeared_closure" />
          <parameter type="GClosure*" name="name_vanished_closure" />
        </parameters>
      </method>
    </class>
    <class name="Content" cname="GContent_">
      <method name="TypeCanBeExecutable" cname="g_content_type_can_be_executable" shared="true">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-gchar*" name="type" />
        </parameters>
      </method>
      <method name="TypeEquals" cname="g_content_type_equals" shared="true">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-gchar*" name="type1" />
          <parameter type="const-gchar*" name="type2" />
        </parameters>
      </method>
      <method name="TypeFromMimeType" cname="g_content_type_from_mime_type" shared="true">
        <return-type type="gchar*" />
        <parameters>
          <parameter type="const-gchar*" name="mime_type" />
        </parameters>
      </method>
      <method name="TypeGetDescription" cname="g_content_type_get_description" shared="true">
        <return-type type="gchar*" />
        <parameters>
          <parameter type="const-gchar*" name="type" />
        </parameters>
      </method>
      <method name="TypeGetIcon" cname="g_content_type_get_icon" shared="true">
        <return-type type="GIcon*" />
        <parameters>
          <parameter type="const-gchar*" name="type" />
        </parameters>
      </method>
      <method name="TypeGetMimeType" cname="g_content_type_get_mime_type" shared="true">
        <return-type type="gchar*" />
        <parameters>
          <parameter type="const-gchar*" name="type" />
        </parameters>
      </method>
      <method name="TypeGuess" cname="g_content_type_guess" shared="true">
        <return-type type="gchar*" />
        <parameters>
          <parameter type="const-gchar*" name="filename" />
          <parameter type="const-guchar*" name="data" />
          <parameter type="gsize" name="data_size" />
          <parameter type="gboolean*" name="result_uncertain" />
        </parameters>
      </method>
      <method name="TypeGuessForTree" cname="g_content_type_guess_for_tree" shared="true">
        <return-type type="gchar**" />
        <parameters>
          <parameter type="GFile*" name="root" />
        </parameters>
      </method>
      <method name="TypeIsA" cname="g_content_type_is_a" shared="true">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-gchar*" name="type" />
          <parameter type="const-gchar*" name="supertype" />
        </parameters>
      </method>
      <method name="TypeIsUnknown" cname="g_content_type_is_unknown" shared="true">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-gchar*" name="type" />
        </parameters>
      </method>
      <method name="TypesGetRegistered" cname="g_content_types_get_registered" shared="true">
        <return-type type="GList*" />
      </method>
    </class>
    <class name="Dbus" cname="GDbus_">
      <method name="AddressGetForBusSync" cname="g_dbus_address_get_for_bus_sync" shared="true">
        <return-type type="gchar*" />
        <parameters>
          <parameter type="GBusType" name="bus_type" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="AddressGetStream" cname="g_dbus_address_get_stream" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="address" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
        </parameters>
      </method>
      <method name="AddressGetStreamFinish" cname="g_dbus_address_get_stream_finish" shared="true">
        <return-type type="GIOStream*" />
        <parameters>
          <parameter type="GAsyncResult*" name="res" />
          <parameter type="gchar**" name="out_guid" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="AddressGetStreamSync" cname="g_dbus_address_get_stream_sync" shared="true">
        <return-type type="GIOStream*" />
        <parameters>
          <parameter type="const-gchar*" name="address" />
          <parameter type="gchar**" name="out_guid" />
          <parameter type="GCancellable*" name="cancellable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="ErrorEncodeGerror" cname="g_dbus_error_encode_gerror" shared="true">
        <return-type type="gchar*" />
        <parameters>
          <parameter type="const-GError*" name="error" />
        </parameters>
      </method>
      <method name="ErrorGetRemoteError" cname="g_dbus_error_get_remote_error" shared="true">
        <return-type type="gchar*" />
        <parameters>
          <parameter type="const-GError*" name="error" />
        </parameters>
      </method>
      <method name="ErrorIsRemoteError" cname="g_dbus_error_is_remote_error" shared="true">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-GError*" name="error" />
        </parameters>
      </method>
      <method name="ErrorNewForDbusError" cname="g_dbus_error_new_for_dbus_error" shared="true">
        <return-type type="GError*" />
        <parameters>
          <parameter type="const-gchar*" name="dbus_error_name" />
          <parameter type="const-gchar*" name="dbus_error_message" />
        </parameters>
      </method>
      <method name="ErrorQuark" cname="g_dbus_error_quark" shared="true">
        <return-type type="GQuark" />
      </method>
      <method name="ErrorRegisterError" cname="g_dbus_error_register_error" shared="true">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GQuark" name="error_domain" />
          <parameter type="gint" name="error_code" />
          <parameter type="const-gchar*" name="dbus_error_name" />
        </parameters>
      </method>
      <method name="ErrorRegisterErrorDomain" cname="g_dbus_error_register_error_domain" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="error_domain_quark_name" />
          <parameter type="gsize*" name="quark_volatile" />
          <parameter type="const-GDBusErrorEntry*" name="entries" />
          <parameter type="guint" name="num_entries" />
        </parameters>
      </method>
      <method name="ErrorSetDbusError" cname="g_dbus_error_set_dbus_error" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="GError**" name="error" />
          <parameter type="const-gchar*" name="dbus_error_name" />
          <parameter type="const-gchar*" name="dbus_error_message" />
          <parameter type="const-gchar*" name="format" />
          <parameter ellipsis="true" />
        </parameters>
      </method>
      <method name="ErrorSetDbusErrorValist" cname="g_dbus_error_set_dbus_error_valist" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="GError**" name="error" />
          <parameter type="const-gchar*" name="dbus_error_name" />
          <parameter type="const-gchar*" name="dbus_error_message" />
          <parameter type="const-gchar*" name="format" />
          <parameter type="va_list" name="var_args" />
        </parameters>
      </method>
      <method name="ErrorStripRemoteError" cname="g_dbus_error_strip_remote_error" shared="true">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GError*" name="error" />
        </parameters>
      </method>
      <method name="ErrorUnregisterError" cname="g_dbus_error_unregister_error" shared="true">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GQuark" name="error_domain" />
          <parameter type="gint" name="error_code" />
          <parameter type="const-gchar*" name="dbus_error_name" />
        </parameters>
      </method>
      <method name="GenerateGuid" cname="g_dbus_generate_guid" shared="true">
        <return-type type="gchar*" />
      </method>
      <method name="IsAddress" cname="g_dbus_is_address" shared="true">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-gchar*" name="string" />
        </parameters>
      </method>
      <method name="IsGuid" cname="g_dbus_is_guid" shared="true">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-gchar*" name="string" />
        </parameters>
      </method>
      <method name="IsInterfaceName" cname="g_dbus_is_interface_name" shared="true">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-gchar*" name="string" />
        </parameters>
      </method>
      <method name="IsMemberName" cname="g_dbus_is_member_name" shared="true">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-gchar*" name="string" />
        </parameters>
      </method>
      <method name="IsName" cname="g_dbus_is_name" shared="true">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-gchar*" name="string" />
        </parameters>
      </method>
      <method name="IsSupportedAddress" cname="g_dbus_is_supported_address" shared="true">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-gchar*" name="string" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="IsUniqueName" cname="g_dbus_is_unique_name" shared="true">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-gchar*" name="string" />
        </parameters>
      </method>
    </class>
    <class name="Io" cname="GIo_">
      <method name="ErrorFromErrno" cname="g_io_error_from_errno" shared="true">
        <return-type type="GIOErrorEnum" />
        <parameters>
          <parameter type="gint" name="err_no" />
        </parameters>
      </method>
      <method name="ErrorFromWin32Error" cname="g_io_error_from_win32_error" shared="true">
        <return-type type="GIOErrorEnum" />
        <parameters>
          <parameter type="gint" name="error_code" />
        </parameters>
      </method>
      <method name="ErrorQuark" cname="g_io_error_quark" shared="true">
        <return-type type="GQuark" />
      </method>
      <method name="ModulesLoadAllInDirectory" cname="g_io_modules_load_all_in_directory" shared="true">
        <return-type type="GList*" />
        <parameters>
          <parameter type="const-gchar*" name="dirname" />
        </parameters>
      </method>
      <method name="ModulesScanAllInDirectory" cname="g_io_modules_scan_all_in_directory" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="const-char*" name="dirname" />
        </parameters>
      </method>
      <method name="SchedulerCancelAllJobs" cname="g_io_scheduler_cancel_all_jobs" shared="true">
        <return-type type="void" />
      </method>
      <method name="SchedulerPushJob" cname="g_io_scheduler_push_job" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="GIOSchedulerJobFunc" name="job_func" />
          <parameter type="gpointer" name="user_data" />
          <parameter type="GDestroyNotify" name="notify" />
          <parameter type="gint" name="io_priority" />
          <parameter type="GCancellable*" name="cancellable" />
        </parameters>
      </method>
    </class>
    <class name="Global" cname="GGlobal">
      <method name="PollableSourceNew" cname="g_pollable_source_new" shared="true">
        <return-type type="GSource*" />
        <parameters>
          <parameter type="GObject*" name="pollable_stream" />
        </parameters>
      </method>
      <method name="RegistryBackendGetType" cname="g_registry_backend_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="TlsErrorQuark" cname="g_tls_error_quark" shared="true">
        <return-type type="GQuark" />
      </method>
    </class>
    <class name="Simple" cname="GSimple_">
      <method name="AsyncReportErrorInIdle" cname="g_simple_async_report_error_in_idle" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="GObject*" name="object" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
          <parameter type="GQuark" name="domain" />
          <parameter type="gint" name="code" />
          <parameter type="const-char*" name="format" />
          <parameter ellipsis="true" />
        </parameters>
      </method>
      <method name="AsyncReportGerrorInIdle" cname="g_simple_async_report_gerror_in_idle" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="GObject*" name="object" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
          <parameter type="const-GError*" name="error" />
        </parameters>
      </method>
      <method name="AsyncReportTakeGerrorInIdle" cname="g_simple_async_report_take_gerror_in_idle" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="GObject*" name="object" />
          <parameter type="GAsyncReadyCallback" name="callback" />
          <parameter type="gpointer" name="user_data" />
          <parameter type="GError*" name="error" />
        </parameters>
      </method>
    </class>
  </namespace>
</api>