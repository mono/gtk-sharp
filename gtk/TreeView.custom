// Gtk.TreeView.Custom - Gtk TreeView class customizations
//
// Authors:
//	Kristian Rietveld <kris@gtk.org>
//	Gonzalo Paniagua Javier (gonzalo@ximian.com)
//
// Copyright (c) 2002 Kristian Rietveld
// Copyright (c) 2003 Ximian, Inc. (http://www.ximian.com)
//
// This code is inserted after the automatically generated code.
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General 
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.


		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_tree_view_new_with_model(IntPtr model);

		[DllImport("libgobject-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern void g_object_ref (IntPtr raw);

		public TreeView (Gtk.TreeModel model) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (TreeView)) {
				unsafe {
					var vals = stackalloc GLib.Value[1];
					var names = stackalloc IntPtr[1];
					var param_count = 0;
					if (model != null) {
						names[param_count] = GLib.Marshaller.StringToPtrGStrdup ("model");
						vals[param_count++] = new GLib.Value (model);
					}
					CreateNativeObject (names, vals, param_count);
				}
				return;
			}
			owned = true;
			Raw = gtk_tree_view_new_with_model(model == null ? IntPtr.Zero : model.Handle);
			if (model != null)
				g_object_ref (model.Handle);
		}

		[Obsolete ("Use NodeView with NodeStores")]
		public TreeView (NodeStore store) : base (IntPtr.Zero)
		{
			if (GetType() != typeof (TreeView)) {
				unsafe {
					var vals = stackalloc GLib.Value[1];
					var names = stackalloc IntPtr[1];
					names [0] = GLib.Marshaller.StringToPtrGStrdup ("model");
					vals [0] = new GLib.Value (store);
					CreateNativeObject (names, vals, 1);
				}
				return;
			}

			owned = true;
			Raw = gtk_tree_view_new_with_model (store.Handle);
		}

		public Gdk.Color OddRowColor {
			get {
				GLib.Value value = StyleGetPropertyValue ("odd-row-color");
				Gdk.Color ret = (Gdk.Color)value;
				value.Dispose ();
				return ret;
			}
		}

		public Gdk.Color EvenRowColor {
			get {
				GLib.Value value = StyleGetPropertyValue ("even-row-color");
				Gdk.Color ret = (Gdk.Color)value;
				value.Dispose ();
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern bool gtk_tree_view_get_path_at_pos (IntPtr raw,
								  int x,
								  int y,
								  out IntPtr path,
								  out IntPtr column,
								  out int cell_x,
								  out int cell_y);

		[DllImport("libgtk-win32-2.0-0.dll", EntryPoint="gtk_tree_view_get_path_at_pos", CallingConvention=CallingConvention.Cdecl)]
		static extern bool gtk_tree_view_get_path_at_pos_intptr (IntPtr raw,
								  int x,
								  int y,
								  out IntPtr path,
								  out IntPtr column,
								  IntPtr cell_x,
								  IntPtr cell_y);

		public bool GetPathAtPos (int x, int y, out Gtk.TreePath path, out Gtk.TreeViewColumn column, out int cell_x, out int cell_y)
		{
			IntPtr pathHandle;
			IntPtr columnHandle;
			bool raw_ret = gtk_tree_view_get_path_at_pos (Handle, x, y, out pathHandle, out columnHandle, out cell_x, out cell_y);
			if (raw_ret) {
				column = (Gtk.TreeViewColumn) GLib.Object.GetObject (columnHandle, false);
				path = (Gtk.TreePath) GLib.Opaque.GetOpaque (pathHandle, typeof (Gtk.TreePath), true);
			} else {
				path = null;
				column = null;
			}

			return raw_ret;
		}


		public bool GetPathAtPos (int x, int y, out Gtk.TreePath path)
		{
			IntPtr pathHandle;
			IntPtr columnHandle;
			bool raw_ret = gtk_tree_view_get_path_at_pos_intptr (Handle, x, y, out pathHandle, out columnHandle, IntPtr.Zero, IntPtr.Zero);
			if (raw_ret)
				path = (Gtk.TreePath) GLib.Opaque.GetOpaque (pathHandle, typeof (Gtk.TreePath), true);
			else
				path = null;

			return raw_ret;
		}

		public bool GetPathAtPos (int x, int y, out Gtk.TreePath path, out Gtk.TreeViewColumn column)
		{
			IntPtr pathHandle;
			IntPtr columnHandle;
			bool raw_ret = gtk_tree_view_get_path_at_pos_intptr (Handle, x, y, out pathHandle, out columnHandle, IntPtr.Zero, IntPtr.Zero);
			if (raw_ret) {
				path = (Gtk.TreePath) GLib.Opaque.GetOpaque (pathHandle, typeof (Gtk.TreePath), true);
				column = (Gtk.TreeViewColumn) GLib.Object.GetObject (columnHandle, false);
			} else {
				path = null;
				column = null;
			}

			return raw_ret;
		}

		public TreeViewColumn AppendColumn (string title, CellRenderer cell, TreeCellDataFunc cell_data) 
		{
			Gtk.TreeViewColumn col = new Gtk.TreeViewColumn ();
			col.Title = title;
			col.PackStart (cell, true);
			col.SetCellDataFunc (cell, cell_data);
			
			AppendColumn (col);
			return col;
		}
		
		public TreeViewColumn AppendColumn (string title, CellRenderer cell, CellLayoutDataFunc cell_data) {
			Gtk.TreeViewColumn col = new Gtk.TreeViewColumn ();
			col.Title = title;
			col.PackStart (cell, true);
			col.SetCellDataFunc (cell, cell_data);
			
			AppendColumn (col);
			return col;
		}
		
		public Gtk.TreeViewColumn AppendColumn (string title, Gtk.CellRenderer cell, params object[] attrs) {
			Gtk.TreeViewColumn col = new Gtk.TreeViewColumn (title, cell, attrs);
			AppendColumn (col);
			return col;
		}

		public int InsertColumn (int pos, string title, CellRenderer cell, CellLayoutDataFunc cell_data) 
		{
			TreeViewColumn col = new TreeViewColumn ();
			col.Title = title;
			col.PackStart (cell, true);
			col.SetCellDataFunc (cell, cell_data);
			return InsertColumn (col, pos);
		}
		
		public int InsertColumn (int pos, string title, CellRenderer cell, params object[] attrs) 
		{
			TreeViewColumn col = new TreeViewColumn (title, cell, attrs);
			return InsertColumn (col, pos);
		}

		[Obsolete ("Replaced by SearchEqualFunc property.")]
		public void SetSearchEqualFunc (TreeViewSearchEqualFunc search_equal_func, IntPtr search_user_data, DestroyNotify search_destroy) 
		{
			SearchEqualFunc = search_equal_func;
		}

		[Obsolete ("Replaced by DestroyCountFunc property.")]
		public void SetDestroyCountFunc (TreeDestroyCountFunc func, IntPtr data, DestroyNotify destroy) 
		{
			DestroyCountFunc = func;
		}

		[Obsolete ("Replaced by ColumnDragFunction property.")]
		public void SetColumnDragFunction (TreeViewColumnDropFunc func, IntPtr user_data, DestroyNotify destroy) 
		{
			ColumnDragFunction = func;
		}

		[Obsolete ("Replaced by VisibleRect property.")]
		public void GetVisibleRect(Gdk.Rectangle visible_rect) {
			;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern GtkSharp.TreeViewRowSeparatorFuncNative gtk_tree_view_get_row_separator_func(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_view_set_row_separator_func(IntPtr raw, GtkSharp.TreeViewRowSeparatorFuncNative func, IntPtr data, GLib.DestroyNotify destroy);

		WeakReference<Gtk.TreeViewRowSeparatorFunc> lastRowSeparatorFunc = new WeakReference<Gtk.TreeViewRowSeparatorFunc> (null);
		public Gtk.TreeViewRowSeparatorFunc RowSeparatorFunc { 
			get {
				GtkSharp.TreeViewRowSeparatorFuncNative raw_ret = gtk_tree_view_get_row_separator_func(Handle);
				if (raw_ret == GtkSharp.TreeViewRowSeparatorFuncWrapper.NativeDelegate) {
					Gtk.TreeViewRowSeparatorFunc result;
					lastRowSeparatorFunc.TryGetTarget (out result);
					return result;
				}

				if (raw_ret == null)
					return null;

				Gtk.TreeViewRowSeparatorFunc ret = new GtkSharp.TreeViewRowSeparatorFuncInvoker (raw_ret).Handler;
				return ret;
			}
			set {
				Gtk.Application.AssertMainThread();
				IntPtr data;
				GLib.DestroyNotify destroy;
				if (value == null) {
					data = IntPtr.Zero;
					destroy = null;
				} else {
					data = (IntPtr) GCHandle.Alloc (value);
					destroy = GLib.DestroyHelper.NotifyHandler;
				}
				lastRowSeparatorFunc.SetTarget (value);
				gtk_tree_view_set_row_separator_func(Handle, GtkSharp.TreeViewRowSeparatorFuncWrapper.NativeDelegate, data, destroy);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern GtkSharp.TreeViewSearchEqualFuncNative gtk_tree_view_get_search_equal_func(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_view_set_search_equal_func(IntPtr raw, GtkSharp.TreeViewSearchEqualFuncNative search_equal_func, IntPtr search_user_data, GLib.DestroyNotify search_destroy);

		WeakReference<Gtk.TreeViewSearchEqualFunc> lastSearchEqualFunc = new WeakReference<Gtk.TreeViewSearchEqualFunc> (null);
		public Gtk.TreeViewSearchEqualFunc SearchEqualFunc { 
			get {
				GtkSharp.TreeViewSearchEqualFuncNative raw_ret = gtk_tree_view_get_search_equal_func(Handle);
				if (raw_ret == GtkSharp.TreeViewSearchEqualFuncWrapper.NativeDelegate) {
					Gtk.TreeViewSearchEqualFunc result;
					lastSearchEqualFunc.TryGetTarget (out result);
					return result;
				}

				if (raw_ret == null)
					return null;

				Gtk.TreeViewSearchEqualFunc ret = new GtkSharp.TreeViewSearchEqualFuncInvoker (raw_ret).Handler;
				return ret;
			}
			set {
				Gtk.Application.AssertMainThread();
				IntPtr search_user_data;
				GLib.DestroyNotify search_destroy;
				if (value == null) {
					search_user_data = IntPtr.Zero;
					search_destroy = null;
				} else {
					search_user_data = (IntPtr) GCHandle.Alloc (value);
					search_destroy = GLib.DestroyHelper.NotifyHandler;
				}
				lastSearchEqualFunc.SetTarget (value);
				gtk_tree_view_set_search_equal_func(Handle, GtkSharp.TreeViewSearchEqualFuncWrapper.NativeDelegate, search_user_data, search_destroy);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern GtkSharp.TreeViewSearchPositionFuncNative gtk_tree_view_get_search_position_func(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_view_set_search_position_func(IntPtr raw, GtkSharp.TreeViewSearchPositionFuncNative func, IntPtr data, GLib.DestroyNotify destroy);

		WeakReference<Gtk.TreeViewSearchPositionFunc> lastSearchPositionFunc = new WeakReference<Gtk.TreeViewSearchPositionFunc> (null);
		public Gtk.TreeViewSearchPositionFunc SearchPositionFunc { 
			get {
				GtkSharp.TreeViewSearchPositionFuncNative raw_ret = gtk_tree_view_get_search_position_func(Handle);
				if (raw_ret == GtkSharp.TreeViewSearchPositionFuncWrapper.NativeDelegate) {
					Gtk.TreeViewSearchPositionFunc result;
					lastSearchPositionFunc.TryGetTarget (out result);
					return result;
				}

				if (raw_ret == null)
					return null;

				Gtk.TreeViewSearchPositionFunc ret = new GtkSharp.TreeViewSearchPositionFuncInvoker (raw_ret).Handler;
				return ret;
			}
			set {
				Gtk.Application.AssertMainThread();
				IntPtr data;
				GLib.DestroyNotify destroy;
				if (value == null) {
					data = IntPtr.Zero;
					destroy = null;
				} else {
					data = (IntPtr) GCHandle.Alloc (value);
					destroy = GLib.DestroyHelper.NotifyHandler;
				}
				lastSearchPositionFunc.SetTarget (value);
				gtk_tree_view_set_search_position_func(Handle, GtkSharp.TreeViewSearchPositionFuncWrapper.NativeDelegate, data, destroy);
			}
		}
