// Gtk.Object.custom - Gtk Object class customizations
//
// Author: Mike Kestner <mkestner@novell.com>
//
// Copyright (c) 2002-2003 Mike Kestner
// Copyright (c) 2007 Novell, Inc.
//
// This code is inserted after the automatically generated code.
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General 
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.

		static System.Collections.Generic.Dictionary<IntPtr, EventHandler> destroy_handlers;
		static System.Collections.Generic.Dictionary<IntPtr, EventHandler> DestroyHandlers {
			get {
				if (destroy_handlers == null)
					destroy_handlers = new System.Collections.Generic.Dictionary<IntPtr, EventHandler> (IntPtrEqualityComparer.Instance);
				return destroy_handlers;
			}
		}

		private static void OverrideDestroyed (GLib.GType gtype)
		{
			// Do Nothing.  We don't want to hook into the native vtable.
			// We will manually invoke the VM on signal invocation. The signal
			// always raises before the default handler because this signal
			// is RUN_CLEANUP.
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.Object), ConnectionMethod="OverrideDestroyed")]
		protected virtual void OnDestroyed ()
		{
			EventHandler handler;
			if (DestroyHandlers.TryGetValue (Handle, out handler)) {
				handler (this, EventArgs.Empty);
				DestroyHandlers.Remove (Handle);
			}
		}

		[GLib.Signal("destroy")]
		public event EventHandler Destroyed {
			add {
				EventHandler handler;
				DestroyHandlers.TryGetValue (Handle, out handler);
				DestroyHandlers [Handle] = (EventHandler)Delegate.Combine (handler, value);
			}
			remove {
				EventHandler handler;
				DestroyHandlers.TryGetValue (Handle, out handler);
				handler = (EventHandler) Delegate.Remove (handler, value);
				if (handler != null)
					DestroyHandlers [Handle] = handler;
				else
					DestroyHandlers.Remove (Handle);
			}
		}

		event EventHandler InternalDestroyed {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "destroy");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "destroy");
				sig.RemoveDelegate (value);
			}
		}

		static void NativeDestroy (object o, EventArgs args)
		{
			Gtk.Object obj = o as Gtk.Object;
			if (obj == null)
				return;
			obj.OnDestroyed ();
			obj.FreeSignals ();
		}
		
		static EventHandler native_destroy_handler;
		static EventHandler NativeDestroyHandler {
			get {
				if (native_destroy_handler == null)
					native_destroy_handler = new EventHandler (NativeDestroy);
				return native_destroy_handler;
			}
		}

		public override void Dispose ()
		{
			// Don't call base.Dispose because it's calling g_object_unref
			// which is done by gtk_object_destroy for Gtk.Object

			//Should line below be uncommented?(but it breaks backward compatiblity)
			//throw new InvalidOperationException("Calling Dispose is invalid for Gtk objects. Call Destroy().");
		}

		protected override IntPtr Raw {
			get {
				return base.Raw;
			}
			set {
				base.Raw = value;
				if (value != IntPtr.Zero)
					InternalDestroyed += NativeDestroyHandler;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		private static extern void gtk_object_destroy (IntPtr raw);

		public virtual void Destroy ()
		{
			if (Handle == IntPtr.Zero)
				return;
			if (IsFloating)//We have to check or we will increment ref_count
				IsFloating = false;
			gtk_object_destroy (Handle);
			InternalDestroyed -= NativeDestroyHandler;
		}

		[DllImport("gtksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
		private static extern bool gtksharp_object_is_floating (IntPtr raw);

		[DllImport("gtksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
		private static extern bool gtksharp_object_set_floating (IntPtr raw, bool val);

		public bool IsFloating {
			get {
				return gtksharp_object_is_floating (Handle);
			}
			set {
				gtksharp_object_set_floating (Handle, value);
			}
		}

