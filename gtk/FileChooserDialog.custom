//  Gtk.FileChooserDialog.custom - Gtk FileChooserDialog customizations
//
//  Authors:  Todd Berman  <tberman@off.net>
//            Jeroen Zwartepoorte  <jeroen@xs4all.nl>
//            Mike Kestner  <mkestner@novell.com>
//
//  Copyright (c) 2004 Todd Berman, Jeroen Zwartepoorte
//  Copyright (c) 2005 Novell, Inc.
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.


		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern IntPtr gtk_file_chooser_dialog_new(IntPtr title, IntPtr parent, int action, IntPtr nil);

		public FileChooserDialog (string title, Window parent, FileChooserAction action, params object[] button_data) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (FileChooserDialog)) {
				CreateNativeObject (new IntPtr[0], new GLib.Value[0], 0);
				Title = title;
				if (parent != null)
					TransientFor = parent;
				Action = action;
			} else {
				owned = true;
				IntPtr native = GLib.Marshaller.StringToPtrGStrdup (title);
				Raw = gtk_file_chooser_dialog_new (native, parent == null ? IntPtr.Zero : parent.Handle, (int)action, IntPtr.Zero);
				GLib.Marshaller.Free (native);
			}

			for (int i = 0; i < button_data.Length - 1; i += 2)
				AddButton ((string) button_data [i], (int) button_data [i + 1]);
		}
		
		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern IntPtr gtk_file_chooser_dialog_new_with_backend(IntPtr title, IntPtr parent, int action, IntPtr backend, IntPtr nil);
		
		public FileChooserDialog (string backend, string title, Window parent, FileChooserAction action, params object[] button_data) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (FileChooserDialog)) {
				CreateNativeObject (new IntPtr[] { GLib.Marshaller.StringToPtrGStrdup ("file-system-backend") }, new GLib.Value[] { new GLib.Value (backend) }, 1);
				Title = title;
				if (parent != null)
					TransientFor = parent;
				Action = action;
			} else {
				owned = true;
				IntPtr ntitle = GLib.Marshaller.StringToPtrGStrdup (title);
				IntPtr nbackend = GLib.Marshaller.StringToPtrGStrdup (backend);
				Raw = gtk_file_chooser_dialog_new_with_backend (ntitle, parent == null ? IntPtr.Zero : parent.Handle, (int)action, nbackend, IntPtr.Zero);
				GLib.Marshaller.Free (ntitle);
				GLib.Marshaller.Free (nbackend);
			}

			for (int i = 0; i < button_data.Length - 1; i += 2)
				AddButton ((string) button_data [i], (int) button_data [i + 1]);
		}

		bool IsWindowsPlatform {
			get {
				switch (Environment.OSVersion.Platform) {
				case PlatformID.Win32NT:
				case PlatformID.Win32S:
				case PlatformID.Win32Windows:
				case PlatformID.WinCE:
					return true;
				default:
					return false;
				}
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern IntPtr gtk_file_chooser_get_filenames (IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern IntPtr gtk_file_chooser_get_filenames_utf8 (IntPtr raw);

		public string[] Filenames {
			get {
				IntPtr raw_ret;
				if (IsWindowsPlatform)
					raw_ret = gtk_file_chooser_get_filenames_utf8 (Handle);
				else
					raw_ret = gtk_file_chooser_get_filenames (Handle);
				GLib.SList list = new GLib.SList (raw_ret, typeof (string), true, true);
				return GLib.Marshaller.ListToArray<string> (list);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern IntPtr gtk_file_chooser_list_shortcut_folders (IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern IntPtr gtk_file_chooser_list_shortcut_folders_utf8 (IntPtr raw);

		public string[] ShortcutFolders {
			get {
				IntPtr raw_ret;
				if (IsWindowsPlatform)
					raw_ret = gtk_file_chooser_list_shortcut_folders_utf8 (Handle);
				else
					raw_ret = gtk_file_chooser_list_shortcut_folders (Handle);
				GLib.SList list = new GLib.SList (raw_ret, typeof (string), true, true);
				return GLib.Marshaller.ListToArray<string> (list);
			}
		}

