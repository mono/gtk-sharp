// AboutDialog.custom - customizations to Gtk.AboutDialog
//
// Authors: Mike Kestner  <mkestner@ximian.com>
//
// Copyright (c) 2007 Novell, Inc.
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General 
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.

		[Obsolete("Use ProgramName instead")]
		[GLib.Property ("program-name")]
		public string Name { 
			get {
				return ProgramName;
			}
			set {
				ProgramName = value;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern GtkSharp.AboutDialogActivateLinkFuncNative gtk_about_dialog_set_url_hook(GtkSharp.AboutDialogActivateLinkFuncNative func, IntPtr data, GLib.DestroyNotify destroy);

		static WeakReference<Gtk.AboutDialogActivateLinkFunc> urlManagedFunc = new WeakReference<Gtk.AboutDialogActivateLinkFunc> (null);
		public static Gtk.AboutDialogActivateLinkFunc SetUrlHook(Gtk.AboutDialogActivateLinkFunc func) {
			Gtk.Application.AssertMainThread();
			IntPtr data;
			GLib.DestroyNotify destroy;	

			Gtk.AboutDialogActivateLinkFunc toRet;
			urlManagedFunc.TryGetTarget (out toRet);

			if (func == null) {
				data = IntPtr.Zero;
				destroy = null;
			} else {
				data = (IntPtr) GCHandle.Alloc (func);
				destroy = GLib.DestroyHelper.NotifyHandler;
			}
			urlManagedFunc.SetTarget (func);

			var raw_ret = gtk_about_dialog_set_url_hook(GtkSharp.AboutDialogActivateLinkFuncWrapper.NativeDelegate, data, destroy);
			if (raw_ret == GtkSharp.AboutDialogActivateLinkFuncWrapper.NativeDelegate)
				return toRet;

			if (raw_ret == null)
				return null;

			Gtk.AboutDialogActivateLinkFunc ret = new GtkSharp.AboutDialogActivateLinkFuncInvoker (raw_ret).Handler;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern GtkSharp.AboutDialogActivateLinkFuncNative gtk_about_dialog_set_email_hook(GtkSharp.AboutDialogActivateLinkFuncNative func, IntPtr data, GLib.DestroyNotify destroy);

		static WeakReference<Gtk.AboutDialogActivateLinkFunc> emailManagedFunc = new WeakReference<Gtk.AboutDialogActivateLinkFunc> (null);
		public static Gtk.AboutDialogActivateLinkFunc SetEmailHook(Gtk.AboutDialogActivateLinkFunc func) {
			Gtk.Application.AssertMainThread();
			IntPtr data;
			GLib.DestroyNotify destroy;

			Gtk.AboutDialogActivateLinkFunc toRet;
			emailManagedFunc.TryGetTarget (out toRet);

			if (func == null) {
				data = IntPtr.Zero;
				destroy = null;
			} else {
				data = (IntPtr) GCHandle.Alloc (func);
				destroy = GLib.DestroyHelper.NotifyHandler;
			}
			emailManagedFunc.SetTarget (func);

			var raw_ret = gtk_about_dialog_set_email_hook(GtkSharp.AboutDialogActivateLinkFuncWrapper.NativeDelegate, data, destroy);
			if (raw_ret == GtkSharp.AboutDialogActivateLinkFuncWrapper.NativeDelegate)
				return toRet;

			if (raw_ret == null)
				return null;

			Gtk.AboutDialogActivateLinkFunc ret = new GtkSharp.AboutDialogActivateLinkFuncInvoker (raw_ret).Handler;
			return ret;
		}

