//
// Gtk.Style.custom - Gtk Style class customizations
//
// Authors: Rachel Hestilow <hestilow@ximian.com> 
//          Radek Doulik <rodo@matfyz.cz> 
//          Mike Kestner <mkestner@novell.com>
//
// Copyright (C) 2002, 2003 Rachel Hestilow, Radek Doulik
// Copyright (C) 2005 Novell, Inc.
//
// This code is inserted after the automatically generated code.
//
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General 
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.

		
static Gdk.GC EnsureGC (IntPtr raw) {
	if (raw == IntPtr.Zero)
		return null;
	Gdk.GC ret = (Gdk.GC) GLib.Object.GetObject (raw, false);
	if (ret == null)
		ret = new Gdk.GC (raw);
	return ret;
}

[DllImport("gtksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
static extern IntPtr gtksharp_gtk_style_get_white_gc (IntPtr style);

public Gdk.GC WhiteGC {
	get { return EnsureGC (gtksharp_gtk_style_get_white_gc (Handle)); }
}

[DllImport("gtksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
static extern IntPtr gtksharp_gtk_style_get_black_gc (IntPtr style);

public Gdk.GC BlackGC {
	get { return EnsureGC (gtksharp_gtk_style_get_black_gc (Handle)); }
}

[DllImport("gtksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
static extern IntPtr gtksharp_gtk_style_get_fg_gc (IntPtr style, int i);

public Gdk.GC ForegroundGC (StateType state)
{
	IntPtr raw = gtksharp_gtk_style_get_fg_gc (Handle, (int) state);
	return EnsureGC (raw);
}

[DllImport("gtksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
static extern IntPtr gtksharp_gtk_style_set_fg_gc (IntPtr style, int i, IntPtr gc);

public void SetForegroundGC (StateType state, Gdk.GC gc)
{
		gtksharp_gtk_style_set_fg_gc (Handle, (int) state, gc.Handle);
}

public Gdk.GC[] ForegroundGCs {
	get {
		Gdk.GC[] ret = new Gdk.GC[5];
		for (int i = 0; i < 5; i++)
			ret[i] = EnsureGC (gtksharp_gtk_style_get_fg_gc (Handle, i));
		return ret;
	}
}

[DllImport("gtksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
static extern IntPtr gtksharp_gtk_style_get_bg_gc (IntPtr style, int i);

public Gdk.GC BackgroundGC (StateType state)
{
		IntPtr raw = gtksharp_gtk_style_get_bg_gc (Handle, (int) state);
		return EnsureGC (raw);
}

[DllImport("gtksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
static extern IntPtr gtksharp_gtk_style_set_bg_gc (IntPtr style, int i, IntPtr gc);

public void SetBackgroundGC (StateType state, Gdk.GC gc)
{
		gtksharp_gtk_style_set_bg_gc (Handle, (int) state, gc.Handle);
}

public Gdk.GC[] BackgroundGCs {
	get {
		Gdk.GC[] ret = new Gdk.GC[5];
		for (int i = 0; i < 5; i++)
			ret[i] = EnsureGC (gtksharp_gtk_style_get_bg_gc (Handle, i));
		return ret;
	}
}

[DllImport("gtksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
static extern IntPtr gtksharp_gtk_style_get_base_gc (IntPtr style, int i);

public Gdk.GC BaseGC (StateType state)
{
	IntPtr raw = gtksharp_gtk_style_get_base_gc (Handle, (int) state);
	return EnsureGC (raw);
}

[DllImport("gtksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
static extern IntPtr gtksharp_gtk_style_set_base_gc (IntPtr style, int i, IntPtr gc);

public void SetBaseGC (StateType state, Gdk.GC gc)
{
		gtksharp_gtk_style_set_base_gc (Handle, (int) state, gc.Handle);
}

[DllImport("gtksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
static extern IntPtr gtksharp_gtk_style_get_text_gc (IntPtr style, int i);

public Gdk.GC TextGC (StateType state)
{
	IntPtr raw = gtksharp_gtk_style_get_text_gc (Handle, (int) state);
	return EnsureGC (raw);
}

[DllImport("gtksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
static extern IntPtr gtksharp_gtk_style_set_text_gc (IntPtr style, int i, IntPtr gc);

public void SetTextGC (StateType state, Gdk.GC gc)
{
		gtksharp_gtk_style_set_text_gc (Handle, (int) state, gc.Handle);
}

[DllImport("gtksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
static extern IntPtr gtksharp_gtk_style_get_text_aa_gc (IntPtr style, int i);

public Gdk.GC TextAAGC (StateType state)
{
	IntPtr raw = gtksharp_gtk_style_get_text_aa_gc (Handle, (int) state);
	return EnsureGC (raw);
}

[DllImport("gtksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
static extern IntPtr gtksharp_gtk_style_set_text_aa_gc (IntPtr style, int i, IntPtr gc);

public void SetTextAAGC (StateType state, Gdk.GC gc)
{
		gtksharp_gtk_style_set_text_aa_gc (Handle, (int) state, gc.Handle);
}

[DllImport("gtksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
static extern IntPtr gtksharp_gtk_style_get_light_gc (IntPtr style, int i);

public Gdk.GC LightGC (StateType state)
{
	IntPtr raw = gtksharp_gtk_style_get_light_gc (Handle, (int) state);
	return EnsureGC (raw);
}

[DllImport("gtksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
static extern IntPtr gtksharp_gtk_style_set_light_gc (IntPtr style, int i, IntPtr gc);

public void SetLightGC (StateType state, Gdk.GC gc)
{
		gtksharp_gtk_style_set_light_gc (Handle, (int) state, gc.Handle);
}

[DllImport("gtksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
static extern IntPtr gtksharp_gtk_style_get_dark_gc (IntPtr style, int i);

public Gdk.GC DarkGC (StateType state)
{
	IntPtr raw = gtksharp_gtk_style_get_dark_gc (Handle, (int) state);
	return EnsureGC (raw);
}

[DllImport("gtksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
static extern IntPtr gtksharp_gtk_style_set_dark_gc (IntPtr style, int i, IntPtr gc);

public void SetDarkGC (StateType state, Gdk.GC gc)
{
		gtksharp_gtk_style_set_dark_gc (Handle, (int) state, gc.Handle);
}

[DllImport("gtksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
static extern IntPtr gtksharp_gtk_style_get_mid_gc (IntPtr style, int i);

public Gdk.GC MidGC (StateType state)
{
	IntPtr raw = gtksharp_gtk_style_get_mid_gc (Handle, (int) state);
	return EnsureGC (raw);
}

[DllImport("gtksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
static extern IntPtr gtksharp_gtk_style_set_mid_gc (IntPtr style, int i, IntPtr gc);

public void SetMidGC (StateType state, Gdk.GC gc)
{
		gtksharp_gtk_style_set_mid_gc (Handle, (int) state, gc.Handle);
}

[DllImport("gtksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
static extern IntPtr gtksharp_gtk_style_get_bg (IntPtr style, int i);

public Gdk.Color Background (StateType state)
{
	IntPtr raw = gtksharp_gtk_style_get_bg (Handle, (int) state);
	return Gdk.Color.New (raw);
}

public Gdk.Color[] Backgrounds {
	get {
		Gdk.Color[] ret = new Gdk.Color[5];
		for (int i = 0; i < 5; i++)
			ret[i] = Gdk.Color.New (gtksharp_gtk_style_get_bg (Handle, i));
		return ret;
	}
}

[DllImport("gtksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
static extern IntPtr gtksharp_gtk_style_get_fg (IntPtr style, int i);

public Gdk.Color Foreground (StateType state)
{
	IntPtr raw = gtksharp_gtk_style_get_fg (Handle, (int) state);
	return Gdk.Color.New (raw);
}

public Gdk.Color[] Foregrounds {
	get {
		Gdk.Color[] ret = new Gdk.Color[5];
		for (int i = 0; i < 5; i++)
			ret[i] = Gdk.Color.New (gtksharp_gtk_style_get_fg (Handle, i));
		return ret;
	}
}

[DllImport("gtksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
static extern IntPtr gtksharp_gtk_style_get_text (IntPtr style, int i);

public Gdk.Color Text (StateType state)
{
	IntPtr raw = gtksharp_gtk_style_get_text (Handle, (int) state);
	return Gdk.Color.New (raw);
}

public Gdk.Color[] TextColors {
	get {
		Gdk.Color[] ret = new Gdk.Color[5];
		for (int i = 0; i < 5; i++)
			ret[i] = Gdk.Color.New (gtksharp_gtk_style_get_text (Handle, i));
		return ret;
	}
}

[DllImport("gtksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
static extern IntPtr gtksharp_gtk_style_get_base (IntPtr style, int i);

public Gdk.Color Base (StateType state)
{
	IntPtr raw = gtksharp_gtk_style_get_base (Handle, (int) state);
	return Gdk.Color.New (raw);
}

public Gdk.Color[] BaseColors {
	get {
		Gdk.Color[] ret = new Gdk.Color[5];
		for (int i = 0; i < 5; i++)
			ret[i] = Gdk.Color.New (gtksharp_gtk_style_get_base (Handle, i));
		return ret;
	}
}

[DllImport("gtksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
static extern IntPtr gtksharp_gtk_style_get_light (IntPtr style, int i);

public Gdk.Color Light (StateType state)
{
	IntPtr raw = gtksharp_gtk_style_get_light (Handle, (int) state);
	return Gdk.Color.New (raw);
}

public Gdk.Color[] LightColors {
	get {
		Gdk.Color[] ret = new Gdk.Color[5];
		for (int i = 0; i < 5; i++)
			ret[i] = Gdk.Color.New (gtksharp_gtk_style_get_light (Handle, i));
		return ret;
	}
}

[DllImport("gtksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
static extern IntPtr gtksharp_gtk_style_get_mid (IntPtr style, int i);

public Gdk.Color Mid (StateType state)
{
	IntPtr raw = gtksharp_gtk_style_get_mid (Handle, (int) state);
	return Gdk.Color.New (raw);
}

public Gdk.Color[] MidColors {
	get {
		Gdk.Color[] ret = new Gdk.Color[5];
		for (int i = 0; i < 5; i++)
			ret[i] = Gdk.Color.New (gtksharp_gtk_style_get_mid (Handle, i));
		return ret;
	}
}

[DllImport("gtksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
static extern IntPtr gtksharp_gtk_style_get_dark (IntPtr style, int i);

public Gdk.Color Dark (StateType state)
{
	IntPtr raw = gtksharp_gtk_style_get_dark (Handle, (int) state);
	return Gdk.Color.New (raw);
}

public Gdk.Color[] DarkColors {
	get {
		Gdk.Color[] ret = new Gdk.Color[5];
		for (int i = 0; i < 5; i++)
			ret[i] = Gdk.Color.New (gtksharp_gtk_style_get_dark (Handle, i));
		return ret;
	}
}

[DllImport("gtksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
static extern int gtksharp_gtk_style_get_thickness (IntPtr style, int x_axis);
[DllImport("gtksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
static extern void gtksharp_gtk_style_set_thickness (IntPtr style, int value);

public int XThickness {
	get {
		return gtksharp_gtk_style_get_thickness (Handle, 0);
	}

	set {
		gtksharp_gtk_style_set_thickness (Handle, value);
	}
}

public int YThickness {
	get {
		return gtksharp_gtk_style_get_thickness (Handle, 1);
	}

	set {
		gtksharp_gtk_style_set_thickness (Handle, -value);
	}
}

[DllImport("gtksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
static extern IntPtr gtksharp_gtk_style_get_font_description (IntPtr style);

public Pango.FontDescription FontDescription {
	get {
		IntPtr Raw = gtksharp_gtk_style_get_font_description (Handle);

		if (Raw == IntPtr.Zero)
			return null;
		Pango.FontDescription ret = (Pango.FontDescription) GLib.Opaque.GetOpaque (Raw, typeof (Pango.FontDescription), false);
		if (ret == null)
			ret = new Pango.FontDescription (Raw);
		return ret;
	}
}

[DllImport("gtksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
static extern IntPtr gtksharp_gtk_style_get_bg_pixmap (IntPtr style, int state);

[DllImport("gtksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
static extern void gtksharp_gtk_style_set_bg_pixmap (IntPtr style, int state, IntPtr pixmap);

public Gdk.Pixmap BgPixmap (StateType state)
{
	IntPtr raw = gtksharp_gtk_style_get_bg_pixmap (Handle, (int) state);
	return GLib.Object.GetObject (raw) as Gdk.Pixmap;
}

public Gdk.Pixmap[] BgPixmaps {
	get {
		Gdk.Pixmap[] ret = new Gdk.Pixmap [5];
		for (int i = 0; i < 5; i++)
			ret [i] = GLib.Object.GetObject (gtksharp_gtk_style_get_dark (Handle, i)) as Gdk.Pixmap;
		return ret;
	}
}

public void SetBgPixmap (StateType state, Gdk.Pixmap pixmap)
{
		gtksharp_gtk_style_set_bg_pixmap (Handle, (int) state, pixmap == null ? IntPtr.Zero : pixmap.Handle);
}

