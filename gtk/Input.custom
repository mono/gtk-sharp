// Gtk.Input.custom - Gtk Input class customizations
//
// Author: Mike Kestner <mkestner@novell.com>
//
// Copyright (c) 2005 Novell, Inc.
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.


		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention=CallingConvention.Cdecl)]
		static extern uint gtk_input_add_full(int source, int condition, InputFunctionNative function, GtkSharp.CallbackMarshalNative marshal, IntPtr data, GLib.DestroyNotify destroy);

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void InputFunctionNative(IntPtr data, int source, int condition);

		class InputProxy {

			Gdk.InputFunction function;
			Gtk.CallbackMarshal marshal;
			IntPtr data;
			DestroyNotify destroy;

			public InputProxy (Gdk.InputFunction function, Gtk.CallbackMarshal marshal, IntPtr data, DestroyNotify destroy)
			{
				this.marshal = marshal;
				this.function = function;
				this.destroy = destroy;
				this.data = data;
			}

			static void OnDestroy (IntPtr data)
			{
				var gch = (GCHandle)data;
				var proxy = (InputProxy)gch.Target;

				if (proxy.destroy != null)
					proxy.destroy ();

				gch.Free ();
			}

			static void OnInputFunction (IntPtr data, int source, int condition)
			{
				var gch = (GCHandle)data;
				var proxy = (InputProxy)gch.Target;

				try {
					proxy.function (data, source, (Gdk.InputCondition)condition);
				} catch (Exception e) {
					GLib.ExceptionManager.RaiseUnhandledException (e, false);
				}
			}

			static void OnCallbackMarshal (IntPtr objekt, IntPtr data, uint n_args, IntPtr args)
			{
				var gch = (GCHandle)data;
				var proxy = (InputProxy)gch.Target;

				try {
					proxy.marshal (GLib.Object.GetObject (objekt) as Gtk.Object, proxy.data, n_args, Gtk.Arg.New (args));
				} catch (Exception e) {
					GLib.ExceptionManager.RaiseUnhandledException (e, false);
				}
			}

			public static GtkSharp.CallbackMarshalNative MarshalHandler = new GtkSharp.CallbackMarshalNative (OnCallbackMarshal);
			public static InputFunctionNative FunctionHandler = new InputFunctionNative (OnInputFunction);
			public static GLib.DestroyNotify DestroyHandler = new GLib.DestroyNotify (OnDestroy);
		}

		[Obsolete]
		public static uint AddFull(int source, Gdk.InputCondition condition, Gdk.InputFunction function, Gtk.CallbackMarshal marshal, IntPtr data, Gtk.DestroyNotify destroy) {
			InputProxy proxy = new InputProxy (function, marshal, data, destroy);
			GCHandle gch = GCHandle.Alloc (proxy);
			return gtk_input_add_full (source, (int) condition, InputProxy.FunctionHandler, InputProxy.MarshalHandler, (IntPtr) gch, InputProxy.DestroyHandler);
		}
