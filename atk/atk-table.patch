--- generated/ColumnDeletedHandler.cs	2009-10-06 13:41:52.000000000 -0700
+++ ColumnDeletedHandler.cs	2009-10-06 14:03:40.000000000 -0700
@@ -1,5 +1,6 @@
-// This file was generated by the Gtk# code generator.
-// Any changes made will be lost if regenerated.
+// This file was auto-generated at one time, but is hardcoded here as part of the fix
+// for the AtkTable interface;  see https://bugzilla.novell.com/show_bug.cgi?id=512477
+// The generated code may have been modified as part of this fix; see atk-table.patch
 
 namespace Atk {
 
--- generated/ColumnInsertedHandler.cs	2009-10-06 13:41:52.000000000 -0700
+++ ColumnInsertedHandler.cs	2009-10-06 14:03:55.000000000 -0700
@@ -1,5 +1,6 @@
-// This file was generated by the Gtk# code generator.
-// Any changes made will be lost if regenerated.
+// This file was auto-generated at one time, but is hardcoded here as part of the fix
+// for the AtkTable interface;  see https://bugzilla.novell.com/show_bug.cgi?id=512477
+// The generated code may have been modified as part of this fix; see atk-table.patch
 
 namespace Atk {
 
--- generated/RowDeletedHandler.cs	2009-10-06 13:41:52.000000000 -0700
+++ RowDeletedHandler.cs	2009-10-06 14:04:00.000000000 -0700
@@ -1,5 +1,6 @@
-// This file was generated by the Gtk# code generator.
-// Any changes made will be lost if regenerated.
+// This file was auto-generated at one time, but is hardcoded here as part of the fix
+// for the AtkTable interface;  see https://bugzilla.novell.com/show_bug.cgi?id=512477
+// The generated code may have been modified as part of this fix; see atk-table.patch
 
 namespace Atk {
 
--- generated/RowInsertedHandler.cs	2009-10-06 13:41:52.000000000 -0700
+++ RowInsertedHandler.cs	2009-10-06 14:04:08.000000000 -0700
@@ -1,5 +1,6 @@
-// This file was generated by the Gtk# code generator.
-// Any changes made will be lost if regenerated.
+// This file was auto-generated at one time, but is hardcoded here as part of the fix
+// for the AtkTable interface;  see https://bugzilla.novell.com/show_bug.cgi?id=512477
+// The generated code may have been modified as part of this fix; see atk-table.patch
 
 namespace Atk {
 
--- generated/Table.cs	2009-10-06 13:41:52.000000000 -0700
+++ Table.cs	2009-10-06 14:04:20.000000000 -0700
@@ -1,5 +1,6 @@
-// This file was generated by the Gtk# code generator.
-// Any changes made will be lost if regenerated.
+// This file was auto-generated at one time, but is hardcoded here as part of the fix
+// for the AtkTable interface;  see https://bugzilla.novell.com/show_bug.cgi?id=512477
+// The generated code may have been modified as part of this fix; see atk-table.patch
 
 namespace Atk {
 
@@ -34,11 +35,11 @@
 		int GetIndexAt(int row, int column);
 		Atk.Object GetRowHeader(int row);
 		bool IsColumnSelected(int column);
-		int GetSelectedRows(out int selected);
+		int [] SelectedRows { get; }
 		void SetRowDescription(int row, string description);
 		bool IsRowSelected(int row);
 		int GetRowExtentAt(int row, int column);
-		int GetSelectedColumns(out int selected);
+		int [] SelectedColumns { get; }
 		int GetColumnAtIndex(int index_);
 		int GetRowAtIndex(int index_);
 		Atk.Object Caption { 
@@ -73,8 +74,8 @@
 		void SetColumnHeader (int column, Atk.Object header);
 		void SetRowDescription (int row, string description);
 		void SetRowHeader (int row, Atk.Object header);
-		int GetSelectedColumns (out int selected);
-		int GetSelectedRows (out int selected);
+		int [] SelectedColumns { get; }
+		int [] SelectedRows { get; }
 		bool IsColumnSelected (int column);
 		bool IsRowSelected (int row);
 		bool IsSelected (int row, int column);
--- generated-trunk/TableAdapter.cs	2009-11-09 15:50:24.000000000 -0800
+++ TableAdapter.cs	2009-11-10 12:14:22.000000000 -0800
@@ -1,5 +1,6 @@
-// This file was generated by the Gtk# code generator.
-// Any changes made will be lost if regenerated.
+// This file was auto-generated at one time, but is hardcoded here as part of the fix
+// for the AtkTable interface;  see https://bugzilla.novell.com/show_bug.cgi?id=512477
+// The generated code may have been modified as part of this fix; see atk-table.patch
 
 namespace Atk {
 
@@ -391,14 +392,20 @@
 		}
 
 		[GLib.CDeclCallback]
-		delegate int GetSelectedColumnsDelegate (IntPtr table, out int selected);
+		delegate int GetSelectedColumnsDelegate (IntPtr table, out IntPtr selected_ptr);
 
-		static int GetSelectedColumnsCallback (IntPtr table, out int selected)
+		static int GetSelectedColumnsCallback (IntPtr table, out IntPtr selected_ptr)
 		{
 			try {
 				Atk.TableImplementor __obj = GLib.Object.GetObject (table, false) as Atk.TableImplementor;
-				int __result = __obj.GetSelectedColumns (out selected);
-				return __result;
+				int [] selected = __obj.SelectedColumns;
+				if (selected.Length > 0) {
+					selected_ptr = GLib.Marshaller.Malloc ((ulong)(Marshal.SizeOf (typeof(int)) * selected.Length));
+					Marshal.Copy (selected, 0, selected_ptr, selected.Length);
+				} else {
+					selected_ptr = IntPtr.Zero;
+				}
+				return selected.Length;
 			} catch (Exception e) {
 				GLib.ExceptionManager.RaiseUnhandledException (e, true);
 				// NOTREACHED: above call does not return.
@@ -407,14 +414,20 @@
 		}
 
 		[GLib.CDeclCallback]
-		delegate int GetSelectedRowsDelegate (IntPtr table, out int selected);
+		delegate int GetSelectedRowsDelegate (IntPtr table, out IntPtr selected);
 
-		static int GetSelectedRowsCallback (IntPtr table, out int selected)
+		static int GetSelectedRowsCallback (IntPtr table, out IntPtr selected_ptr)
 		{
 			try {
 				Atk.TableImplementor __obj = GLib.Object.GetObject (table, false) as Atk.TableImplementor;
-				int __result = __obj.GetSelectedRows (out selected);
-				return __result;
+				int [] selected = __obj.SelectedRows;
+				if (selected.Length > 0) {
+					selected_ptr = GLib.Marshaller.Malloc ((ulong)(Marshal.SizeOf (typeof(int)) * selected.Length));
+					Marshal.Copy (selected, 0, selected_ptr, selected.Length);
+				} else {
+					selected_ptr = IntPtr.Zero;
+				}
+				return selected.Length;
 			} catch (Exception e) {
 				GLib.ExceptionManager.RaiseUnhandledException (e, true);
 				// NOTREACHED: above call does not return.
@@ -861,12 +874,27 @@
 		}
 
 		[DllImport("libatk-1.0-0.dll")]
-		static extern int atk_table_get_selected_rows(IntPtr raw, out int selected);
+		static extern int atk_table_get_selected_rows(IntPtr raw, out IntPtr selected);
 
-		public int GetSelectedRows(out int selected) {
-			int raw_ret = atk_table_get_selected_rows(Handle, out selected);
-			int ret = raw_ret;
-			return ret;
+		private static readonly int [] empty_int_array = new int[0];
+
+		public int [] SelectedRows {
+			get {
+				IntPtr selected_ptr;
+				int len = atk_table_get_selected_rows(Handle, out selected_ptr);
+				int [] selected = null;
+
+				if (len > 0) {
+					selected = new int [len];
+					Marshal.Copy (selected_ptr, selected, 0, len);
+				}
+
+				if (selected_ptr != IntPtr.Zero) {
+					GLib.Marshaller.Free (selected_ptr);
+				}
+
+				return selected == null ? empty_int_array : selected;
+			}
 		}
 
 		[DllImport("libatk-1.0-0.dll")]
@@ -897,12 +925,25 @@
 		}
 
 		[DllImport("libatk-1.0-0.dll")]
-		static extern int atk_table_get_selected_columns(IntPtr raw, out int selected);
+		static extern int atk_table_get_selected_columns(IntPtr raw, out IntPtr selected);
 
-		public int GetSelectedColumns(out int selected) {
-			int raw_ret = atk_table_get_selected_columns(Handle, out selected);
-			int ret = raw_ret;
-			return ret;
+		public int [] SelectedColumns{
+			get {
+				IntPtr selected_ptr;
+				int len = atk_table_get_selected_columns(Handle, out selected_ptr);
+				int [] selected = null;
+
+				if (len > 0) {
+					selected = new int [len];
+					Marshal.Copy (selected_ptr, selected, 0, len);
+				}
+
+				if (selected_ptr != IntPtr.Zero) {
+					GLib.Marshaller.Free (selected_ptr);
+				}
+
+				return selected == null ? empty_int_array : selected;
+			}
 		}
 
 		[DllImport("libatk-1.0-0.dll")]
