// Misc.custom - Atk Misc class customizations
//
// Author: Mike Kestner <mkestner@novell.com>
//
// Copyright (c) 2008 Novell, Inc.
//
// This code is inserted after the automatically generated code.
//
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.


		[DllImport("atksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
		static extern void atksharp_misc_override_threads_enter (IntPtr type, ThreadDelegate cb);

		[DllImport("atksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
		static extern void atksharp_misc_base_threads_enter (IntPtr raw);

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ThreadDelegate (IntPtr raw);

		static ThreadDelegate ThreadsEnterCallback;

		static void ThreadsEnter_cb (IntPtr raw)
		{
			try {
				Atk.Misc __obj = GLib.Object.GetObject (raw, false) as Atk.Misc;
				__obj.OnThreadsEnter ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		static void OverrideThreadsEnter (GLib.GType gtype)
		{
			if (ThreadsEnterCallback == null)
				ThreadsEnterCallback = new ThreadDelegate (ThreadsEnter_cb);
			atksharp_misc_override_threads_enter (gtype.Val, ThreadsEnterCallback);
		}

		[GLib.DefaultSignalHandler (Type=typeof (Atk.Misc), ConnectionMethod="OverrideThreadsEnter")]
		protected virtual void OnThreadsEnter ()
		{
			atksharp_misc_base_threads_enter (Handle);
		}

		[DllImport("atksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
		static extern void atksharp_misc_override_threads_leave (IntPtr type, ThreadDelegate cb);
		[DllImport("atksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
		static extern void atksharp_misc_base_threads_leave (IntPtr raw);

		static ThreadDelegate ThreadsLeaveCallback;

		static void ThreadsLeave_cb (IntPtr raw)
		{
			try {
				Atk.Misc __obj = GLib.Object.GetObject (raw, false) as Atk.Misc;
				__obj.OnThreadsLeave ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		static void OverrideThreadsLeave (GLib.GType gtype)
		{
			if (ThreadsLeaveCallback == null)
				ThreadsLeaveCallback = new ThreadDelegate (ThreadsLeave_cb);
			atksharp_misc_override_threads_leave (gtype.Val, ThreadsLeaveCallback);
		}

		[GLib.DefaultSignalHandler (Type=typeof (Atk.Misc), ConnectionMethod="OverrideThreadsLeave")]
		protected virtual void OnThreadsLeave ()
		{
			atksharp_misc_base_threads_leave (Handle);
		}

		[DllImport("atksharpglue-2", CallingConvention=CallingConvention.Cdecl)]
		static extern void atksharp_misc_set_singleton_instance (IntPtr misc);

		public static void SetSingletonInstance (Misc misc)
		{
			atksharp_misc_set_singleton_instance (misc.Handle);
		}
